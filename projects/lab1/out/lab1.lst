
projects/lab1/out/lab1.elf:     file format elf32-littlearm
projects/lab1/out/lab1.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000469

Program Header:
0x70000001 off    0x000117b4 vaddr 0x1a0017b4 paddr 0x1a0017b4 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000038 vaddr 0x10000038 paddr 0x10000038 align 2**16
         filesz 0x00000000 memsz 0x00000014 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000017bc memsz 0x000017bc flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0017bc align 2**16
         filesz 0x00000038 memsz 0x00000038 flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  10000000  1a0017bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020038  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020038  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020038  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
  6 .bss          00000014  10000038  10000038  00010038  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020038  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020038  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020038  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
 11 .init_array   00000004  1a000300  1a000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .text         000014b0  1a000304  1a000304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .ARM.exidx    00000008  1a0017b4  1a0017b4  000117b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .uninit_RESERVED 00000000  10000000  10000000  00020038  2**2
                  CONTENTS
 15 .noinit_RAM2  00000000  10080000  10080000  00020038  2**2
                  CONTENTS
 16 .noinit_RAM3  00000000  20000000  20000000  00020038  2**2
                  CONTENTS
 17 .noinit_RAM4  00000000  20008000  20008000  00020038  2**2
                  CONTENTS
 18 .noinit_RAM5  00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
 19 .noinit       00000000  1000004c  1000004c  00000000  2**2
                  ALLOC
 20 .debug_info   0000f514  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 00002c83  00000000  00000000  0002f54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00004d27  00000000  00000000  000321cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00000828  00000000  00000000  00036ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 000006a7  00000000  00000000  00037720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  000090a8  00000000  00000000  00037dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   0000a94e  00000000  00000000  00040e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    0001e7f9  00000000  00000000  0004b7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      0000001e  00000000  00000000  00069fb6  2**0
                  CONTENTS, READONLY
 29 .ARM.attributes 00000034  00000000  00000000  00069fd4  2**0
                  CONTENTS, READONLY
 30 .debug_frame  00001294  00000000  00000000  0006a008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line_str 0000004e  00000000  00000000  0006b29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000038 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a000300 l    d  .init_array	00000000 .init_array
1a000304 l    d  .text	00000000 .text
1a0017b4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000004c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 configuracion.c
00000000 l    df *ABS*	00000000 lab1.c
10000038 l     O .bss	00000001 actualizar
1000003c l     O .bss	00000004 contador.0
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 board.c
1a000638 l     F .text	00000048 Board_LED_Init
1a000680 l     F .text	00000044 Board_TEC_Init
1a0006c4 l     F .text	00000044 Board_GPIO_Init
1a000708 l     F .text	00000030 Board_ADC_Init
1a000738 l     F .text	00000038 Board_SPI_Init
1a000770 l     F .text	00000024 Board_I2C_Init
1a001644 l     O .text	00000008 GpioButtons
1a00164c l     O .text	0000000c GpioLeds
1a001658 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001670 l     O .text	00000004 InitClkStates
1a001674 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000890 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0008a4 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a00096c l     F .text	000000a8 pll_calc_divs
1a000a14 l     F .text	00000110 pll_get_frac
1a000b24 l     F .text	00000054 Chip_Clock_FindBaseClock
1a000d9c l     F .text	00000022 Chip_Clock_GetDivRate
10000044 l     O .bss	00000008 audio_usb_pll_freq
1a0016f0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a000f94 l     F .text	00000014 Chip_SSP_GetClockIndex
1a000fa8 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00175c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0011a4 l     F .text	0000002c Chip_UART_GetIndex
1a0017a4 l     O .text	00000008 UART_BClock
1a0017ac l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a000304 l       .init_array	00000000 __init_array_end
1a000300 l       .bss_RAM5	00000000 __preinit_array_end
1a000300 l       .init_array	00000000 __init_array_start
1a000300 l       .bss_RAM5	00000000 __preinit_array_start
1a000bc4 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0007e4 g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a00094a g     F .text	0000000c Chip_ADC_SetResolution
1a0003cc g     F .text	0000005c SysTick_Handler
1a000464  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a0017bc g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff7426 g       *ABS*	00000000 __valid_user_code_checksum
1a0017bc g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a000e44 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0005cc g     F .text	0000006c Led_Toggle
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a001338 g     F .text	00000000 .hidden __aeabi_uldivmod
1000004c g       .noinit	00000000 _noinit
10000040 g     O .bss	00000004 SystemCoreClock
1a0011d0 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a000ec0 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000818 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001368 g     F .text	0000027a .hidden __udivmoddi4
1a001640 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000560 g     F .text	0000006c Led_Off
1a000428 g     F .text	00000008 ConfigurarUART
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000350 g     F .text	0000007c ConfigurarPuertosLaboratorio
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0017b4 g       .text	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a0015e8 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0007b8 g     F .text	0000002c Board_Init
1a0004f2  w    F .text	00000002 _init
1a0004f4 g     F .text	0000006c Led_On
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1000004c g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000468 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a000f58 g     F .text	0000003c Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000b78 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a000f30 g     F .text	00000028 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a000d34 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a000fc0 g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a000e1c g     F .text	00000028 Chip_Clock_GetBaseClock
10000038 g       .bss	00000000 _bss
1a000918 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000fd2 g     F .text	00000042 Chip_SSP_SetBitRate
1a000f0c g     F .text	00000002 Chip_GPIO_Init
1a00166c g     O .text	00000004 OscRateIn
1000004c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a0015e4  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0001ba  w    F .text	00000002 USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a000304 g     F .text	0000004c ConfigurarInterrupcion
1a000be0 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001630 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000430 g     F .text	00000034 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a000e50 g     F .text	0000003c Chip_Clock_EnableOpts
1a000bfc g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000cb4 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001300 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0004f0  w    F .text	00000002 _fini
1a0008d8 g     F .text	00000040 Chip_ADC_Init
1a0007ec g     F .text	0000002c Board_SetupMuxing
1a001224 g     F .text	000000dc Chip_UART_SetBaudFDR
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1000004c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001014 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000794 g     F .text	00000024 Board_Debug_Init
10000038 g       .data	00000000 _edata
1a000f10 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00104c g     F .text	00000158 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000958 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0015e4  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a000e8c g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000dc0 g     F .text	0000005c Chip_Clock_SetBaseClock
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000884 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 69 04 00 1a 79 01 00 1a 7b 01 00 1a     ....i...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 26 74 ff 53     }...........&t.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	cd 03 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0017bc 	.word	0x1a0017bc
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000038 	.word	0x00000038
1a000120:	1a0017bc 	.word	0x1a0017bc
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0017bc 	.word	0x1a0017bc
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0017bc 	.word	0x1a0017bc
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0017bc 	.word	0x1a0017bc
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000038 	.word	0x10000038
1a000154:	00000014 	.word	0x00000014
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

Disassembly of section .text:

1a000304 <ConfigurarInterrupcion>:
#include "configuracion.h"


void ConfigurarInterrupcion(void) {
1a000304:	b508      	push	{r3, lr}
   __asm__ volatile ("cpsid i");
1a000306:	b672      	cpsid	i

   /* Activate SysTick */
   SystemCoreClockUpdate();
1a000308:	f000 fb26 	bl	1a000958 <SystemCoreClockUpdate>
   SysTick_Config(SystemCoreClock/1000);
1a00030c:	4b0d      	ldr	r3, [pc, #52]	; (1a000344 <ConfigurarInterrupcion+0x40>)
1a00030e:	681b      	ldr	r3, [r3, #0]
1a000310:	4a0d      	ldr	r2, [pc, #52]	; (1a000348 <ConfigurarInterrupcion+0x44>)
1a000312:	fba2 2303 	umull	r2, r3, r2, r3
1a000316:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a000318:	3b01      	subs	r3, #1
1a00031a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a00031e:	d20a      	bcs.n	1a000336 <ConfigurarInterrupcion+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a000320:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
1a000324:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000326:	4b09      	ldr	r3, [pc, #36]	; (1a00034c <ConfigurarInterrupcion+0x48>)
1a000328:	21e0      	movs	r1, #224	; 0xe0
1a00032a:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a00032e:	2300      	movs	r3, #0
1a000330:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000332:	2307      	movs	r3, #7
1a000334:	6113      	str	r3, [r2, #16]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000336:	4b05      	ldr	r3, [pc, #20]	; (1a00034c <ConfigurarInterrupcion+0x48>)
1a000338:	22e0      	movs	r2, #224	; 0xe0
1a00033a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

   /* Update priority set by SysTick_Config */
   NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);

   __asm__ volatile ("cpsie i");
1a00033e:	b662      	cpsie	i
}
1a000340:	bd08      	pop	{r3, pc}
1a000342:	bf00      	nop
1a000344:	10000040 	.word	0x10000040
1a000348:	10624dd3 	.word	0x10624dd3
1a00034c:	e000ed00 	.word	0xe000ed00

1a000350 <ConfigurarPuertosLaboratorio>:
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000350:	4a1c      	ldr	r2, [pc, #112]	; (1a0003c4 <ConfigurarPuertosLaboratorio+0x74>)
1a000352:	23d4      	movs	r3, #212	; 0xd4
1a000354:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
1a000358:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
1a00035c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_ClearValue(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue)
{
	pGPIO->CLR[portNum] = bitValue;
1a000360:	4b19      	ldr	r3, [pc, #100]	; (1a0003c8 <ConfigurarPuertosLaboratorio+0x78>)
1a000362:	2107      	movs	r1, #7
1a000364:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
		pGPIO->DIR[portNum] |= bitValue;
1a000368:	6959      	ldr	r1, [r3, #20]
1a00036a:	f041 0107 	orr.w	r1, r1, #7
1a00036e:	6159      	str	r1, [r3, #20]
1a000370:	21d0      	movs	r1, #208	; 0xd0
1a000372:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
1a000376:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
1a00037a:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
	pGPIO->CLR[portNum] = bitValue;
1a00037e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a000382:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
1a000386:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
1a00038a:	f8c3 1284 	str.w	r1, [r3, #644]	; 0x284
		pGPIO->DIR[portNum] |= bitValue;
1a00038e:	6819      	ldr	r1, [r3, #0]
1a000390:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
1a000394:	6019      	str	r1, [r3, #0]
1a000396:	6859      	ldr	r1, [r3, #4]
1a000398:	f441 51c0 	orr.w	r1, r1, #6144	; 0x1800
1a00039c:	6059      	str	r1, [r3, #4]
1a00039e:	2140      	movs	r1, #64	; 0x40
1a0003a0:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
1a0003a4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
1a0003a8:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
1a0003ac:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
		pGPIO->DIR[portNum] &= ~bitValue;
1a0003b0:	681a      	ldr	r2, [r3, #0]
1a0003b2:	f422 7244 	bic.w	r2, r2, #784	; 0x310
1a0003b6:	601a      	str	r2, [r3, #0]
1a0003b8:	685a      	ldr	r2, [r3, #4]
1a0003ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
1a0003be:	605a      	str	r2, [r3, #4]
   Chip_SCU_PinMux(1, 1, SCU_MODE_ENT, SCU_MODE_FUNC0);
   Chip_SCU_PinMux(1, 2, SCU_MODE_ENT, SCU_MODE_FUNC0);
   Chip_SCU_PinMux(1, 6, SCU_MODE_ENT, SCU_MODE_FUNC0);
   Chip_GPIO_SetDir(LPC_GPIO_PORT, 0, (1 << 4) | (1 << 8) | (1 << 9), false);
   Chip_GPIO_SetDir(LPC_GPIO_PORT, 1, (1 << 9), false);
}
1a0003c0:	4770      	bx	lr
1a0003c2:	bf00      	nop
1a0003c4:	40086000 	.word	0x40086000
1a0003c8:	400f6000 	.word	0x400f6000

1a0003cc <SysTick_Handler>:
#define BREAK "ERROR BREAK\r\n"
#define UNKNOWN "ERROR UNKNOWN\r\n"

static uint8_t actualizar = 0;

void SysTick_Handler(void) {
1a0003cc:	b508      	push	{r3, lr}
   static int contador = 0;

   contador++;
1a0003ce:	4a13      	ldr	r2, [pc, #76]	; (1a00041c <SysTick_Handler+0x50>)
1a0003d0:	6813      	ldr	r3, [r2, #0]
1a0003d2:	3301      	adds	r3, #1
1a0003d4:	6013      	str	r3, [r2, #0]
   if (contador%500 == 0) {
1a0003d6:	4912      	ldr	r1, [pc, #72]	; (1a000420 <SysTick_Handler+0x54>)
1a0003d8:	fb81 2103 	smull	r2, r1, r1, r3
1a0003dc:	17da      	asrs	r2, r3, #31
1a0003de:	ebc2 1261 	rsb	r2, r2, r1, asr #5
1a0003e2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a0003e6:	fb01 3212 	mls	r2, r1, r2, r3
1a0003ea:	b19a      	cbz	r2, 1a000414 <SysTick_Handler+0x48>
      Led_Toggle(RED_LED);
   }
   if(contador %1000 == 0) {
1a0003ec:	4b0b      	ldr	r3, [pc, #44]	; (1a00041c <SysTick_Handler+0x50>)
1a0003ee:	681a      	ldr	r2, [r3, #0]
1a0003f0:	490b      	ldr	r1, [pc, #44]	; (1a000420 <SysTick_Handler+0x54>)
1a0003f2:	fb81 3102 	smull	r3, r1, r1, r2
1a0003f6:	17d3      	asrs	r3, r2, #31
1a0003f8:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
1a0003fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a000400:	fb01 2313 	mls	r3, r1, r3, r2
1a000404:	b92b      	cbnz	r3, 1a000412 <SysTick_Handler+0x46>
       contador = 0;
1a000406:	4b05      	ldr	r3, [pc, #20]	; (1a00041c <SysTick_Handler+0x50>)
1a000408:	2200      	movs	r2, #0
1a00040a:	601a      	str	r2, [r3, #0]
       actualizar = 1;
1a00040c:	4b05      	ldr	r3, [pc, #20]	; (1a000424 <SysTick_Handler+0x58>)
1a00040e:	2201      	movs	r2, #1
1a000410:	701a      	strb	r2, [r3, #0]
   }
}
1a000412:	bd08      	pop	{r3, pc}
      Led_Toggle(RED_LED);
1a000414:	2003      	movs	r0, #3
1a000416:	f000 f8d9 	bl	1a0005cc <Led_Toggle>
1a00041a:	e7e7      	b.n	1a0003ec <SysTick_Handler+0x20>
1a00041c:	1000003c 	.word	0x1000003c
1a000420:	10624dd3 	.word	0x10624dd3
1a000424:	10000038 	.word	0x10000038

1a000428 <ConfigurarUART>:

void ConfigurarUART(LPC_USART_T *pUART){
1a000428:	b508      	push	{r3, lr}
    Chip_UART_Init(pUART);
1a00042a:	f000 fed1 	bl	1a0011d0 <Chip_UART_Init>

    /*  COMPLETAR LA IMPLEMENTACION DE ESTA FUNCION  */
}
1a00042e:	bd08      	pop	{r3, pc}

1a000430 <main>:
     /*  COMPLETAR LA IMPLEMENTACION DE ESTA FUNCION  */
}


int main(void)
{
1a000430:	b508      	push	{r3, lr}

   ConfigurarPuertosLaboratorio();
1a000432:	f7ff ff8d 	bl	1a000350 <ConfigurarPuertosLaboratorio>
   ConfigurarInterrupcion();
1a000436:	f7ff ff65 	bl	1a000304 <ConfigurarInterrupcion>
   ConfigurarUART(USB_UART);
1a00043a:	4808      	ldr	r0, [pc, #32]	; (1a00045c <main+0x2c>)
1a00043c:	f7ff fff4 	bl	1a000428 <ConfigurarUART>
   
   while (1) {
       if(actualizar){
1a000440:	4b07      	ldr	r3, [pc, #28]	; (1a000460 <main+0x30>)
1a000442:	781b      	ldrb	r3, [r3, #0]
1a000444:	2b00      	cmp	r3, #0
1a000446:	d0fb      	beq.n	1a000440 <main+0x10>
           actualizar = 0;
1a000448:	4b05      	ldr	r3, [pc, #20]	; (1a000460 <main+0x30>)
1a00044a:	2200      	movs	r2, #0
1a00044c:	701a      	strb	r2, [r3, #0]
           Led_On(GREEN_LED);
1a00044e:	2005      	movs	r0, #5
1a000450:	f000 f850 	bl	1a0004f4 <Led_On>

           /*  ESCRIBIR IMPLEMENTACION UARTDISPONIBLE Y ENVIAR LA CUENTA ACTUAL  */
           
           Led_Off(GREEN_LED);
1a000454:	2005      	movs	r0, #5
1a000456:	f000 f883 	bl	1a000560 <Led_Off>
1a00045a:	e7f1      	b.n	1a000440 <main+0x10>
1a00045c:	400c1000 	.word	0x400c1000
1a000460:	10000038 	.word	0x10000038

1a000464 <initialise_monitor_handles>:
}
1a000464:	4770      	bx	lr
	...

1a000468 <Reset_Handler>:
void Reset_Handler(void) {
1a000468:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00046a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00046c:	4b19      	ldr	r3, [pc, #100]	; (1a0004d4 <Reset_Handler+0x6c>)
1a00046e:	4a1a      	ldr	r2, [pc, #104]	; (1a0004d8 <Reset_Handler+0x70>)
1a000470:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000474:	4a19      	ldr	r2, [pc, #100]	; (1a0004dc <Reset_Handler+0x74>)
1a000476:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00047a:	2300      	movs	r3, #0
1a00047c:	e005      	b.n	1a00048a <Reset_Handler+0x22>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00047e:	4a18      	ldr	r2, [pc, #96]	; (1a0004e0 <Reset_Handler+0x78>)
1a000480:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000484:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000488:	3301      	adds	r3, #1
1a00048a:	2b07      	cmp	r3, #7
1a00048c:	d9f7      	bls.n	1a00047e <Reset_Handler+0x16>
    __asm__ volatile("cpsie i");
1a00048e:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000490:	4b14      	ldr	r3, [pc, #80]	; (1a0004e4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000492:	e007      	b.n	1a0004a4 <Reset_Handler+0x3c>
        SectionLen = *SectionTableAddr++;
1a000494:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000498:	689a      	ldr	r2, [r3, #8]
1a00049a:	6859      	ldr	r1, [r3, #4]
1a00049c:	6818      	ldr	r0, [r3, #0]
1a00049e:	f7ff fe74 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0004a2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0004a4:	4a10      	ldr	r2, [pc, #64]	; (1a0004e8 <Reset_Handler+0x80>)
1a0004a6:	4293      	cmp	r3, r2
1a0004a8:	d3f4      	bcc.n	1a000494 <Reset_Handler+0x2c>
1a0004aa:	e006      	b.n	1a0004ba <Reset_Handler+0x52>
        ExeAddr = *SectionTableAddr++;
1a0004ac:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0004ae:	6859      	ldr	r1, [r3, #4]
1a0004b0:	f854 0b08 	ldr.w	r0, [r4], #8
1a0004b4:	f7ff fe78 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0004b8:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0004ba:	4a0c      	ldr	r2, [pc, #48]	; (1a0004ec <Reset_Handler+0x84>)
1a0004bc:	4293      	cmp	r3, r2
1a0004be:	d3f5      	bcc.n	1a0004ac <Reset_Handler+0x44>
    SystemInit();
1a0004c0:	f000 ff1e 	bl	1a001300 <SystemInit>
    __libc_init_array();
1a0004c4:	f001 f890 	bl	1a0015e8 <__libc_init_array>
    initialise_monitor_handles();
1a0004c8:	f7ff ffcc 	bl	1a000464 <initialise_monitor_handles>
    main();
1a0004cc:	f7ff ffb0 	bl	1a000430 <main>
        __asm__ volatile("wfi");
1a0004d0:	bf30      	wfi
    while (1) {
1a0004d2:	e7fd      	b.n	1a0004d0 <Reset_Handler+0x68>
1a0004d4:	40053000 	.word	0x40053000
1a0004d8:	10df1000 	.word	0x10df1000
1a0004dc:	01dff7ff 	.word	0x01dff7ff
1a0004e0:	e000e280 	.word	0xe000e280
1a0004e4:	1a000114 	.word	0x1a000114
1a0004e8:	1a000150 	.word	0x1a000150
1a0004ec:	1a000178 	.word	0x1a000178

1a0004f0 <_fini>:
void _fini(void) {}
1a0004f0:	4770      	bx	lr

1a0004f2 <_init>:
void _init(void) {}
1a0004f2:	4770      	bx	lr

1a0004f4 <Led_On>:
	return TRUE;
}

/** \brief Function to turn on a specific led */
uint8_t Led_On(uint8_t led)
{
1a0004f4:	4603      	mov	r3, r0
	/** \details Function to turn on a specific led at the EDU-CIAA board.
	 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
	 * */
	uint8_t result = FALSE;

	if (led == RED_LED)
1a0004f6:	2803      	cmp	r0, #3
1a0004f8:	d00e      	beq.n	1a000518 <Led_On+0x24>
	uint8_t result = FALSE;
1a0004fa:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == YELLOW_LED)
1a0004fc:	2b04      	cmp	r3, #4
1a0004fe:	d012      	beq.n	1a000526 <Led_On+0x32>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a000500:	2b05      	cmp	r3, #5
1a000502:	d017      	beq.n	1a000534 <Led_On+0x40>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
    if (led == RGB_R_LED)
1a000504:	b91b      	cbnz	r3, 1a00050e <Led_On+0x1a>
	pGPIO->SET[port] = (1 << pin);
1a000506:	2001      	movs	r0, #1
1a000508:	4a14      	ldr	r2, [pc, #80]	; (1a00055c <Led_On+0x68>)
1a00050a:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a00050e:	2b01      	cmp	r3, #1
1a000510:	d017      	beq.n	1a000542 <Led_On+0x4e>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a000512:	2b02      	cmp	r3, #2
1a000514:	d01b      	beq.n	1a00054e <Led_On+0x5a>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
}
1a000516:	4770      	bx	lr
1a000518:	4a10      	ldr	r2, [pc, #64]	; (1a00055c <Led_On+0x68>)
1a00051a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a00051e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		result = TRUE;
1a000522:	2001      	movs	r0, #1
1a000524:	e7ea      	b.n	1a0004fc <Led_On+0x8>
1a000526:	4a0d      	ldr	r2, [pc, #52]	; (1a00055c <Led_On+0x68>)
1a000528:	f44f 6100 	mov.w	r1, #2048	; 0x800
1a00052c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		result = TRUE;
1a000530:	2001      	movs	r0, #1
1a000532:	e7e5      	b.n	1a000500 <Led_On+0xc>
1a000534:	4a09      	ldr	r2, [pc, #36]	; (1a00055c <Led_On+0x68>)
1a000536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
1a00053a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		result = TRUE;
1a00053e:	2001      	movs	r0, #1
1a000540:	e7e0      	b.n	1a000504 <Led_On+0x10>
1a000542:	4a06      	ldr	r2, [pc, #24]	; (1a00055c <Led_On+0x68>)
1a000544:	2102      	movs	r1, #2
1a000546:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
		result = TRUE;
1a00054a:	4618      	mov	r0, r3
1a00054c:	e7e1      	b.n	1a000512 <Led_On+0x1e>
1a00054e:	4b03      	ldr	r3, [pc, #12]	; (1a00055c <Led_On+0x68>)
1a000550:	2204      	movs	r2, #4
1a000552:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		result = TRUE;
1a000556:	2001      	movs	r0, #1
1a000558:	e7dd      	b.n	1a000516 <Led_On+0x22>
1a00055a:	bf00      	nop
1a00055c:	400f6000 	.word	0x400f6000

1a000560 <Led_Off>:

/** \brief Function to turn off a specific led */
uint8_t Led_Off(uint8_t led)
{
1a000560:	4603      	mov	r3, r0
	/** \details Function to turn off a specific led at the EDU-CIAA board.
		 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
		 * */
	uint8_t result = FALSE;

	if (led == RED_LED)
1a000562:	2803      	cmp	r0, #3
1a000564:	d00e      	beq.n	1a000584 <Led_Off+0x24>
	uint8_t result = FALSE;
1a000566:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == YELLOW_LED)
1a000568:	2b04      	cmp	r3, #4
1a00056a:	d012      	beq.n	1a000592 <Led_Off+0x32>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a00056c:	2b05      	cmp	r3, #5
1a00056e:	d017      	beq.n	1a0005a0 <Led_Off+0x40>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_R_LED)
1a000570:	b91b      	cbnz	r3, 1a00057a <Led_Off+0x1a>
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a000572:	2001      	movs	r0, #1
1a000574:	4a14      	ldr	r2, [pc, #80]	; (1a0005c8 <Led_Off+0x68>)
1a000576:	f8c2 0294 	str.w	r0, [r2, #660]	; 0x294
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a00057a:	2b01      	cmp	r3, #1
1a00057c:	d017      	beq.n	1a0005ae <Led_Off+0x4e>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a00057e:	2b02      	cmp	r3, #2
1a000580:	d01b      	beq.n	1a0005ba <Led_Off+0x5a>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
}
1a000582:	4770      	bx	lr
1a000584:	4a10      	ldr	r2, [pc, #64]	; (1a0005c8 <Led_Off+0x68>)
1a000586:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a00058a:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
		result = TRUE;
1a00058e:	2001      	movs	r0, #1
1a000590:	e7ea      	b.n	1a000568 <Led_Off+0x8>
1a000592:	4a0d      	ldr	r2, [pc, #52]	; (1a0005c8 <Led_Off+0x68>)
1a000594:	f44f 6100 	mov.w	r1, #2048	; 0x800
1a000598:	f8c2 1284 	str.w	r1, [r2, #644]	; 0x284
		result = TRUE;
1a00059c:	2001      	movs	r0, #1
1a00059e:	e7e5      	b.n	1a00056c <Led_Off+0xc>
1a0005a0:	4a09      	ldr	r2, [pc, #36]	; (1a0005c8 <Led_Off+0x68>)
1a0005a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
1a0005a6:	f8c2 1284 	str.w	r1, [r2, #644]	; 0x284
		result = TRUE;
1a0005aa:	2001      	movs	r0, #1
1a0005ac:	e7e0      	b.n	1a000570 <Led_Off+0x10>
1a0005ae:	4a06      	ldr	r2, [pc, #24]	; (1a0005c8 <Led_Off+0x68>)
1a0005b0:	2102      	movs	r1, #2
1a0005b2:	f8c2 1294 	str.w	r1, [r2, #660]	; 0x294
		result = TRUE;
1a0005b6:	4618      	mov	r0, r3
1a0005b8:	e7e1      	b.n	1a00057e <Led_Off+0x1e>
1a0005ba:	4b03      	ldr	r3, [pc, #12]	; (1a0005c8 <Led_Off+0x68>)
1a0005bc:	2204      	movs	r2, #4
1a0005be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
		result = TRUE;
1a0005c2:	2001      	movs	r0, #1
1a0005c4:	e7dd      	b.n	1a000582 <Led_Off+0x22>
1a0005c6:	bf00      	nop
1a0005c8:	400f6000 	.word	0x400f6000

1a0005cc <Led_Toggle>:

/** \brief Function to turn off a specific led */
uint8_t Led_Toggle(uint8_t led)
{
1a0005cc:	4603      	mov	r3, r0
	/** \details Function to toogle a specific led at the EDU-CIAA board.
	 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
	 * */
uint8_t result = FALSE;

	if (led == RED_LED)
1a0005ce:	2803      	cmp	r0, #3
1a0005d0:	d00e      	beq.n	1a0005f0 <Led_Toggle+0x24>
uint8_t result = FALSE;
1a0005d2:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == YELLOW_LED)
1a0005d4:	2b04      	cmp	r3, #4
1a0005d6:	d012      	beq.n	1a0005fe <Led_Toggle+0x32>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a0005d8:	2b05      	cmp	r3, #5
1a0005da:	d017      	beq.n	1a00060c <Led_Toggle+0x40>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_R_LED)
1a0005dc:	b91b      	cbnz	r3, 1a0005e6 <Led_Toggle+0x1a>
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinToggle(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->NOT[port] = (1 << pin);
1a0005de:	2001      	movs	r0, #1
1a0005e0:	4a14      	ldr	r2, [pc, #80]	; (1a000634 <Led_Toggle+0x68>)
1a0005e2:	f8c2 0314 	str.w	r0, [r2, #788]	; 0x314
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a0005e6:	2b01      	cmp	r3, #1
1a0005e8:	d017      	beq.n	1a00061a <Led_Toggle+0x4e>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a0005ea:	2b02      	cmp	r3, #2
1a0005ec:	d01b      	beq.n	1a000626 <Led_Toggle+0x5a>
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
	
}
1a0005ee:	4770      	bx	lr
1a0005f0:	4a10      	ldr	r2, [pc, #64]	; (1a000634 <Led_Toggle+0x68>)
1a0005f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a0005f6:	f8c2 1300 	str.w	r1, [r2, #768]	; 0x300
		result = TRUE;
1a0005fa:	2001      	movs	r0, #1
1a0005fc:	e7ea      	b.n	1a0005d4 <Led_Toggle+0x8>
1a0005fe:	4a0d      	ldr	r2, [pc, #52]	; (1a000634 <Led_Toggle+0x68>)
1a000600:	f44f 6100 	mov.w	r1, #2048	; 0x800
1a000604:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
		result = TRUE;
1a000608:	2001      	movs	r0, #1
1a00060a:	e7e5      	b.n	1a0005d8 <Led_Toggle+0xc>
1a00060c:	4a09      	ldr	r2, [pc, #36]	; (1a000634 <Led_Toggle+0x68>)
1a00060e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
1a000612:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
		result = TRUE;
1a000616:	2001      	movs	r0, #1
1a000618:	e7e0      	b.n	1a0005dc <Led_Toggle+0x10>
1a00061a:	4a06      	ldr	r2, [pc, #24]	; (1a000634 <Led_Toggle+0x68>)
1a00061c:	2102      	movs	r1, #2
1a00061e:	f8c2 1314 	str.w	r1, [r2, #788]	; 0x314
		result = TRUE;
1a000622:	4618      	mov	r0, r3
1a000624:	e7e1      	b.n	1a0005ea <Led_Toggle+0x1e>
1a000626:	4b03      	ldr	r3, [pc, #12]	; (1a000634 <Led_Toggle+0x68>)
1a000628:	2204      	movs	r2, #4
1a00062a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
		result = TRUE;
1a00062e:	2001      	movs	r0, #1
1a000630:	e7dd      	b.n	1a0005ee <Led_Toggle+0x22>
1a000632:	bf00      	nop
1a000634:	400f6000 	.word	0x400f6000

1a000638 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000638:	2200      	movs	r2, #0
1a00063a:	2a05      	cmp	r2, #5
1a00063c:	d81b      	bhi.n	1a000676 <Board_LED_Init+0x3e>
{
1a00063e:	b510      	push	{r4, lr}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000640:	4b0d      	ldr	r3, [pc, #52]	; (1a000678 <Board_LED_Init+0x40>)
1a000642:	f813 e012 	ldrb.w	lr, [r3, r2, lsl #1]
1a000646:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a00064a:	f893 c001 	ldrb.w	ip, [r3, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a00064e:	4b0b      	ldr	r3, [pc, #44]	; (1a00067c <Board_LED_Init+0x44>)
1a000650:	f50e 6400 	add.w	r4, lr, #2048	; 0x800
1a000654:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
1a000658:	2001      	movs	r0, #1
1a00065a:	fa00 f00c 	lsl.w	r0, r0, ip
1a00065e:	4301      	orrs	r1, r0
1a000660:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000664:	eb03 134e 	add.w	r3, r3, lr, lsl #5
1a000668:	2100      	movs	r1, #0
1a00066a:	f803 100c 	strb.w	r1, [r3, ip]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00066e:	3201      	adds	r2, #1
1a000670:	2a05      	cmp	r2, #5
1a000672:	d9e5      	bls.n	1a000640 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a000674:	bd10      	pop	{r4, pc}
1a000676:	4770      	bx	lr
1a000678:	1a00164c 	.word	0x1a00164c
1a00067c:	400f4000 	.word	0x400f4000

1a000680 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000680:	2300      	movs	r3, #0
1a000682:	2b03      	cmp	r3, #3
1a000684:	d819      	bhi.n	1a0006ba <Board_TEC_Init+0x3a>
{
1a000686:	b410      	push	{r4}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000688:	490c      	ldr	r1, [pc, #48]	; (1a0006bc <Board_TEC_Init+0x3c>)
1a00068a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00068e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000692:	f891 c001 	ldrb.w	ip, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000696:	4c0a      	ldr	r4, [pc, #40]	; (1a0006c0 <Board_TEC_Init+0x40>)
1a000698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00069c:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0006a0:	2001      	movs	r0, #1
1a0006a2:	fa00 f00c 	lsl.w	r0, r0, ip
1a0006a6:	ea21 0100 	bic.w	r1, r1, r0
1a0006aa:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0006ae:	3301      	adds	r3, #1
1a0006b0:	2b03      	cmp	r3, #3
1a0006b2:	d9e9      	bls.n	1a000688 <Board_TEC_Init+0x8>
    }
}
1a0006b4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0006b8:	4770      	bx	lr
1a0006ba:	4770      	bx	lr
1a0006bc:	1a001644 	.word	0x1a001644
1a0006c0:	400f4000 	.word	0x400f4000

1a0006c4 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0006c4:	2300      	movs	r3, #0
1a0006c6:	2b08      	cmp	r3, #8
1a0006c8:	d819      	bhi.n	1a0006fe <Board_GPIO_Init+0x3a>
{
1a0006ca:	b410      	push	{r4}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0006cc:	490c      	ldr	r1, [pc, #48]	; (1a000700 <Board_GPIO_Init+0x3c>)
1a0006ce:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0006d2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0006d6:	f891 c001 	ldrb.w	ip, [r1, #1]
1a0006da:	4c0a      	ldr	r4, [pc, #40]	; (1a000704 <Board_GPIO_Init+0x40>)
1a0006dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0006e0:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0006e4:	2001      	movs	r0, #1
1a0006e6:	fa00 f00c 	lsl.w	r0, r0, ip
1a0006ea:	ea21 0100 	bic.w	r1, r1, r0
1a0006ee:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0006f2:	3301      	adds	r3, #1
1a0006f4:	2b08      	cmp	r3, #8
1a0006f6:	d9e9      	bls.n	1a0006cc <Board_GPIO_Init+0x8>
    }
}
1a0006f8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0006fc:	4770      	bx	lr
1a0006fe:	4770      	bx	lr
1a000700:	1a001658 	.word	0x1a001658
1a000704:	400f4000 	.word	0x400f4000

1a000708 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000708:	b510      	push	{r4, lr}
1a00070a:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a00070c:	4c08      	ldr	r4, [pc, #32]	; (1a000730 <Board_ADC_Init+0x28>)
1a00070e:	4669      	mov	r1, sp
1a000710:	4620      	mov	r0, r4
1a000712:	f000 f8e1 	bl	1a0008d8 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000716:	4a07      	ldr	r2, [pc, #28]	; (1a000734 <Board_ADC_Init+0x2c>)
1a000718:	4669      	mov	r1, sp
1a00071a:	4620      	mov	r0, r4
1a00071c:	f000 f8fc 	bl	1a000918 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000720:	2200      	movs	r2, #0
1a000722:	4669      	mov	r1, sp
1a000724:	4620      	mov	r0, r4
1a000726:	f000 f910 	bl	1a00094a <Chip_ADC_SetResolution>
}
1a00072a:	b002      	add	sp, #8
1a00072c:	bd10      	pop	{r4, pc}
1a00072e:	bf00      	nop
1a000730:	400e3000 	.word	0x400e3000
1a000734:	00061a80 	.word	0x00061a80

1a000738 <Board_SPI_Init>:
{
1a000738:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a00073a:	4c0b      	ldr	r4, [pc, #44]	; (1a000768 <Board_SPI_Init+0x30>)
1a00073c:	4620      	mov	r0, r4
1a00073e:	f000 fc69 	bl	1a001014 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000742:	6863      	ldr	r3, [r4, #4]
1a000744:	f023 0304 	bic.w	r3, r3, #4
1a000748:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00074a:	6823      	ldr	r3, [r4, #0]
1a00074c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000750:	f043 0307 	orr.w	r3, r3, #7
1a000754:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000756:	4905      	ldr	r1, [pc, #20]	; (1a00076c <Board_SPI_Init+0x34>)
1a000758:	4620      	mov	r0, r4
1a00075a:	f000 fc3a 	bl	1a000fd2 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00075e:	6863      	ldr	r3, [r4, #4]
1a000760:	f043 0302 	orr.w	r3, r3, #2
1a000764:	6063      	str	r3, [r4, #4]
}
1a000766:	bd10      	pop	{r4, pc}
1a000768:	400c5000 	.word	0x400c5000
1a00076c:	000186a0 	.word	0x000186a0

1a000770 <Board_I2C_Init>:
{
1a000770:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a000772:	2000      	movs	r0, #0
1a000774:	f000 fbdc 	bl	1a000f30 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000778:	4b04      	ldr	r3, [pc, #16]	; (1a00078c <Board_I2C_Init+0x1c>)
1a00077a:	f640 0208 	movw	r2, #2056	; 0x808
1a00077e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000782:	4903      	ldr	r1, [pc, #12]	; (1a000790 <Board_I2C_Init+0x20>)
1a000784:	2000      	movs	r0, #0
1a000786:	f000 fbe7 	bl	1a000f58 <Chip_I2C_SetClockRate>
}
1a00078a:	bd08      	pop	{r3, pc}
1a00078c:	40086000 	.word	0x40086000
1a000790:	000f4240 	.word	0x000f4240

1a000794 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000794:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a000796:	4c07      	ldr	r4, [pc, #28]	; (1a0007b4 <Board_Debug_Init+0x20>)
1a000798:	4620      	mov	r0, r4
1a00079a:	f000 fd19 	bl	1a0011d0 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00079e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0007a2:	4620      	mov	r0, r4
1a0007a4:	f000 fd3e 	bl	1a001224 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0007a8:	2303      	movs	r3, #3
1a0007aa:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0007ac:	2301      	movs	r3, #1
1a0007ae:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a0007b0:	bd10      	pop	{r4, pc}
1a0007b2:	bf00      	nop
1a0007b4:	400c1000 	.word	0x400c1000

1a0007b8 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0007b8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0007ba:	f7ff ffeb 	bl	1a000794 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0007be:	4808      	ldr	r0, [pc, #32]	; (1a0007e0 <Board_Init+0x28>)
1a0007c0:	f000 fba4 	bl	1a000f0c <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a0007c4:	f7ff ff7e 	bl	1a0006c4 <Board_GPIO_Init>
   Board_ADC_Init();
1a0007c8:	f7ff ff9e 	bl	1a000708 <Board_ADC_Init>
   Board_SPI_Init();
1a0007cc:	f7ff ffb4 	bl	1a000738 <Board_SPI_Init>
   Board_I2C_Init();
1a0007d0:	f7ff ffce 	bl	1a000770 <Board_I2C_Init>

   Board_LED_Init();
1a0007d4:	f7ff ff30 	bl	1a000638 <Board_LED_Init>
   Board_TEC_Init();
1a0007d8:	f7ff ff52 	bl	1a000680 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a0007dc:	bd08      	pop	{r3, pc}
1a0007de:	bf00      	nop
1a0007e0:	400f4000 	.word	0x400f4000

1a0007e4 <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a0007e4:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0007e6:	f7ff ffd5 	bl	1a000794 <Board_Debug_Init>
1a0007ea:	bd08      	pop	{r3, pc}

1a0007ec <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0007ec:	2300      	movs	r3, #0
1a0007ee:	e00c      	b.n	1a00080a <Board_SetupMuxing+0x1e>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0007f0:	4a07      	ldr	r2, [pc, #28]	; (1a000810 <Board_SetupMuxing+0x24>)
1a0007f2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0007f6:	f812 c023 	ldrb.w	ip, [r2, r3, lsl #2]
1a0007fa:	784a      	ldrb	r2, [r1, #1]
1a0007fc:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0007fe:	eb02 124c 	add.w	r2, r2, ip, lsl #5
1a000802:	4904      	ldr	r1, [pc, #16]	; (1a000814 <Board_SetupMuxing+0x28>)
1a000804:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000808:	3301      	adds	r3, #1
1a00080a:	2b1c      	cmp	r3, #28
1a00080c:	d9f0      	bls.n	1a0007f0 <Board_SetupMuxing+0x4>


void Board_SetupMuxing(void)
{
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00080e:	4770      	bx	lr
1a000810:	1a001674 	.word	0x1a001674
1a000814:	40086000 	.word	0x40086000

1a000818 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000818:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00081a:	4a17      	ldr	r2, [pc, #92]	; (1a000878 <Board_SetupClocking+0x60>)
1a00081c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000820:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000824:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000828:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00082c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000830:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000834:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000838:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00083c:	2201      	movs	r2, #1
1a00083e:	490f      	ldr	r1, [pc, #60]	; (1a00087c <Board_SetupClocking+0x64>)
1a000840:	2006      	movs	r0, #6
1a000842:	f000 fc03 	bl	1a00104c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000846:	2400      	movs	r4, #0
1a000848:	b14c      	cbz	r4, 1a00085e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00084a:	4b0b      	ldr	r3, [pc, #44]	; (1a000878 <Board_SetupClocking+0x60>)
1a00084c:	685a      	ldr	r2, [r3, #4]
1a00084e:	f022 020c 	bic.w	r2, r2, #12
1a000852:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000854:	685a      	ldr	r2, [r3, #4]
1a000856:	f042 0203 	orr.w	r2, r2, #3
1a00085a:	605a      	str	r2, [r3, #4]
}
1a00085c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00085e:	4808      	ldr	r0, [pc, #32]	; (1a000880 <Board_SetupClocking+0x68>)
1a000860:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000864:	2301      	movs	r3, #1
1a000866:	788a      	ldrb	r2, [r1, #2]
1a000868:	7849      	ldrb	r1, [r1, #1]
1a00086a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00086e:	f000 faa7 	bl	1a000dc0 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000872:	3401      	adds	r4, #1
1a000874:	e7e8      	b.n	1a000848 <Board_SetupClocking+0x30>
1a000876:	bf00      	nop
1a000878:	40043000 	.word	0x40043000
1a00087c:	0c28cb00 	.word	0x0c28cb00
1a000880:	1a001670 	.word	0x1a001670

1a000884 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000884:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000886:	f7ff ffb1 	bl	1a0007ec <Board_SetupMuxing>
    Board_SetupClocking();
1a00088a:	f7ff ffc5 	bl	1a000818 <Board_SetupClocking>
}
1a00088e:	bd08      	pop	{r3, pc}

1a000890 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000890:	4b03      	ldr	r3, [pc, #12]	; (1a0008a0 <Chip_ADC_GetClockIndex+0x10>)
1a000892:	4298      	cmp	r0, r3
1a000894:	d001      	beq.n	1a00089a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000896:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000898:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00089a:	2004      	movs	r0, #4
1a00089c:	4770      	bx	lr
1a00089e:	bf00      	nop
1a0008a0:	400e4000 	.word	0x400e4000

1a0008a4 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0008a4:	b570      	push	{r4, r5, r6, lr}
1a0008a6:	460d      	mov	r5, r1
1a0008a8:	4614      	mov	r4, r2
1a0008aa:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0008ac:	f7ff fff0 	bl	1a000890 <Chip_ADC_GetClockIndex>
1a0008b0:	f000 fb06 	bl	1a000ec0 <Chip_Clock_GetRate>
	if (burstMode) {
1a0008b4:	b155      	cbz	r5, 1a0008cc <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0008b6:	fb06 f404 	mul.w	r4, r6, r4
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0008ba:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0008be:	0064      	lsls	r4, r4, #1
1a0008c0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0008c4:	b2c0      	uxtb	r0, r0
1a0008c6:	3801      	subs	r0, #1
	return div;
}
1a0008c8:	b2c0      	uxtb	r0, r0
1a0008ca:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0008cc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0008d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0008d4:	e7f1      	b.n	1a0008ba <getClkDiv+0x16>
	...

1a0008d8 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0008d8:	b538      	push	{r3, r4, r5, lr}
1a0008da:	4605      	mov	r5, r0
1a0008dc:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0008de:	f7ff ffd7 	bl	1a000890 <Chip_ADC_GetClockIndex>
1a0008e2:	2301      	movs	r3, #1
1a0008e4:	461a      	mov	r2, r3
1a0008e6:	4619      	mov	r1, r3
1a0008e8:	f000 fab2 	bl	1a000e50 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0008ec:	2100      	movs	r1, #0
1a0008ee:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0008f0:	4a08      	ldr	r2, [pc, #32]	; (1a000914 <Chip_ADC_Init+0x3c>)
1a0008f2:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0008f4:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0008f6:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0008f8:	230b      	movs	r3, #11
1a0008fa:	4628      	mov	r0, r5
1a0008fc:	f7ff ffd2 	bl	1a0008a4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000900:	0200      	lsls	r0, r0, #8
1a000902:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000906:	7923      	ldrb	r3, [r4, #4]
1a000908:	045b      	lsls	r3, r3, #17
1a00090a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a00090e:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000910:	602b      	str	r3, [r5, #0]
}
1a000912:	bd38      	pop	{r3, r4, r5, pc}
1a000914:	00061a80 	.word	0x00061a80

1a000918 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000918:	b570      	push	{r4, r5, r6, lr}
1a00091a:	4605      	mov	r5, r0
1a00091c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00091e:	6804      	ldr	r4, [r0, #0]
1a000920:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000924:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000928:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00092a:	790b      	ldrb	r3, [r1, #4]
1a00092c:	f1c3 030b 	rsb	r3, r3, #11
1a000930:	b2db      	uxtb	r3, r3
1a000932:	7949      	ldrb	r1, [r1, #5]
1a000934:	f7ff ffb6 	bl	1a0008a4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000938:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00093c:	7933      	ldrb	r3, [r6, #4]
1a00093e:	045b      	lsls	r3, r3, #17
1a000940:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000944:	4323      	orrs	r3, r4
	pADC->CR = cr;
1a000946:	602b      	str	r3, [r5, #0]
}
1a000948:	bd70      	pop	{r4, r5, r6, pc}

1a00094a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00094a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00094c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00094e:	680a      	ldr	r2, [r1, #0]
1a000950:	f7ff ffe2 	bl	1a000918 <Chip_ADC_SetSampleRate>
}
1a000954:	bd08      	pop	{r3, pc}
	...

1a000958 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000958:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00095a:	2069      	movs	r0, #105	; 0x69
1a00095c:	f000 fab0 	bl	1a000ec0 <Chip_Clock_GetRate>
1a000960:	4b01      	ldr	r3, [pc, #4]	; (1a000968 <SystemCoreClockUpdate+0x10>)
1a000962:	6018      	str	r0, [r3, #0]
}
1a000964:	bd08      	pop	{r3, pc}
1a000966:	bf00      	nop
1a000968:	10000040 	.word	0x10000040

1a00096c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00096c:	b570      	push	{r4, r5, r6, lr}
1a00096e:	4686      	mov	lr, r0

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000970:	680b      	ldr	r3, [r1, #0]
1a000972:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000976:	d002      	beq.n	1a00097e <pll_calc_divs+0x12>
		ppll->ctrl &= ~(1 << 6);
1a000978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00097c:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a00097e:	4675      	mov	r5, lr
1a000980:	2401      	movs	r4, #1
1a000982:	e03c      	b.n	1a0009fe <pll_calc_divs+0x92>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000984:	694b      	ldr	r3, [r1, #20]
1a000986:	fb02 f303 	mul.w	r3, r2, r3
1a00098a:	fbb3 f3f4 	udiv	r3, r3, r4
1a00098e:	e01e      	b.n	1a0009ce <pll_calc_divs+0x62>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000990:	4618      	mov	r0, r3
	if (val < 0)
1a000992:	ebbe 0600 	subs.w	r6, lr, r0
1a000996:	d428      	bmi.n	1a0009ea <pll_calc_divs+0x7e>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000998:	42b5      	cmp	r5, r6
1a00099a:	d907      	bls.n	1a0009ac <pll_calc_divs+0x40>
					ppll->nsel = n;
1a00099c:	608c      	str	r4, [r1, #8]
					ppll->psel = p + 1;
1a00099e:	f10c 0501 	add.w	r5, ip, #1
1a0009a2:	60cd      	str	r5, [r1, #12]
					ppll->msel = m;
1a0009a4:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0009a6:	6188      	str	r0, [r1, #24]
					ppll->fcco = fcco;
1a0009a8:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0009aa:	4635      	mov	r5, r6
			for (m = 1; m <= 256; m++) {
1a0009ac:	3201      	adds	r2, #1
1a0009ae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0009b2:	dc1c      	bgt.n	1a0009ee <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a0009b4:	680e      	ldr	r6, [r1, #0]
1a0009b6:	f016 0f40 	tst.w	r6, #64	; 0x40
1a0009ba:	d0e3      	beq.n	1a000984 <pll_calc_divs+0x18>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0009bc:	f10c 0301 	add.w	r3, ip, #1
1a0009c0:	fa02 f303 	lsl.w	r3, r2, r3
1a0009c4:	6948      	ldr	r0, [r1, #20]
1a0009c6:	fb00 f303 	mul.w	r3, r0, r3
1a0009ca:	fbb3 f3f4 	udiv	r3, r3, r4
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0009ce:	480f      	ldr	r0, [pc, #60]	; (1a000a0c <pll_calc_divs+0xa0>)
1a0009d0:	4283      	cmp	r3, r0
1a0009d2:	d9eb      	bls.n	1a0009ac <pll_calc_divs+0x40>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0009d4:	480e      	ldr	r0, [pc, #56]	; (1a000a10 <pll_calc_divs+0xa4>)
1a0009d6:	4283      	cmp	r3, r0
1a0009d8:	d809      	bhi.n	1a0009ee <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a0009da:	f016 0f80 	tst.w	r6, #128	; 0x80
1a0009de:	d1d7      	bne.n	1a000990 <pll_calc_divs+0x24>
					fout = fcco >> (p + 1);
1a0009e0:	f10c 0001 	add.w	r0, ip, #1
1a0009e4:	fa23 f000 	lsr.w	r0, r3, r0
1a0009e8:	e7d3      	b.n	1a000992 <pll_calc_divs+0x26>
		return -val;
1a0009ea:	4276      	negs	r6, r6
1a0009ec:	e7d4      	b.n	1a000998 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a0009ee:	f10c 0c01 	add.w	ip, ip, #1
1a0009f2:	f1bc 0f03 	cmp.w	ip, #3
1a0009f6:	dc01      	bgt.n	1a0009fc <pll_calc_divs+0x90>
			for (m = 1; m <= 256; m++) {
1a0009f8:	2201      	movs	r2, #1
1a0009fa:	e7d8      	b.n	1a0009ae <pll_calc_divs+0x42>
	for (n = 1; n <= 4; n++) {
1a0009fc:	3401      	adds	r4, #1
1a0009fe:	2c04      	cmp	r4, #4
1a000a00:	dc02      	bgt.n	1a000a08 <pll_calc_divs+0x9c>
		for (p = 0; p < 4; p ++) {
1a000a02:	f04f 0c00 	mov.w	ip, #0
1a000a06:	e7f4      	b.n	1a0009f2 <pll_calc_divs+0x86>
				}
			}
		}
	}
}
1a000a08:	bd70      	pop	{r4, r5, r6, pc}
1a000a0a:	bf00      	nop
1a000a0c:	094c5eff 	.word	0x094c5eff
1a000a10:	1312d000 	.word	0x1312d000

1a000a14 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000a14:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000a16:	b09d      	sub	sp, #116	; 0x74
1a000a18:	4605      	mov	r5, r0
1a000a1a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000a1c:	2260      	movs	r2, #96	; 0x60
1a000a1e:	2100      	movs	r1, #0
1a000a20:	a801      	add	r0, sp, #4
1a000a22:	f000 fe05 	bl	1a001630 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000a26:	2380      	movs	r3, #128	; 0x80
1a000a28:	9301      	str	r3, [sp, #4]
	pll[0].fin = ppll->fin;
1a000a2a:	6963      	ldr	r3, [r4, #20]
1a000a2c:	9306      	str	r3, [sp, #24]
	pll[0].srcin = ppll->srcin;
1a000a2e:	7923      	ldrb	r3, [r4, #4]
1a000a30:	f88d 3008 	strb.w	r3, [sp, #8]
	pll_calc_divs(freq, &pll[0]);
1a000a34:	a901      	add	r1, sp, #4
1a000a36:	4628      	mov	r0, r5
1a000a38:	f7ff ff98 	bl	1a00096c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000a3c:	9b07      	ldr	r3, [sp, #28]
1a000a3e:	42ab      	cmp	r3, r5
1a000a40:	d02a      	beq.n	1a000a98 <pll_get_frac+0x84>
	if (val < 0)
1a000a42:	1aeb      	subs	r3, r5, r3
1a000a44:	d431      	bmi.n	1a000aaa <pll_get_frac+0x96>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000a46:	461e      	mov	r6, r3
1a000a48:	9319      	str	r3, [sp, #100]	; 0x64

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000a4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000a50:	9311      	str	r3, [sp, #68]	; 0x44
	pll[2].fin = ppll->fin;
1a000a52:	6963      	ldr	r3, [r4, #20]
1a000a54:	9316      	str	r3, [sp, #88]	; 0x58
	pll[2].srcin = ppll->srcin;
1a000a56:	7923      	ldrb	r3, [r4, #4]
1a000a58:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	pll_calc_divs(freq, &pll[2]);
1a000a5c:	a911      	add	r1, sp, #68	; 0x44
1a000a5e:	4628      	mov	r0, r5
1a000a60:	f7ff ff84 	bl	1a00096c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000a64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a000a66:	42ab      	cmp	r3, r5
1a000a68:	d021      	beq.n	1a000aae <pll_get_frac+0x9a>
	if (val < 0)
1a000a6a:	1aeb      	subs	r3, r5, r3
1a000a6c:	d427      	bmi.n	1a000abe <pll_get_frac+0xaa>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000a6e:	461f      	mov	r7, r3
1a000a70:	931b      	str	r3, [sp, #108]	; 0x6c
	
	if (freq <= 110000000) {
1a000a72:	4b2b      	ldr	r3, [pc, #172]	; (1a000b20 <pll_get_frac+0x10c>)
1a000a74:	429d      	cmp	r5, r3
1a000a76:	d924      	bls.n	1a000ac2 <pll_get_frac+0xae>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000a78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	if (val < 0)
1a000a7a:	1aed      	subs	r5, r5, r3
1a000a7c:	d434      	bmi.n	1a000ae8 <pll_get_frac+0xd4>
	diff[1] = ABS(freq - pll[1].fout);
1a000a7e:	951a      	str	r5, [sp, #104]	; 0x68

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000a80:	42ae      	cmp	r6, r5
1a000a82:	dc3b      	bgt.n	1a000afc <pll_get_frac+0xe8>
		if (diff[0] <= diff[2]) {
1a000a84:	42be      	cmp	r6, r7
1a000a86:	dc31      	bgt.n	1a000aec <pll_get_frac+0xd8>
			*ppll = pll[0];
1a000a88:	ad01      	add	r5, sp, #4
1a000a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000a96:	e006      	b.n	1a000aa6 <pll_get_frac+0x92>
		*ppll = pll[0];
1a000a98:	ad01      	add	r5, sp, #4
1a000a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a9e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000aa6:	b01d      	add	sp, #116	; 0x74
1a000aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000aaa:	425b      	negs	r3, r3
1a000aac:	e7cb      	b.n	1a000a46 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000aae:	ad11      	add	r5, sp, #68	; 0x44
1a000ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ab4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ab8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000abc:	e7f3      	b.n	1a000aa6 <pll_get_frac+0x92>
		return -val;
1a000abe:	425b      	negs	r3, r3
1a000ac0:	e7d5      	b.n	1a000a6e <pll_get_frac+0x5a>
		pll[1].ctrl = (1 << 6);
1a000ac2:	2340      	movs	r3, #64	; 0x40
1a000ac4:	9309      	str	r3, [sp, #36]	; 0x24
		pll[1].fin = ppll->fin;
1a000ac6:	6963      	ldr	r3, [r4, #20]
1a000ac8:	930e      	str	r3, [sp, #56]	; 0x38
		pll_calc_divs(freq, &pll[1]);
1a000aca:	a909      	add	r1, sp, #36	; 0x24
1a000acc:	4628      	mov	r0, r5
1a000ace:	f7ff ff4d 	bl	1a00096c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a000ad4:	42ab      	cmp	r3, r5
1a000ad6:	d1cf      	bne.n	1a000a78 <pll_get_frac+0x64>
			*ppll = pll[1];
1a000ad8:	ad09      	add	r5, sp, #36	; 0x24
1a000ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ade:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ae2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000ae6:	e7de      	b.n	1a000aa6 <pll_get_frac+0x92>
		return -val;
1a000ae8:	426d      	negs	r5, r5
1a000aea:	e7c8      	b.n	1a000a7e <pll_get_frac+0x6a>
			*ppll = pll[2];
1a000aec:	ad11      	add	r5, sp, #68	; 0x44
1a000aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000af2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000af6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000afa:	e7d4      	b.n	1a000aa6 <pll_get_frac+0x92>
		if (diff[1] <= diff[2]) {
1a000afc:	42af      	cmp	r7, r5
1a000afe:	db07      	blt.n	1a000b10 <pll_get_frac+0xfc>
			*ppll = pll[1];
1a000b00:	ad09      	add	r5, sp, #36	; 0x24
1a000b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b0e:	e7ca      	b.n	1a000aa6 <pll_get_frac+0x92>
			*ppll = pll[2];
1a000b10:	ad11      	add	r5, sp, #68	; 0x44
1a000b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b1e:	e7c2      	b.n	1a000aa6 <pll_get_frac+0x92>
1a000b20:	068e7780 	.word	0x068e7780

1a000b24 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000b24:	4684      	mov	ip, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000b26:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000b28:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000b2a:	281c      	cmp	r0, #28
1a000b2c:	d120      	bne.n	1a000b70 <Chip_Clock_FindBaseClock+0x4c>
{
1a000b2e:	b410      	push	{r4}
1a000b30:	e002      	b.n	1a000b38 <Chip_Clock_FindBaseClock+0x14>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000b32:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000b34:	281c      	cmp	r0, #28
1a000b36:	d118      	bne.n	1a000b6a <Chip_Clock_FindBaseClock+0x46>
1a000b38:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000b3c:	4a0d      	ldr	r2, [pc, #52]	; (1a000b74 <Chip_Clock_FindBaseClock+0x50>)
1a000b3e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
1a000b42:	7911      	ldrb	r1, [r2, #4]
1a000b44:	4281      	cmp	r1, r0
1a000b46:	d010      	beq.n	1a000b6a <Chip_Clock_FindBaseClock+0x46>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000b48:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000b4c:	4c09      	ldr	r4, [pc, #36]	; (1a000b74 <Chip_Clock_FindBaseClock+0x50>)
1a000b4e:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
1a000b52:	4562      	cmp	r2, ip
1a000b54:	d8ed      	bhi.n	1a000b32 <Chip_Clock_FindBaseClock+0xe>
1a000b56:	eb03 0443 	add.w	r4, r3, r3, lsl #1
1a000b5a:	4a06      	ldr	r2, [pc, #24]	; (1a000b74 <Chip_Clock_FindBaseClock+0x50>)
1a000b5c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
1a000b60:	8852      	ldrh	r2, [r2, #2]
1a000b62:	4562      	cmp	r2, ip
1a000b64:	d3e5      	bcc.n	1a000b32 <Chip_Clock_FindBaseClock+0xe>
			baseclk = periph_to_base[i].clkbase;
1a000b66:	4608      	mov	r0, r1
1a000b68:	e7e4      	b.n	1a000b34 <Chip_Clock_FindBaseClock+0x10>
		}
	}

	return baseclk;
}
1a000b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000b6e:	4770      	bx	lr
1a000b70:	4770      	bx	lr
1a000b72:	bf00      	nop
1a000b74:	1a0016f0 	.word	0x1a0016f0

1a000b78 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000b78:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000b7e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000b80:	4a0d      	ldr	r2, [pc, #52]	; (1a000bb8 <Chip_Clock_EnableCrystal+0x40>)
1a000b82:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000b84:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000b88:	6992      	ldr	r2, [r2, #24]
1a000b8a:	428a      	cmp	r2, r1
1a000b8c:	d001      	beq.n	1a000b92 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000b8e:	4a0a      	ldr	r2, [pc, #40]	; (1a000bb8 <Chip_Clock_EnableCrystal+0x40>)
1a000b90:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000b92:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000b96:	4a09      	ldr	r2, [pc, #36]	; (1a000bbc <Chip_Clock_EnableCrystal+0x44>)
1a000b98:	6811      	ldr	r1, [r2, #0]
1a000b9a:	4a09      	ldr	r2, [pc, #36]	; (1a000bc0 <Chip_Clock_EnableCrystal+0x48>)
1a000b9c:	4291      	cmp	r1, r2
1a000b9e:	d901      	bls.n	1a000ba4 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000ba0:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000ba4:	4a04      	ldr	r2, [pc, #16]	; (1a000bb8 <Chip_Clock_EnableCrystal+0x40>)
1a000ba6:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000ba8:	9b01      	ldr	r3, [sp, #4]
1a000baa:	1e5a      	subs	r2, r3, #1
1a000bac:	9201      	str	r2, [sp, #4]
1a000bae:	2b00      	cmp	r3, #0
1a000bb0:	d1fa      	bne.n	1a000ba8 <Chip_Clock_EnableCrystal+0x30>
}
1a000bb2:	b002      	add	sp, #8
1a000bb4:	4770      	bx	lr
1a000bb6:	bf00      	nop
1a000bb8:	40050000 	.word	0x40050000
1a000bbc:	1a00166c 	.word	0x1a00166c
1a000bc0:	01312cff 	.word	0x01312cff

1a000bc4 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000bc4:	3012      	adds	r0, #18
1a000bc6:	4b05      	ldr	r3, [pc, #20]	; (1a000bdc <Chip_Clock_GetDividerSource+0x18>)
1a000bc8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000bcc:	f010 0f01 	tst.w	r0, #1
1a000bd0:	d102      	bne.n	1a000bd8 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000bd2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000bd6:	4770      	bx	lr
		return CLKINPUT_PD;
1a000bd8:	2011      	movs	r0, #17
}
1a000bda:	4770      	bx	lr
1a000bdc:	40050000 	.word	0x40050000

1a000be0 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000be0:	f100 0212 	add.w	r2, r0, #18
1a000be4:	4b03      	ldr	r3, [pc, #12]	; (1a000bf4 <Chip_Clock_GetDividerDivisor+0x14>)
1a000be6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000bea:	4b03      	ldr	r3, [pc, #12]	; (1a000bf8 <Chip_Clock_GetDividerDivisor+0x18>)
1a000bec:	5c18      	ldrb	r0, [r3, r0]
}
1a000bee:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000bf2:	4770      	bx	lr
1a000bf4:	40050000 	.word	0x40050000
1a000bf8:	1a0016e8 	.word	0x1a0016e8

1a000bfc <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000bfc:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000bfe:	2810      	cmp	r0, #16
1a000c00:	d80a      	bhi.n	1a000c18 <Chip_Clock_GetClockInputHz+0x1c>
1a000c02:	e8df f000 	tbb	[pc, r0]
1a000c06:	0b44      	.short	0x0b44
1a000c08:	0921180d 	.word	0x0921180d
1a000c0c:	2d2a2724 	.word	0x2d2a2724
1a000c10:	34300909 	.word	0x34300909
1a000c14:	3c38      	.short	0x3c38
1a000c16:	40          	.byte	0x40
1a000c17:	00          	.byte	0x00
1a000c18:	2000      	movs	r0, #0
	default:
		break;
	}

	return rate;
}
1a000c1a:	bd08      	pop	{r3, pc}
		rate = CGU_IRC_FREQ;
1a000c1c:	481e      	ldr	r0, [pc, #120]	; (1a000c98 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000c1e:	e7fc      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000c20:	4b1e      	ldr	r3, [pc, #120]	; (1a000c9c <Chip_Clock_GetClockInputHz+0xa0>)
1a000c22:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000c26:	f003 0307 	and.w	r3, r3, #7
1a000c2a:	2b04      	cmp	r3, #4
1a000c2c:	d001      	beq.n	1a000c32 <Chip_Clock_GetClockInputHz+0x36>
			rate = 25000000;
1a000c2e:	481c      	ldr	r0, [pc, #112]	; (1a000ca0 <Chip_Clock_GetClockInputHz+0xa4>)
1a000c30:	e7f3      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
	uint32_t rate = 0;
1a000c32:	2000      	movs	r0, #0
1a000c34:	e7f1      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000c36:	4b19      	ldr	r3, [pc, #100]	; (1a000c9c <Chip_Clock_GetClockInputHz+0xa0>)
1a000c38:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000c3c:	f003 0307 	and.w	r3, r3, #7
1a000c40:	2b04      	cmp	r3, #4
1a000c42:	d027      	beq.n	1a000c94 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000c44:	4816      	ldr	r0, [pc, #88]	; (1a000ca0 <Chip_Clock_GetClockInputHz+0xa4>)
1a000c46:	e7e8      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
		rate = ExtRateIn;
1a000c48:	4b16      	ldr	r3, [pc, #88]	; (1a000ca4 <Chip_Clock_GetClockInputHz+0xa8>)
1a000c4a:	6818      	ldr	r0, [r3, #0]
		break;
1a000c4c:	e7e5      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
		rate = OscRateIn;
1a000c4e:	4b16      	ldr	r3, [pc, #88]	; (1a000ca8 <Chip_Clock_GetClockInputHz+0xac>)
1a000c50:	6818      	ldr	r0, [r3, #0]
		break;
1a000c52:	e7e2      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000c54:	4b15      	ldr	r3, [pc, #84]	; (1a000cac <Chip_Clock_GetClockInputHz+0xb0>)
1a000c56:	6818      	ldr	r0, [r3, #0]
		break;
1a000c58:	e7df      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000c5a:	4b14      	ldr	r3, [pc, #80]	; (1a000cac <Chip_Clock_GetClockInputHz+0xb0>)
1a000c5c:	6858      	ldr	r0, [r3, #4]
		break;
1a000c5e:	e7dc      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetMainPLLHz();
1a000c60:	f000 f868 	bl	1a000d34 <Chip_Clock_GetMainPLLHz>
		break;
1a000c64:	e7d9      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000c66:	2100      	movs	r1, #0
1a000c68:	f000 f898 	bl	1a000d9c <Chip_Clock_GetDivRate>
		break;
1a000c6c:	e7d5      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000c6e:	2101      	movs	r1, #1
1a000c70:	f000 f894 	bl	1a000d9c <Chip_Clock_GetDivRate>
		break;
1a000c74:	e7d1      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000c76:	2102      	movs	r1, #2
1a000c78:	f000 f890 	bl	1a000d9c <Chip_Clock_GetDivRate>
		break;
1a000c7c:	e7cd      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000c7e:	2103      	movs	r1, #3
1a000c80:	f000 f88c 	bl	1a000d9c <Chip_Clock_GetDivRate>
		break;
1a000c84:	e7c9      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000c86:	2104      	movs	r1, #4
1a000c88:	f000 f888 	bl	1a000d9c <Chip_Clock_GetDivRate>
		break;
1a000c8c:	e7c5      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
		rate = CRYSTAL_32K_FREQ_IN;
1a000c8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000c92:	e7c2      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
			rate = 50000000; /* RMII uses 50 MHz */
1a000c94:	4806      	ldr	r0, [pc, #24]	; (1a000cb0 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000c96:	e7c0      	b.n	1a000c1a <Chip_Clock_GetClockInputHz+0x1e>
1a000c98:	00b71b00 	.word	0x00b71b00
1a000c9c:	40043000 	.word	0x40043000
1a000ca0:	017d7840 	.word	0x017d7840
1a000ca4:	1a001640 	.word	0x1a001640
1a000ca8:	1a00166c 	.word	0x1a00166c
1a000cac:	10000044 	.word	0x10000044
1a000cb0:	02faf080 	.word	0x02faf080

1a000cb4 <Chip_Clock_CalcMainPLLValue>:
{
1a000cb4:	b538      	push	{r3, r4, r5, lr}
1a000cb6:	4605      	mov	r5, r0
1a000cb8:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000cba:	7908      	ldrb	r0, [r1, #4]
1a000cbc:	f7ff ff9e 	bl	1a000bfc <Chip_Clock_GetClockInputHz>
1a000cc0:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000cc2:	4b19      	ldr	r3, [pc, #100]	; (1a000d28 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000cc4:	442b      	add	r3, r5
1a000cc6:	4a19      	ldr	r2, [pc, #100]	; (1a000d2c <Chip_Clock_CalcMainPLLValue+0x78>)
1a000cc8:	4293      	cmp	r3, r2
1a000cca:	d821      	bhi.n	1a000d10 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000ccc:	b318      	cbz	r0, 1a000d16 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000cce:	2380      	movs	r3, #128	; 0x80
1a000cd0:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000cd2:	2300      	movs	r3, #0
1a000cd4:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000cd6:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000cd8:	fbb5 f3f0 	udiv	r3, r5, r0
1a000cdc:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000cde:	4a14      	ldr	r2, [pc, #80]	; (1a000d30 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000ce0:	4295      	cmp	r5, r2
1a000ce2:	d903      	bls.n	1a000cec <Chip_Clock_CalcMainPLLValue+0x38>
1a000ce4:	fb00 f303 	mul.w	r3, r0, r3
1a000ce8:	42ab      	cmp	r3, r5
1a000cea:	d007      	beq.n	1a000cfc <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000cec:	4621      	mov	r1, r4
1a000cee:	4628      	mov	r0, r5
1a000cf0:	f7ff fe90 	bl	1a000a14 <pll_get_frac>
		if (!ppll->nsel) {
1a000cf4:	68a3      	ldr	r3, [r4, #8]
1a000cf6:	b18b      	cbz	r3, 1a000d1c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000cf8:	3b01      	subs	r3, #1
1a000cfa:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000cfc:	6923      	ldr	r3, [r4, #16]
1a000cfe:	b183      	cbz	r3, 1a000d22 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000d00:	68e2      	ldr	r2, [r4, #12]
1a000d02:	b10a      	cbz	r2, 1a000d08 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000d04:	3a01      	subs	r2, #1
1a000d06:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000d08:	3b01      	subs	r3, #1
1a000d0a:	6123      	str	r3, [r4, #16]
	return 0;
1a000d0c:	2000      	movs	r0, #0
}
1a000d0e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d14:	e7fb      	b.n	1a000d0e <Chip_Clock_CalcMainPLLValue+0x5a>
1a000d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d1a:	e7f8      	b.n	1a000d0e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d20:	e7f5      	b.n	1a000d0e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d26:	e7f2      	b.n	1a000d0e <Chip_Clock_CalcMainPLLValue+0x5a>
1a000d28:	ff6b3a10 	.word	0xff6b3a10
1a000d2c:	0b940510 	.word	0x0b940510
1a000d30:	094c5eff 	.word	0x094c5eff

1a000d34 <Chip_Clock_GetMainPLLHz>:
{
1a000d34:	b530      	push	{r4, r5, lr}
1a000d36:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000d38:	4d16      	ldr	r5, [pc, #88]	; (1a000d94 <Chip_Clock_GetMainPLLHz+0x60>)
1a000d3a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000d3c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000d40:	f7ff ff5c 	bl	1a000bfc <Chip_Clock_GetClockInputHz>
1a000d44:	4684      	mov	ip, r0
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000d46:	4b14      	ldr	r3, [pc, #80]	; (1a000d98 <Chip_Clock_GetMainPLLHz+0x64>)
1a000d48:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000d4a:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a000d4c:	f010 0001 	ands.w	r0, r0, #1
1a000d50:	d01d      	beq.n	1a000d8e <Chip_Clock_GetMainPLLHz+0x5a>
	msel = (PLLReg >> 16) & 0xFF;
1a000d52:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000d56:	f3c4 3301 	ubfx	r3, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000d5a:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000d5e:	f3c4 1080 	ubfx	r0, r4, #6, #1
	m = msel + 1;
1a000d62:	3201      	adds	r2, #1
	n = nsel + 1;
1a000d64:	3301      	adds	r3, #1
	p = ptab[psel];
1a000d66:	3108      	adds	r1, #8
1a000d68:	4469      	add	r1, sp
1a000d6a:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000d6e:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000d72:	d108      	bne.n	1a000d86 <Chip_Clock_GetMainPLLHz+0x52>
1a000d74:	b938      	cbnz	r0, 1a000d86 <Chip_Clock_GetMainPLLHz+0x52>
	return (m / (2 * p)) * (freq / n);
1a000d76:	0049      	lsls	r1, r1, #1
1a000d78:	fbb2 f2f1 	udiv	r2, r2, r1
1a000d7c:	fbbc f0f3 	udiv	r0, ip, r3
1a000d80:	fb02 f000 	mul.w	r0, r2, r0
1a000d84:	e003      	b.n	1a000d8e <Chip_Clock_GetMainPLLHz+0x5a>
		return m * (freq / n);
1a000d86:	fbbc f3f3 	udiv	r3, ip, r3
1a000d8a:	fb02 f003 	mul.w	r0, r2, r3
}
1a000d8e:	b003      	add	sp, #12
1a000d90:	bd30      	pop	{r4, r5, pc}
1a000d92:	bf00      	nop
1a000d94:	40050000 	.word	0x40050000
1a000d98:	08040201 	.word	0x08040201

1a000d9c <Chip_Clock_GetDivRate>:
{
1a000d9c:	b538      	push	{r3, r4, r5, lr}
1a000d9e:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000da0:	4608      	mov	r0, r1
1a000da2:	f7ff ff0f 	bl	1a000bc4 <Chip_Clock_GetDividerSource>
1a000da6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000da8:	4620      	mov	r0, r4
1a000daa:	f7ff ff19 	bl	1a000be0 <Chip_Clock_GetDividerDivisor>
1a000dae:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000db0:	4628      	mov	r0, r5
1a000db2:	f7ff ff23 	bl	1a000bfc <Chip_Clock_GetClockInputHz>
1a000db6:	3401      	adds	r4, #1
}
1a000db8:	fbb0 f0f4 	udiv	r0, r0, r4
1a000dbc:	bd38      	pop	{r3, r4, r5, pc}
	...

1a000dc0 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000dc0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000dc2:	f100 0c16 	add.w	ip, r0, #22
1a000dc6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
1a000dca:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
1a000dce:	f50c 2ca0 	add.w	ip, ip, #327680	; 0x50000
1a000dd2:	f8dc 4004 	ldr.w	r4, [ip, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000dd6:	281b      	cmp	r0, #27
1a000dd8:	d813      	bhi.n	1a000e02 <Chip_Clock_SetBaseClock+0x42>
		if (Input != CLKINPUT_PD) {
1a000dda:	2911      	cmp	r1, #17
1a000ddc:	d01a      	beq.n	1a000e14 <Chip_Clock_SetBaseClock+0x54>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000dde:	4d0e      	ldr	r5, [pc, #56]	; (1a000e18 <Chip_Clock_SetBaseClock+0x58>)
1a000de0:	4025      	ands	r5, r4

			if (autoblocken) {
1a000de2:	b10a      	cbz	r2, 1a000de8 <Chip_Clock_SetBaseClock+0x28>
				reg |= (1 << 11);
1a000de4:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000de8:	b10b      	cbz	r3, 1a000dee <Chip_Clock_SetBaseClock+0x2e>
				reg |= (1 << 0);
1a000dea:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000dee:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000df2:	3016      	adds	r0, #22
1a000df4:	0080      	lsls	r0, r0, #2
1a000df6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000dfa:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000dfe:	6045      	str	r5, [r0, #4]
1a000e00:	e008      	b.n	1a000e14 <Chip_Clock_SetBaseClock+0x54>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000e02:	f044 0401 	orr.w	r4, r4, #1
1a000e06:	3016      	adds	r0, #22
1a000e08:	0080      	lsls	r0, r0, #2
1a000e0a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000e0e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000e12:	6044      	str	r4, [r0, #4]
	}
}
1a000e14:	bc30      	pop	{r4, r5}
1a000e16:	4770      	bx	lr
1a000e18:	e0fff7fe 	.word	0xe0fff7fe

1a000e1c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000e1c:	281b      	cmp	r0, #27
1a000e1e:	d80d      	bhi.n	1a000e3c <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000e20:	f100 0316 	add.w	r3, r0, #22
1a000e24:	009b      	lsls	r3, r3, #2
1a000e26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a000e2a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
1a000e2e:	6858      	ldr	r0, [r3, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000e30:	f010 0f01 	tst.w	r0, #1
1a000e34:	d104      	bne.n	1a000e40 <Chip_Clock_GetBaseClock+0x24>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000e36:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000e3a:	4770      	bx	lr
		return CLKINPUT_PD;
1a000e3c:	2011      	movs	r0, #17
1a000e3e:	4770      	bx	lr
		return CLKINPUT_PD;
1a000e40:	2011      	movs	r0, #17
}
1a000e42:	4770      	bx	lr

1a000e44 <Chip_Clock_GetBaseClocktHz>:
{
1a000e44:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000e46:	f7ff ffe9 	bl	1a000e1c <Chip_Clock_GetBaseClock>
1a000e4a:	f7ff fed7 	bl	1a000bfc <Chip_Clock_GetClockInputHz>
}
1a000e4e:	bd08      	pop	{r3, pc}

1a000e50 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000e50:	b971      	cbnz	r1, 1a000e70 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a000e52:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000e54:	b10a      	cbz	r2, 1a000e5a <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000e56:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000e5a:	2b02      	cmp	r3, #2
1a000e5c:	d00a      	beq.n	1a000e74 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000e5e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000e62:	d30a      	bcc.n	1a000e7a <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000e64:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000e68:	4b06      	ldr	r3, [pc, #24]	; (1a000e84 <Chip_Clock_EnableOpts+0x34>)
1a000e6a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000e6e:	4770      	bx	lr
		reg |= (1 << 1);
1a000e70:	2103      	movs	r1, #3
1a000e72:	e7ef      	b.n	1a000e54 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a000e74:	f041 0120 	orr.w	r1, r1, #32
1a000e78:	e7f1      	b.n	1a000e5e <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000e7a:	3020      	adds	r0, #32
1a000e7c:	4b02      	ldr	r3, [pc, #8]	; (1a000e88 <Chip_Clock_EnableOpts+0x38>)
1a000e7e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000e82:	4770      	bx	lr
1a000e84:	40052000 	.word	0x40052000
1a000e88:	40051000 	.word	0x40051000

1a000e8c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a000e8c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000e90:	d309      	bcc.n	1a000ea6 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a000e92:	4a09      	ldr	r2, [pc, #36]	; (1a000eb8 <Chip_Clock_Enable+0x2c>)
1a000e94:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000e98:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000e9c:	f043 0301 	orr.w	r3, r3, #1
1a000ea0:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000ea4:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a000ea6:	4a05      	ldr	r2, [pc, #20]	; (1a000ebc <Chip_Clock_Enable+0x30>)
1a000ea8:	3020      	adds	r0, #32
1a000eaa:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000eae:	f043 0301 	orr.w	r3, r3, #1
1a000eb2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a000eb6:	4770      	bx	lr
1a000eb8:	40052000 	.word	0x40052000
1a000ebc:	40051000 	.word	0x40051000

1a000ec0 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000ec0:	b510      	push	{r4, lr}
1a000ec2:	4603      	mov	r3, r0
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a000ec4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000ec8:	d308      	bcc.n	1a000edc <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000eca:	f5a0 7291 	sub.w	r2, r0, #290	; 0x122
1a000ece:	490d      	ldr	r1, [pc, #52]	; (1a000f04 <Chip_Clock_GetRate+0x44>)
1a000ed0:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a000ed4:	f014 0001 	ands.w	r0, r4, #1
1a000ed8:	d106      	bne.n	1a000ee8 <Chip_Clock_GetRate+0x28>
	else {
		rate = 0;
	}

	return rate;
}
1a000eda:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000edc:	f100 0220 	add.w	r2, r0, #32
1a000ee0:	4909      	ldr	r1, [pc, #36]	; (1a000f08 <Chip_Clock_GetRate+0x48>)
1a000ee2:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
1a000ee6:	e7f5      	b.n	1a000ed4 <Chip_Clock_GetRate+0x14>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a000ee8:	4618      	mov	r0, r3
1a000eea:	f7ff fe1b 	bl	1a000b24 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000eee:	f7ff ffa9 	bl	1a000e44 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a000ef2:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000ef6:	d103      	bne.n	1a000f00 <Chip_Clock_GetRate+0x40>
			div = 1;
1a000ef8:	2301      	movs	r3, #1
		rate = rate / div;
1a000efa:	fbb0 f0f3 	udiv	r0, r0, r3
	return rate;
1a000efe:	e7ec      	b.n	1a000eda <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a000f00:	2302      	movs	r3, #2
1a000f02:	e7fa      	b.n	1a000efa <Chip_Clock_GetRate+0x3a>
1a000f04:	40052000 	.word	0x40052000
1a000f08:	40051000 	.word	0x40051000

1a000f0c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000f0c:	4770      	bx	lr
	...

1a000f10 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000f10:	2901      	cmp	r1, #1
1a000f12:	d109      	bne.n	1a000f28 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000f14:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000f18:	4b04      	ldr	r3, [pc, #16]	; (1a000f2c <Chip_I2C_EventHandler+0x1c>)
1a000f1a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
1a000f1e:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000f20:	7d13      	ldrb	r3, [r2, #20]
1a000f22:	b2db      	uxtb	r3, r3
1a000f24:	2b04      	cmp	r3, #4
1a000f26:	d0fb      	beq.n	1a000f20 <Chip_I2C_EventHandler+0x10>
}
1a000f28:	4770      	bx	lr
1a000f2a:	bf00      	nop
1a000f2c:	10000000 	.word	0x10000000

1a000f30 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000f30:	b570      	push	{r4, r5, r6, lr}
1a000f32:	4604      	mov	r4, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000f34:	4e07      	ldr	r6, [pc, #28]	; (1a000f54 <Chip_I2C_Init+0x24>)
1a000f36:	00c5      	lsls	r5, r0, #3
1a000f38:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a000f3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a000f40:	8898      	ldrh	r0, [r3, #4]
1a000f42:	f7ff ffa3 	bl	1a000e8c <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000f46:	1b2d      	subs	r5, r5, r4
1a000f48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a000f4c:	226c      	movs	r2, #108	; 0x6c
1a000f4e:	619a      	str	r2, [r3, #24]
}
1a000f50:	bd70      	pop	{r4, r5, r6, pc}
1a000f52:	bf00      	nop
1a000f54:	10000000 	.word	0x10000000

1a000f58 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000f5c:	4604      	mov	r4, r0
1a000f5e:	4688      	mov	r8, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000f60:	4d0b      	ldr	r5, [pc, #44]	; (1a000f90 <Chip_I2C_SetClockRate+0x38>)
1a000f62:	00c6      	lsls	r6, r0, #3
1a000f64:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a000f68:	009f      	lsls	r7, r3, #2
1a000f6a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1a000f6e:	8898      	ldrh	r0, [r3, #4]
1a000f70:	f7ff ffa6 	bl	1a000ec0 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000f74:	fbb0 f1f8 	udiv	r1, r0, r8
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000f78:	59eb      	ldr	r3, [r5, r7]
1a000f7a:	084a      	lsrs	r2, r1, #1
1a000f7c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000f7e:	1b36      	subs	r6, r6, r4
1a000f80:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
1a000f84:	691a      	ldr	r2, [r3, #16]
1a000f86:	1a89      	subs	r1, r1, r2
1a000f88:	6159      	str	r1, [r3, #20]
}
1a000f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000f8e:	bf00      	nop
1a000f90:	10000000 	.word	0x10000000

1a000f94 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000f94:	4b03      	ldr	r3, [pc, #12]	; (1a000fa4 <Chip_SSP_GetClockIndex+0x10>)
1a000f96:	4298      	cmp	r0, r3
1a000f98:	d001      	beq.n	1a000f9e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a000f9a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000f9c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a000f9e:	20a5      	movs	r0, #165	; 0xa5
1a000fa0:	4770      	bx	lr
1a000fa2:	bf00      	nop
1a000fa4:	400c5000 	.word	0x400c5000

1a000fa8 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000fa8:	4b04      	ldr	r3, [pc, #16]	; (1a000fbc <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000faa:	4298      	cmp	r0, r3
1a000fac:	d002      	beq.n	1a000fb4 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000fae:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a000fb2:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a000fb4:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000fb8:	4770      	bx	lr
1a000fba:	bf00      	nop
1a000fbc:	400c5000 	.word	0x400c5000

1a000fc0 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000fc0:	6803      	ldr	r3, [r0, #0]
1a000fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a000fc6:	0209      	lsls	r1, r1, #8
1a000fc8:	b289      	uxth	r1, r1
1a000fca:	4319      	orrs	r1, r3
1a000fcc:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a000fce:	6102      	str	r2, [r0, #16]
}
1a000fd0:	4770      	bx	lr

1a000fd2 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a000fd2:	b538      	push	{r3, r4, r5, lr}
1a000fd4:	4605      	mov	r5, r0
1a000fd6:	460c      	mov	r4, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000fd8:	f7ff ffe6 	bl	1a000fa8 <Chip_SSP_GetPeriphClockIndex>
1a000fdc:	f7ff ff70 	bl	1a000ec0 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a000fe0:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a000fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a000fe6:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a000fe8:	e000      	b.n	1a000fec <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a000fea:	4661      	mov	r1, ip
	while (cmp_clk > bitRate) {
1a000fec:	42a3      	cmp	r3, r4
1a000fee:	d90d      	bls.n	1a00100c <Chip_SSP_SetBitRate+0x3a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a000ff0:	f101 0c01 	add.w	ip, r1, #1
1a000ff4:	fb01 2302 	mla	r3, r1, r2, r2
1a000ff8:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a000ffc:	429c      	cmp	r4, r3
1a000ffe:	d2f5      	bcs.n	1a000fec <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001000:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
1a001004:	d9f1      	bls.n	1a000fea <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a001006:	3202      	adds	r2, #2
				cr0_div = 0;
1a001008:	2100      	movs	r1, #0
1a00100a:	e7ef      	b.n	1a000fec <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00100c:	4628      	mov	r0, r5
1a00100e:	f7ff ffd7 	bl	1a000fc0 <Chip_SSP_SetClockRate>
}
1a001012:	bd38      	pop	{r3, r4, r5, pc}

1a001014 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001014:	b510      	push	{r4, lr}
1a001016:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001018:	f7ff ffbc 	bl	1a000f94 <Chip_SSP_GetClockIndex>
1a00101c:	f7ff ff36 	bl	1a000e8c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001020:	4620      	mov	r0, r4
1a001022:	f7ff ffc1 	bl	1a000fa8 <Chip_SSP_GetPeriphClockIndex>
1a001026:	f7ff ff31 	bl	1a000e8c <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00102a:	6863      	ldr	r3, [r4, #4]
1a00102c:	f023 0304 	bic.w	r3, r3, #4
1a001030:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001032:	6823      	ldr	r3, [r4, #0]
1a001034:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001038:	f043 0307 	orr.w	r3, r3, #7
1a00103c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00103e:	4902      	ldr	r1, [pc, #8]	; (1a001048 <Chip_SSP_Init+0x34>)
1a001040:	4620      	mov	r0, r4
1a001042:	f7ff ffc6 	bl	1a000fd2 <Chip_SSP_SetBitRate>
}
1a001046:	bd10      	pop	{r4, pc}
1a001048:	000186a0 	.word	0x000186a0

1a00104c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00104c:	b570      	push	{r4, r5, r6, lr}
1a00104e:	b08a      	sub	sp, #40	; 0x28
1a001050:	4605      	mov	r5, r0
1a001052:	460e      	mov	r6, r1
1a001054:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001056:	f242 7310 	movw	r3, #10000	; 0x2710
1a00105a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a00105c:	2806      	cmp	r0, #6
1a00105e:	d018      	beq.n	1a001092 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001060:	2300      	movs	r3, #0
1a001062:	2201      	movs	r2, #1
1a001064:	4629      	mov	r1, r5
1a001066:	2004      	movs	r0, #4
1a001068:	f7ff feaa 	bl	1a000dc0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a00106c:	4a4a      	ldr	r2, [pc, #296]	; (1a001198 <Chip_SetupCoreClock+0x14c>)
1a00106e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001070:	f043 0301 	orr.w	r3, r3, #1
1a001074:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001076:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00107a:	a901      	add	r1, sp, #4
1a00107c:	4630      	mov	r0, r6
1a00107e:	f7ff fe19 	bl	1a000cb4 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001082:	4b46      	ldr	r3, [pc, #280]	; (1a00119c <Chip_SetupCoreClock+0x150>)
1a001084:	429e      	cmp	r6, r3
1a001086:	d916      	bls.n	1a0010b6 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001088:	9b01      	ldr	r3, [sp, #4]
1a00108a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00108e:	d003      	beq.n	1a001098 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001090:	e7fe      	b.n	1a001090 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001092:	f7ff fd71 	bl	1a000b78 <Chip_Clock_EnableCrystal>
1a001096:	e7e3      	b.n	1a001060 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a001098:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00109c:	d005      	beq.n	1a0010aa <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00109e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0010a2:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0010a4:	2600      	movs	r6, #0
			direct = 1;
1a0010a6:	2501      	movs	r5, #1
1a0010a8:	e007      	b.n	1a0010ba <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0010aa:	9b04      	ldr	r3, [sp, #16]
1a0010ac:	3301      	adds	r3, #1
1a0010ae:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0010b0:	2601      	movs	r6, #1
	uint32_t direct = 0, pdivide = 0;
1a0010b2:	2500      	movs	r5, #0
1a0010b4:	e001      	b.n	1a0010ba <Chip_SetupCoreClock+0x6e>
1a0010b6:	2600      	movs	r6, #0
1a0010b8:	4635      	mov	r5, r6
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0010ba:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0010be:	9b01      	ldr	r3, [sp, #4]
1a0010c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0010c4:	9a05      	ldr	r2, [sp, #20]
1a0010c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0010ca:	9a03      	ldr	r2, [sp, #12]
1a0010cc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0010d0:	9a04      	ldr	r2, [sp, #16]
1a0010d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0010d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0010da:	4a2f      	ldr	r2, [pc, #188]	; (1a001198 <Chip_SetupCoreClock+0x14c>)
1a0010dc:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0010de:	4b2e      	ldr	r3, [pc, #184]	; (1a001198 <Chip_SetupCoreClock+0x14c>)
1a0010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0010e2:	f013 0f01 	tst.w	r3, #1
1a0010e6:	d0fa      	beq.n	1a0010de <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0010e8:	2300      	movs	r3, #0
1a0010ea:	2201      	movs	r2, #1
1a0010ec:	2109      	movs	r1, #9
1a0010ee:	2004      	movs	r0, #4
1a0010f0:	f7ff fe66 	bl	1a000dc0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0010f4:	b305      	cbz	r5, 1a001138 <Chip_SetupCoreClock+0xec>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0010f6:	f242 7310 	movw	r3, #10000	; 0x2710
1a0010fa:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0010fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0010fe:	1e5a      	subs	r2, r3, #1
1a001100:	9209      	str	r2, [sp, #36]	; 0x24
1a001102:	2b00      	cmp	r3, #0
1a001104:	d1fa      	bne.n	1a0010fc <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001106:	9b01      	ldr	r3, [sp, #4]
1a001108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00110c:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00110e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001112:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001116:	9a05      	ldr	r2, [sp, #20]
1a001118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00111c:	9a03      	ldr	r2, [sp, #12]
1a00111e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001122:	9a04      	ldr	r2, [sp, #16]
1a001124:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00112c:	4a1a      	ldr	r2, [pc, #104]	; (1a001198 <Chip_SetupCoreClock+0x14c>)
1a00112e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001130:	2c00      	cmp	r4, #0
1a001132:	d12e      	bne.n	1a001192 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001134:	b00a      	add	sp, #40	; 0x28
1a001136:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001138:	2e00      	cmp	r6, #0
1a00113a:	d0f9      	beq.n	1a001130 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00113c:	f242 7310 	movw	r3, #10000	; 0x2710
1a001140:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001142:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001144:	1e5a      	subs	r2, r3, #1
1a001146:	9209      	str	r2, [sp, #36]	; 0x24
1a001148:	2b00      	cmp	r3, #0
1a00114a:	d1fa      	bne.n	1a001142 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a00114c:	9a04      	ldr	r2, [sp, #16]
1a00114e:	3a01      	subs	r2, #1
1a001150:	9204      	str	r2, [sp, #16]
1a001152:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001156:	9b01      	ldr	r3, [sp, #4]
1a001158:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00115c:	9905      	ldr	r1, [sp, #20]
1a00115e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001162:	9903      	ldr	r1, [sp, #12]
1a001164:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001168:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00116c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001170:	4a09      	ldr	r2, [pc, #36]	; (1a001198 <Chip_SetupCoreClock+0x14c>)
1a001172:	6453      	str	r3, [r2, #68]	; 0x44
}
1a001174:	e7dc      	b.n	1a001130 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001176:	480a      	ldr	r0, [pc, #40]	; (1a0011a0 <Chip_SetupCoreClock+0x154>)
1a001178:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00117c:	78cb      	ldrb	r3, [r1, #3]
1a00117e:	788a      	ldrb	r2, [r1, #2]
1a001180:	7849      	ldrb	r1, [r1, #1]
1a001182:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001186:	f7ff fe1b 	bl	1a000dc0 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00118a:	3401      	adds	r4, #1
1a00118c:	2c11      	cmp	r4, #17
1a00118e:	d9f2      	bls.n	1a001176 <Chip_SetupCoreClock+0x12a>
1a001190:	e7d0      	b.n	1a001134 <Chip_SetupCoreClock+0xe8>
1a001192:	2400      	movs	r4, #0
1a001194:	e7fa      	b.n	1a00118c <Chip_SetupCoreClock+0x140>
1a001196:	bf00      	nop
1a001198:	40050000 	.word	0x40050000
1a00119c:	068e7780 	.word	0x068e7780
1a0011a0:	1a00175c 	.word	0x1a00175c

1a0011a4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0011a4:	4b09      	ldr	r3, [pc, #36]	; (1a0011cc <Chip_UART_GetIndex+0x28>)
1a0011a6:	4298      	cmp	r0, r3
1a0011a8:	d00b      	beq.n	1a0011c2 <Chip_UART_GetIndex+0x1e>
1a0011aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0011ae:	4298      	cmp	r0, r3
1a0011b0:	d009      	beq.n	1a0011c6 <Chip_UART_GetIndex+0x22>
1a0011b2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0011b6:	4298      	cmp	r0, r3
1a0011b8:	d001      	beq.n	1a0011be <Chip_UART_GetIndex+0x1a>
1a0011ba:	2000      	movs	r0, #0
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a0011bc:	4770      	bx	lr
			return 1;
1a0011be:	2001      	movs	r0, #1
1a0011c0:	4770      	bx	lr
			return 2;
1a0011c2:	2002      	movs	r0, #2
1a0011c4:	4770      	bx	lr
			return 3;
1a0011c6:	2003      	movs	r0, #3
1a0011c8:	4770      	bx	lr
1a0011ca:	bf00      	nop
1a0011cc:	400c1000 	.word	0x400c1000

1a0011d0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0011d0:	b530      	push	{r4, r5, lr}
1a0011d2:	b083      	sub	sp, #12
1a0011d4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0011d6:	f7ff ffe5 	bl	1a0011a4 <Chip_UART_GetIndex>
1a0011da:	2301      	movs	r3, #1
1a0011dc:	461a      	mov	r2, r3
1a0011de:	4619      	mov	r1, r3
1a0011e0:	4d0e      	ldr	r5, [pc, #56]	; (1a00121c <Chip_UART_Init+0x4c>)
1a0011e2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0011e6:	f7ff fe33 	bl	1a000e50 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0011ea:	2307      	movs	r3, #7
1a0011ec:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0011ee:	2300      	movs	r3, #0
1a0011f0:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0011f2:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0011f4:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0011f6:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0011f8:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0011fa:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0011fc:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0011fe:	4b08      	ldr	r3, [pc, #32]	; (1a001220 <Chip_UART_Init+0x50>)
1a001200:	429c      	cmp	r4, r3
1a001202:	d006      	beq.n	1a001212 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001204:	2303      	movs	r3, #3
1a001206:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001208:	2310      	movs	r3, #16
1a00120a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a00120c:	9b01      	ldr	r3, [sp, #4]
}
1a00120e:	b003      	add	sp, #12
1a001210:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a001212:	2300      	movs	r3, #0
1a001214:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a001216:	69a3      	ldr	r3, [r4, #24]
1a001218:	9301      	str	r3, [sp, #4]
1a00121a:	e7f3      	b.n	1a001204 <Chip_UART_Init+0x34>
1a00121c:	1a0017ac 	.word	0x1a0017ac
1a001220:	40082000 	.word	0x40082000

1a001224 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001228:	b083      	sub	sp, #12
1a00122a:	9001      	str	r0, [sp, #4]
1a00122c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00122e:	f7ff ffb9 	bl	1a0011a4 <Chip_UART_GetIndex>
1a001232:	4b32      	ldr	r3, [pc, #200]	; (1a0012fc <Chip_UART_SetBaudFDR+0xd8>)
1a001234:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001238:	f7ff fe42 	bl	1a000ec0 <Chip_Clock_GetRate>
1a00123c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00123e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001242:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001244:	f04f 0b00 	mov.w	fp, #0
1a001248:	46a2      	mov	sl, r4
1a00124a:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a00124c:	e02a      	b.n	1a0012a4 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00124e:	4242      	negs	r2, r0
				div ++;
1a001250:	1c4b      	adds	r3, r1, #1
1a001252:	e017      	b.n	1a001284 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001254:	b30a      	cbz	r2, 1a00129a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a001256:	4617      	mov	r7, r2
			sd = d;
1a001258:	46ab      	mov	fp, r5
			sm = m;
1a00125a:	46a2      	mov	sl, r4
			sdiv = div;
1a00125c:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00125e:	3501      	adds	r5, #1
1a001260:	42ac      	cmp	r4, r5
1a001262:	d91e      	bls.n	1a0012a2 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001264:	0931      	lsrs	r1, r6, #4
1a001266:	0730      	lsls	r0, r6, #28
1a001268:	fba4 0c00 	umull	r0, ip, r4, r0
1a00126c:	1962      	adds	r2, r4, r5
1a00126e:	fb08 f202 	mul.w	r2, r8, r2
1a001272:	2300      	movs	r3, #0
1a001274:	fb04 c101 	mla	r1, r4, r1, ip
1a001278:	f000 f85e 	bl	1a001338 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a00127c:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00127e:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a001280:	2800      	cmp	r0, #0
1a001282:	dbe4      	blt.n	1a00124e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001284:	4297      	cmp	r7, r2
1a001286:	d3ea      	bcc.n	1a00125e <Chip_UART_SetBaudFDR+0x3a>
1a001288:	2b00      	cmp	r3, #0
1a00128a:	d0e8      	beq.n	1a00125e <Chip_UART_SetBaudFDR+0x3a>
1a00128c:	0c19      	lsrs	r1, r3, #16
1a00128e:	d1e6      	bne.n	1a00125e <Chip_UART_SetBaudFDR+0x3a>
1a001290:	2b02      	cmp	r3, #2
1a001292:	d8df      	bhi.n	1a001254 <Chip_UART_SetBaudFDR+0x30>
1a001294:	2d00      	cmp	r5, #0
1a001296:	d0dd      	beq.n	1a001254 <Chip_UART_SetBaudFDR+0x30>
1a001298:	e7e1      	b.n	1a00125e <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00129a:	4617      	mov	r7, r2
			sd = d;
1a00129c:	46ab      	mov	fp, r5
			sm = m;
1a00129e:	46a2      	mov	sl, r4
			sdiv = div;
1a0012a0:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0012a2:	3401      	adds	r4, #1
1a0012a4:	b11f      	cbz	r7, 1a0012ae <Chip_UART_SetBaudFDR+0x8a>
1a0012a6:	2c0f      	cmp	r4, #15
1a0012a8:	d801      	bhi.n	1a0012ae <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0012aa:	2500      	movs	r5, #0
1a0012ac:	e7d8      	b.n	1a001260 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0012ae:	f1b9 0f00 	cmp.w	r9, #0
1a0012b2:	d01e      	beq.n	1a0012f2 <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0012b4:	9901      	ldr	r1, [sp, #4]
1a0012b6:	68cb      	ldr	r3, [r1, #12]
1a0012b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0012bc:	60cb      	str	r3, [r1, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0012be:	fa5f f389 	uxtb.w	r3, r9
1a0012c2:	600b      	str	r3, [r1, #0]
	pUART->DLM = (uint32_t) dlm;
1a0012c4:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0012c8:	604b      	str	r3, [r1, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0012ca:	68cb      	ldr	r3, [r1, #12]
1a0012cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0012d0:	60cb      	str	r3, [r1, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0012d2:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0012d6:	b2db      	uxtb	r3, r3
1a0012d8:	f00b 020f 	and.w	r2, fp, #15
1a0012dc:	4313      	orrs	r3, r2
1a0012de:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0012e0:	0933      	lsrs	r3, r6, #4
1a0012e2:	fb0a f303 	mul.w	r3, sl, r3
1a0012e6:	eb0a 020b 	add.w	r2, sl, fp
1a0012ea:	fb09 f202 	mul.w	r2, r9, r2
1a0012ee:	fbb3 f9f2 	udiv	r9, r3, r2
}
1a0012f2:	4648      	mov	r0, r9
1a0012f4:	b003      	add	sp, #12
1a0012f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0012fa:	bf00      	nop
1a0012fc:	1a0017a4 	.word	0x1a0017a4

1a001300 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001300:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001302:	4a0b      	ldr	r2, [pc, #44]	; (1a001330 <SystemInit+0x30>)
1a001304:	4b0b      	ldr	r3, [pc, #44]	; (1a001334 <SystemInit+0x34>)
1a001306:	609a      	str	r2, [r3, #8]
  mvfr0 = FPU->MVFR0;
1a001308:	f503 7300 	add.w	r3, r3, #512	; 0x200
1a00130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00130e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001312:	2b20      	cmp	r3, #32
1a001314:	d004      	beq.n	1a001320 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a001316:	f7ff fab5 	bl	1a000884 <Board_SystemInit>
   Board_Init();
1a00131a:	f7ff fa4d 	bl	1a0007b8 <Board_Init>
}
1a00131e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001320:	4a04      	ldr	r2, [pc, #16]	; (1a001334 <SystemInit+0x34>)
1a001322:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001326:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00132a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00132e:	e7f2      	b.n	1a001316 <SystemInit+0x16>
1a001330:	1a000000 	.word	0x1a000000
1a001334:	e000ed00 	.word	0xe000ed00

1a001338 <__aeabi_uldivmod>:
1a001338:	b953      	cbnz	r3, 1a001350 <__aeabi_uldivmod+0x18>
1a00133a:	b94a      	cbnz	r2, 1a001350 <__aeabi_uldivmod+0x18>
1a00133c:	2900      	cmp	r1, #0
1a00133e:	bf08      	it	eq
1a001340:	2800      	cmpeq	r0, #0
1a001342:	bf1c      	itt	ne
1a001344:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001348:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00134c:	f000 b94a 	b.w	1a0015e4 <__aeabi_idiv0>
1a001350:	f1ad 0c08 	sub.w	ip, sp, #8
1a001354:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001358:	f000 f806 	bl	1a001368 <__udivmoddi4>
1a00135c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001364:	b004      	add	sp, #16
1a001366:	4770      	bx	lr

1a001368 <__udivmoddi4>:
1a001368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00136c:	468c      	mov	ip, r1
1a00136e:	468e      	mov	lr, r1
1a001370:	9e08      	ldr	r6, [sp, #32]
1a001372:	4615      	mov	r5, r2
1a001374:	4604      	mov	r4, r0
1a001376:	4619      	mov	r1, r3
1a001378:	2b00      	cmp	r3, #0
1a00137a:	f040 80af 	bne.w	1a0014dc <__udivmoddi4+0x174>
1a00137e:	4572      	cmp	r2, lr
1a001380:	fab2 f782 	clz	r7, r2
1a001384:	d943      	bls.n	1a00140e <__udivmoddi4+0xa6>
1a001386:	b14f      	cbz	r7, 1a00139c <__udivmoddi4+0x34>
1a001388:	f1c7 0320 	rsb	r3, r7, #32
1a00138c:	fa0e fc07 	lsl.w	ip, lr, r7
1a001390:	fa20 f303 	lsr.w	r3, r0, r3
1a001394:	40bd      	lsls	r5, r7
1a001396:	ea43 0c0c 	orr.w	ip, r3, ip
1a00139a:	40bc      	lsls	r4, r7
1a00139c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0013a0:	b2a8      	uxth	r0, r5
1a0013a2:	fbbc f8fe 	udiv	r8, ip, lr
1a0013a6:	0c23      	lsrs	r3, r4, #16
1a0013a8:	fb0e cc18 	mls	ip, lr, r8, ip
1a0013ac:	fb08 f900 	mul.w	r9, r8, r0
1a0013b0:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a0013b4:	4599      	cmp	r9, r3
1a0013b6:	d928      	bls.n	1a00140a <__udivmoddi4+0xa2>
1a0013b8:	18eb      	adds	r3, r5, r3
1a0013ba:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
1a0013be:	d204      	bcs.n	1a0013ca <__udivmoddi4+0x62>
1a0013c0:	4599      	cmp	r9, r3
1a0013c2:	d902      	bls.n	1a0013ca <__udivmoddi4+0x62>
1a0013c4:	f1a8 0202 	sub.w	r2, r8, #2
1a0013c8:	442b      	add	r3, r5
1a0013ca:	eba3 0309 	sub.w	r3, r3, r9
1a0013ce:	fbb3 fcfe 	udiv	ip, r3, lr
1a0013d2:	b2a4      	uxth	r4, r4
1a0013d4:	fb0e 331c 	mls	r3, lr, ip, r3
1a0013d8:	fb0c f000 	mul.w	r0, ip, r0
1a0013dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0013e0:	42a0      	cmp	r0, r4
1a0013e2:	d979      	bls.n	1a0014d8 <__udivmoddi4+0x170>
1a0013e4:	192c      	adds	r4, r5, r4
1a0013e6:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
1a0013ea:	d204      	bcs.n	1a0013f6 <__udivmoddi4+0x8e>
1a0013ec:	42a0      	cmp	r0, r4
1a0013ee:	d902      	bls.n	1a0013f6 <__udivmoddi4+0x8e>
1a0013f0:	f1ac 0302 	sub.w	r3, ip, #2
1a0013f4:	442c      	add	r4, r5
1a0013f6:	1a24      	subs	r4, r4, r0
1a0013f8:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
1a0013fc:	b11e      	cbz	r6, 1a001406 <__udivmoddi4+0x9e>
1a0013fe:	40fc      	lsrs	r4, r7
1a001400:	2300      	movs	r3, #0
1a001402:	6034      	str	r4, [r6, #0]
1a001404:	6073      	str	r3, [r6, #4]
1a001406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00140a:	4642      	mov	r2, r8
1a00140c:	e7dd      	b.n	1a0013ca <__udivmoddi4+0x62>
1a00140e:	b902      	cbnz	r2, 1a001412 <__udivmoddi4+0xaa>
1a001410:	deff      	udf	#255	; 0xff
1a001412:	b9e7      	cbnz	r7, 1a00144e <__udivmoddi4+0xe6>
1a001414:	ebae 0302 	sub.w	r3, lr, r2
1a001418:	2101      	movs	r1, #1
1a00141a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00141e:	b2a8      	uxth	r0, r5
1a001420:	fbb3 fcfe 	udiv	ip, r3, lr
1a001424:	0c22      	lsrs	r2, r4, #16
1a001426:	fb0e 331c 	mls	r3, lr, ip, r3
1a00142a:	fb0c f800 	mul.w	r8, ip, r0
1a00142e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
1a001432:	4598      	cmp	r8, r3
1a001434:	d94e      	bls.n	1a0014d4 <__udivmoddi4+0x16c>
1a001436:	18eb      	adds	r3, r5, r3
1a001438:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
1a00143c:	d204      	bcs.n	1a001448 <__udivmoddi4+0xe0>
1a00143e:	4598      	cmp	r8, r3
1a001440:	d902      	bls.n	1a001448 <__udivmoddi4+0xe0>
1a001442:	f1ac 0202 	sub.w	r2, ip, #2
1a001446:	442b      	add	r3, r5
1a001448:	eba3 0308 	sub.w	r3, r3, r8
1a00144c:	e7bf      	b.n	1a0013ce <__udivmoddi4+0x66>
1a00144e:	f1c7 0120 	rsb	r1, r7, #32
1a001452:	fa2e f301 	lsr.w	r3, lr, r1
1a001456:	40bd      	lsls	r5, r7
1a001458:	fa0e fe07 	lsl.w	lr, lr, r7
1a00145c:	fa20 f101 	lsr.w	r1, r0, r1
1a001460:	ea41 010e 	orr.w	r1, r1, lr
1a001464:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001468:	b2aa      	uxth	r2, r5
1a00146a:	fbb3 fcfe 	udiv	ip, r3, lr
1a00146e:	fb0e 301c 	mls	r0, lr, ip, r3
1a001472:	0c0b      	lsrs	r3, r1, #16
1a001474:	fb0c f802 	mul.w	r8, ip, r2
1a001478:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a00147c:	4598      	cmp	r8, r3
1a00147e:	fa04 f407 	lsl.w	r4, r4, r7
1a001482:	d923      	bls.n	1a0014cc <__udivmoddi4+0x164>
1a001484:	18eb      	adds	r3, r5, r3
1a001486:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00148a:	d204      	bcs.n	1a001496 <__udivmoddi4+0x12e>
1a00148c:	4598      	cmp	r8, r3
1a00148e:	d902      	bls.n	1a001496 <__udivmoddi4+0x12e>
1a001490:	f1ac 0002 	sub.w	r0, ip, #2
1a001494:	442b      	add	r3, r5
1a001496:	eba3 0308 	sub.w	r3, r3, r8
1a00149a:	fbb3 fcfe 	udiv	ip, r3, lr
1a00149e:	fb0c f802 	mul.w	r8, ip, r2
1a0014a2:	fb0e 321c 	mls	r2, lr, ip, r3
1a0014a6:	b28b      	uxth	r3, r1
1a0014a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0014ac:	4598      	cmp	r8, r3
1a0014ae:	d90f      	bls.n	1a0014d0 <__udivmoddi4+0x168>
1a0014b0:	18eb      	adds	r3, r5, r3
1a0014b2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
1a0014b6:	d204      	bcs.n	1a0014c2 <__udivmoddi4+0x15a>
1a0014b8:	4598      	cmp	r8, r3
1a0014ba:	d902      	bls.n	1a0014c2 <__udivmoddi4+0x15a>
1a0014bc:	f1ac 0102 	sub.w	r1, ip, #2
1a0014c0:	442b      	add	r3, r5
1a0014c2:	eba3 0308 	sub.w	r3, r3, r8
1a0014c6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
1a0014ca:	e7a6      	b.n	1a00141a <__udivmoddi4+0xb2>
1a0014cc:	4660      	mov	r0, ip
1a0014ce:	e7e2      	b.n	1a001496 <__udivmoddi4+0x12e>
1a0014d0:	4661      	mov	r1, ip
1a0014d2:	e7f6      	b.n	1a0014c2 <__udivmoddi4+0x15a>
1a0014d4:	4662      	mov	r2, ip
1a0014d6:	e7b7      	b.n	1a001448 <__udivmoddi4+0xe0>
1a0014d8:	4663      	mov	r3, ip
1a0014da:	e78c      	b.n	1a0013f6 <__udivmoddi4+0x8e>
1a0014dc:	4573      	cmp	r3, lr
1a0014de:	d905      	bls.n	1a0014ec <__udivmoddi4+0x184>
1a0014e0:	b10e      	cbz	r6, 1a0014e6 <__udivmoddi4+0x17e>
1a0014e2:	e9c6 0e00 	strd	r0, lr, [r6]
1a0014e6:	2100      	movs	r1, #0
1a0014e8:	4608      	mov	r0, r1
1a0014ea:	e78c      	b.n	1a001406 <__udivmoddi4+0x9e>
1a0014ec:	fab3 f783 	clz	r7, r3
1a0014f0:	b987      	cbnz	r7, 1a001514 <__udivmoddi4+0x1ac>
1a0014f2:	4573      	cmp	r3, lr
1a0014f4:	d301      	bcc.n	1a0014fa <__udivmoddi4+0x192>
1a0014f6:	4282      	cmp	r2, r0
1a0014f8:	d80a      	bhi.n	1a001510 <__udivmoddi4+0x1a8>
1a0014fa:	1a84      	subs	r4, r0, r2
1a0014fc:	eb6e 0303 	sbc.w	r3, lr, r3
1a001500:	2001      	movs	r0, #1
1a001502:	469c      	mov	ip, r3
1a001504:	2e00      	cmp	r6, #0
1a001506:	d06a      	beq.n	1a0015de <__udivmoddi4+0x276>
1a001508:	e9c6 4c00 	strd	r4, ip, [r6]
1a00150c:	2100      	movs	r1, #0
1a00150e:	e77a      	b.n	1a001406 <__udivmoddi4+0x9e>
1a001510:	4638      	mov	r0, r7
1a001512:	e7f7      	b.n	1a001504 <__udivmoddi4+0x19c>
1a001514:	f1c7 0c20 	rsb	ip, r7, #32
1a001518:	40bb      	lsls	r3, r7
1a00151a:	fa22 f40c 	lsr.w	r4, r2, ip
1a00151e:	431c      	orrs	r4, r3
1a001520:	fa20 f10c 	lsr.w	r1, r0, ip
1a001524:	fa2e f30c 	lsr.w	r3, lr, ip
1a001528:	fa0e fe07 	lsl.w	lr, lr, r7
1a00152c:	ea41 010e 	orr.w	r1, r1, lr
1a001530:	ea4f 4914 	mov.w	r9, r4, lsr #16
1a001534:	fa00 f507 	lsl.w	r5, r0, r7
1a001538:	fbb3 f8f9 	udiv	r8, r3, r9
1a00153c:	fa1f fe84 	uxth.w	lr, r4
1a001540:	fb09 3018 	mls	r0, r9, r8, r3
1a001544:	0c0b      	lsrs	r3, r1, #16
1a001546:	fb08 fa0e 	mul.w	sl, r8, lr
1a00154a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a00154e:	459a      	cmp	sl, r3
1a001550:	fa02 f207 	lsl.w	r2, r2, r7
1a001554:	d93f      	bls.n	1a0015d6 <__udivmoddi4+0x26e>
1a001556:	18e3      	adds	r3, r4, r3
1a001558:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
1a00155c:	d204      	bcs.n	1a001568 <__udivmoddi4+0x200>
1a00155e:	459a      	cmp	sl, r3
1a001560:	d902      	bls.n	1a001568 <__udivmoddi4+0x200>
1a001562:	f1a8 0002 	sub.w	r0, r8, #2
1a001566:	4423      	add	r3, r4
1a001568:	eba3 030a 	sub.w	r3, r3, sl
1a00156c:	b289      	uxth	r1, r1
1a00156e:	fbb3 f8f9 	udiv	r8, r3, r9
1a001572:	fb09 3318 	mls	r3, r9, r8, r3
1a001576:	fb08 fe0e 	mul.w	lr, r8, lr
1a00157a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00157e:	458e      	cmp	lr, r1
1a001580:	d92b      	bls.n	1a0015da <__udivmoddi4+0x272>
1a001582:	1861      	adds	r1, r4, r1
1a001584:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a001588:	d204      	bcs.n	1a001594 <__udivmoddi4+0x22c>
1a00158a:	458e      	cmp	lr, r1
1a00158c:	d902      	bls.n	1a001594 <__udivmoddi4+0x22c>
1a00158e:	f1a8 0302 	sub.w	r3, r8, #2
1a001592:	4421      	add	r1, r4
1a001594:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a001598:	fba0 9802 	umull	r9, r8, r0, r2
1a00159c:	eba1 010e 	sub.w	r1, r1, lr
1a0015a0:	4541      	cmp	r1, r8
1a0015a2:	46ce      	mov	lr, r9
1a0015a4:	4643      	mov	r3, r8
1a0015a6:	d302      	bcc.n	1a0015ae <__udivmoddi4+0x246>
1a0015a8:	d106      	bne.n	1a0015b8 <__udivmoddi4+0x250>
1a0015aa:	454d      	cmp	r5, r9
1a0015ac:	d204      	bcs.n	1a0015b8 <__udivmoddi4+0x250>
1a0015ae:	ebb9 0e02 	subs.w	lr, r9, r2
1a0015b2:	eb68 0304 	sbc.w	r3, r8, r4
1a0015b6:	3801      	subs	r0, #1
1a0015b8:	b18e      	cbz	r6, 1a0015de <__udivmoddi4+0x276>
1a0015ba:	ebb5 020e 	subs.w	r2, r5, lr
1a0015be:	eb61 0103 	sbc.w	r1, r1, r3
1a0015c2:	fa01 fc0c 	lsl.w	ip, r1, ip
1a0015c6:	fa22 f307 	lsr.w	r3, r2, r7
1a0015ca:	ea4c 0303 	orr.w	r3, ip, r3
1a0015ce:	40f9      	lsrs	r1, r7
1a0015d0:	e9c6 3100 	strd	r3, r1, [r6]
1a0015d4:	e79a      	b.n	1a00150c <__udivmoddi4+0x1a4>
1a0015d6:	4640      	mov	r0, r8
1a0015d8:	e7c6      	b.n	1a001568 <__udivmoddi4+0x200>
1a0015da:	4643      	mov	r3, r8
1a0015dc:	e7da      	b.n	1a001594 <__udivmoddi4+0x22c>
1a0015de:	4631      	mov	r1, r6
1a0015e0:	e711      	b.n	1a001406 <__udivmoddi4+0x9e>
	...

1a0015e4 <__aeabi_idiv0>:
1a0015e4:	4770      	bx	lr
1a0015e6:	bf00      	nop

1a0015e8 <__libc_init_array>:
1a0015e8:	b570      	push	{r4, r5, r6, lr}
1a0015ea:	4d0d      	ldr	r5, [pc, #52]	; (1a001620 <__libc_init_array+0x38>)
1a0015ec:	4c0d      	ldr	r4, [pc, #52]	; (1a001624 <__libc_init_array+0x3c>)
1a0015ee:	1b64      	subs	r4, r4, r5
1a0015f0:	10a4      	asrs	r4, r4, #2
1a0015f2:	2600      	movs	r6, #0
1a0015f4:	42a6      	cmp	r6, r4
1a0015f6:	d109      	bne.n	1a00160c <__libc_init_array+0x24>
1a0015f8:	4d0b      	ldr	r5, [pc, #44]	; (1a001628 <__libc_init_array+0x40>)
1a0015fa:	4c0c      	ldr	r4, [pc, #48]	; (1a00162c <__libc_init_array+0x44>)
1a0015fc:	f7fe ff79 	bl	1a0004f2 <_init>
1a001600:	1b64      	subs	r4, r4, r5
1a001602:	10a4      	asrs	r4, r4, #2
1a001604:	2600      	movs	r6, #0
1a001606:	42a6      	cmp	r6, r4
1a001608:	d105      	bne.n	1a001616 <__libc_init_array+0x2e>
1a00160a:	bd70      	pop	{r4, r5, r6, pc}
1a00160c:	f855 3b04 	ldr.w	r3, [r5], #4
1a001610:	4798      	blx	r3
1a001612:	3601      	adds	r6, #1
1a001614:	e7ee      	b.n	1a0015f4 <__libc_init_array+0xc>
1a001616:	f855 3b04 	ldr.w	r3, [r5], #4
1a00161a:	4798      	blx	r3
1a00161c:	3601      	adds	r6, #1
1a00161e:	e7f2      	b.n	1a001606 <__libc_init_array+0x1e>
1a001620:	1a000300 	.word	0x1a000300
1a001624:	1a000300 	.word	0x1a000300
1a001628:	1a000300 	.word	0x1a000300
1a00162c:	1a000304 	.word	0x1a000304

1a001630 <memset>:
1a001630:	4402      	add	r2, r0
1a001632:	4603      	mov	r3, r0
1a001634:	4293      	cmp	r3, r2
1a001636:	d100      	bne.n	1a00163a <memset+0xa>
1a001638:	4770      	bx	lr
1a00163a:	f803 1b01 	strb.w	r1, [r3], #1
1a00163e:	e7f9      	b.n	1a001634 <memset+0x4>

1a001640 <ExtRateIn>:
1a001640:	0000 0000                                   ....

1a001644 <GpioButtons>:
1a001644:	0400 0800 0900 0901                         ........

1a00164c <GpioLeds>:
1a00164c:	0005 0105 0205 0e00 0b01 0c01               ............

1a001658 <GpioPorts>:
1a001658:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a001668:	0802 0000                                   ....

1a00166c <OscRateIn>:
1a00166c:	1b00 00b7                                   ....

1a001670 <InitClkStates>:
1a001670:	0f01 0101                                   ....

1a001674 <pinmuxing>:
1a001674:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a001684:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a001694:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a0016a4:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a0016b4:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a0016c4:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a0016d4:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a0016e4:	0206 0057 0f03 0f0f 00ff 0000               ..W.........

1a0016f0 <periph_to_base>:
1a0016f0:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a001700:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a001710:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a001720:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a001730:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a001740:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a001750:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a00175c <InitClkStates>:
1a00175c:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a00176c:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a00177c:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a00178c:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a00179c:	111a 0001 111b 0001                         ........

1a0017a4 <UART_BClock>:
1a0017a4:	01c2 01a2 0182 0162                         ......b.

1a0017ac <UART_PClock>:
1a0017ac:	0081 0082 00a1 00a2                         ........
