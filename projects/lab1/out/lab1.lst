
projects/lab1/out/lab1.elf:     file format elf32-littlearm
projects/lab1/out/lab1.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000589

Program Header:
0x70000001 off    0x00012928 vaddr 0x1a002928 paddr 0x1a002928 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x0000009c vaddr 0x1000009c paddr 0x1000009c align 2**16
         filesz 0x00000000 memsz 0x00000024 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002930 memsz 0x00002930 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002930 align 2**16
         filesz 0x0000009c memsz 0x0000009c flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  10000000  1a002930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  0002009c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  0002009c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  0002009c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  0002009c  2**2
                  CONTENTS
  6 .bss          00000024  1000009c  1000009c  0001009c  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  0002009c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  0002009c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  0002009c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  0002009c  2**2
                  CONTENTS
 11 .init_array   00000004  1a000300  1a000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .text         00002618  1a000310  1a000310  00010310  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .ARM.exidx    00000008  1a002928  1a002928  00012928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .uninit_RESERVED 00000000  10000000  10000000  0002009c  2**2
                  CONTENTS
 15 .noinit_RAM2  00000000  10080000  10080000  0002009c  2**2
                  CONTENTS
 16 .noinit_RAM3  00000000  20000000  20000000  0002009c  2**2
                  CONTENTS
 17 .noinit_RAM4  00000000  20008000  20008000  0002009c  2**2
                  CONTENTS
 18 .noinit_RAM5  00000000  2000c000  2000c000  0002009c  2**2
                  CONTENTS
 19 .noinit       00000000  100000c0  100000c0  00000000  2**2
                  ALLOC
 20 .debug_info   0000f67f  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 00002c9b  00000000  00000000  0002f71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00004de7  00000000  00000000  000323b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00000840  00000000  00000000  000371a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 000006b9  00000000  00000000  000379e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00009119  00000000  00000000  00038099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   0000ab09  00000000  00000000  000411b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    0001e840  00000000  00000000  0004bcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      0000001e  00000000  00000000  0006a4fb  2**0
                  CONTENTS, READONLY
 29 .ARM.attributes 00000032  00000000  00000000  0006a519  2**0
                  CONTENTS, READONLY
 30 .debug_frame  000018dc  00000000  00000000  0006a54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line_str 0000004e  00000000  00000000  0006be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
1000009c l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a000300 l    d  .init_array	00000000 .init_array
1a000310 l    d  .text	00000000 .text
1a002928 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000c0 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 impure.c
1000003c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 system.c
100000a4 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 configuracion.c
00000000 l    df *ABS*	00000000 lab1.c
1000009c l     O .bss	00000001 actualizar
100000a0 l     O .bss	00000004 contador.0
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 board.c
1a000820 l     F .text	00000048 Board_LED_Init
1a000868 l     F .text	00000044 Board_TEC_Init
1a0008ac l     F .text	00000044 Board_GPIO_Init
1a0008f0 l     F .text	00000030 Board_ADC_Init
1a000920 l     F .text	00000038 Board_SPI_Init
1a000958 l     F .text	00000024 Board_I2C_Init
1a002720 l     O .text	00000008 GpioButtons
1a002728 l     O .text	0000000c GpioLeds
1a002734 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00274c l     O .text	00000004 InitClkStates
1a002750 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000abc l     F .text	00000014 Chip_ADC_GetClockIndex
1a000ad0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000b98 l     F .text	000000a8 pll_calc_divs
1a000c40 l     F .text	00000110 pll_get_frac
1a000d50 l     F .text	00000054 Chip_Clock_FindBaseClock
1a000fc8 l     F .text	00000022 Chip_Clock_GetDivRate
100000ac l     O .bss	00000008 audio_usb_pll_freq
1a0027cc l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0011c0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0011d4 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002838 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0013d0 l     F .text	0000002c Chip_UART_GetIndex
1a002880 l     O .text	00000008 UART_BClock
1a002888 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 findfp.c
1a00189c l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a001b40 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 
1a000304 l       .init_array	00000000 __init_array_end
1a000300 l       .bss_RAM5	00000000 __preinit_array_end
1a000300 l       .init_array	00000000 __init_array_start
1a000300 l       .bss_RAM5	00000000 __preinit_array_start
1a000df0 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000628 g     F .text	00000012 _isatty_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a00063a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a00186c g     F .text	00000030 printf
1a000a0e g     F .text	00000008 __stdio_init
1a001e4e g     F .text	00000024 __sseek
1a00194c g     F .text	00000070 __sinit
1a001e7c g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a0018f0 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a000b76 g     F .text	0000000c Chip_ADC_SetResolution
1a0022fc g     F .text	0000000c __malloc_unlock
1a0003d8 g     F .text	0000005c SysTick_Handler
1a000584  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0009b4 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002930 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a00061e g     F .text	0000000a _fstat_r
53ff7306 g       *ABS*	00000000 __valid_user_code_checksum
1a002930 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a001070 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0007b4 g     F .text	0000006c Led_Toggle
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0018e4 g     F .text	0000000c _cleanup_r
1a001564 g     F .text	00000000 .hidden __aeabi_uldivmod
100000c0 g       .noinit	00000000 _noinit
100000a8 g     O .bss	00000004 SystemCoreClock
1a0013fc g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a0010ec g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000a44 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001594 g     F .text	0000027a .hidden __udivmoddi4
1a0006bc g     F .text	00000020 _sbrk_r
1a00271c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000644 g     F .text	0000004e _read_r
1a000748 g     F .text	0000006c Led_Off
1a000434 g     F .text	00000032 ConfigurarUART
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a00035c g     F .text	0000007c ConfigurarPuertosLaboratorio
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002928 g       .text	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
100000b6 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a0028f0 g     O .text	00000004 _global_impure_ptr
1a001814 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0009d0 g     F .text	0000002c Board_Init
1a000612  w    F .text	00000002 _init
1a0006dc g     F .text	0000006c Led_On
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100000c0 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000588 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001184 g     F .text	0000003c Chip_I2C_SetClockRate
1a0004e4 g     F .text	00000034 handleData
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000da4 g     F .text	0000004c Chip_Clock_EnableCrystal
100000b4 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a002890 g     O .text	00000020 __sf_fake_stderr
1a00115c g     F .text	00000028 Chip_I2C_Init
1a001a8a g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a000f60 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a0011ec g     F .text	00000012 Chip_SSP_SetClockRate
1a001b6e g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a00191c g     F .text	0000000c __sfp_lock_acquire
1a002250 g     F .text	00000000 memchr
1a002308 g     F .text	00000098 _free_r
1a001048 g     F .text	00000028 Chip_Clock_GetBaseClock
1000009c g       .bss	00000000 _bss
1a000466 g     F .text	0000002a UARTLeerByte
1a000b44 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0011fe g     F .text	00000042 Chip_SSP_SetBitRate
1a001138 g     F .text	00000002 Chip_GPIO_Init
1a002748 g     O .text	00000004 OscRateIn
100000c0 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000614 g     F .text	0000000a _close_r
1a001f20 g     F .text	000000dc __swsetup_r
1a001810  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0019bc g     F .text	0000008c __sfp
1a001940 g     F .text	0000000c __sinit_lock_release
1a001df4 g     F .text	00000022 __sread
1a0001ba  w    F .text	00000002 USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0022f0 g     F .text	0000000c __malloc_lock
1a0009a0 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a002108 g     F .text	00000078 _fflush_r
1a000310 g     F .text	0000004c ConfigurarInterrupcion
1a0028b0 g     O .text	00000020 __sf_fake_stdin
1a000e0c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001a88 g     F .text	00000002 __retarget_lock_acquire_recursive
1a00185c g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000518 g     F .text	0000006c main
1a001a86 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0004d0 g     F .text	00000014 handleError
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a001e72 g     F .text	00000008 __sclose
1a001a8c g     F .text	000000b4 _malloc_r
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a00107c g     F .text	0000003c Chip_Clock_EnableOpts
1a000a06 g     F .text	00000008 __stdio_getchar
1a000e28 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000ee0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00152c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a000610  w    F .text	00000002 _fini
1a00186c g     F .text	00000030 iprintf
1a000b04 g     F .text	00000040 Chip_ADC_Init
1a000a18 g     F .text	0000002c Board_SetupMuxing
1a001450 g     F .text	000000dc Chip_UART_SetBaudFDR
1a000692 g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a0023a0 g     F .text	000000da _printf_common
10000038 g     O .data	00000004 _impure_ptr
1a001ffc g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
100000c0 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001240 g     F .text	00000038 Chip_SSP_Init
1a000490 g     F .text	00000040 translateError
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a002180 g     F .text	0000004a __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a00097c g     F .text	00000024 Board_Debug_Init
1a0009fc g     F .text	0000000a __stdio_putchar
1000009c g       .data	00000000 _edata
1a00113c g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001278 g     F .text	00000158 Chip_SetupCoreClock
1a001e16 g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a001b94 g     F .text	00000260 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a001a48 g     F .text	0000003e _fwalk_reent
1a000b84 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001928 g     F .text	0000000c __sfp_lock_release
1a0028d0 g     O .text	00000020 __sf_fake_stdout
1a001810  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0021cc g     F .text	00000080 __smakebuf_r
1a00247c g     F .text	0000024c _printf_i
1a0010b8 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
100000bc g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
100000b8 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a001b94 g     F .text	00000260 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000fec g     F .text	0000005c Chip_Clock_SetBaseClock
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
100000b5 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a001934 g     F .text	0000000c __sinit_lock_acquire
1a000ab0 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 89 05 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 06 73 ff 53     }............s.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	d9 03 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a002930 	.word	0x1a002930
1a000118:	10000000 	.word	0x10000000
1a00011c:	0000009c 	.word	0x0000009c
1a000120:	1a002930 	.word	0x1a002930
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002930 	.word	0x1a002930
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002930 	.word	0x1a002930
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002930 	.word	0x1a002930
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	1000009c 	.word	0x1000009c
1a000154:	00000024 	.word	0x00000024
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

Disassembly of section .text:

1a000310 <ConfigurarInterrupcion>:
#include "configuracion.h"


void ConfigurarInterrupcion(void) {
1a000310:	b508      	push	{r3, lr}
   __asm__ volatile ("cpsid i");
1a000312:	b672      	cpsid	i

   /* Activate SysTick */
   SystemCoreClockUpdate();
1a000314:	f000 fc36 	bl	1a000b84 <SystemCoreClockUpdate>
   SysTick_Config(SystemCoreClock/1000);
1a000318:	4b0d      	ldr	r3, [pc, #52]	; (1a000350 <ConfigurarInterrupcion+0x40>)
1a00031a:	681b      	ldr	r3, [r3, #0]
1a00031c:	4a0d      	ldr	r2, [pc, #52]	; (1a000354 <ConfigurarInterrupcion+0x44>)
1a00031e:	fba2 2303 	umull	r2, r3, r2, r3
1a000322:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a000324:	3b01      	subs	r3, #1
1a000326:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a00032a:	d20a      	bcs.n	1a000342 <ConfigurarInterrupcion+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a00032c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
1a000330:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000332:	4b09      	ldr	r3, [pc, #36]	; (1a000358 <ConfigurarInterrupcion+0x48>)
1a000334:	21e0      	movs	r1, #224	; 0xe0
1a000336:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a00033a:	2300      	movs	r3, #0
1a00033c:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00033e:	2307      	movs	r3, #7
1a000340:	6113      	str	r3, [r2, #16]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000342:	4b05      	ldr	r3, [pc, #20]	; (1a000358 <ConfigurarInterrupcion+0x48>)
1a000344:	22e0      	movs	r2, #224	; 0xe0
1a000346:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

   /* Update priority set by SysTick_Config */
   NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);

   __asm__ volatile ("cpsie i");
1a00034a:	b662      	cpsie	i
}
1a00034c:	bd08      	pop	{r3, pc}
1a00034e:	bf00      	nop
1a000350:	100000a8 	.word	0x100000a8
1a000354:	10624dd3 	.word	0x10624dd3
1a000358:	e000ed00 	.word	0xe000ed00

1a00035c <ConfigurarPuertosLaboratorio>:
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00035c:	4a1c      	ldr	r2, [pc, #112]	; (1a0003d0 <ConfigurarPuertosLaboratorio+0x74>)
1a00035e:	23d4      	movs	r3, #212	; 0xd4
1a000360:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
1a000364:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
1a000368:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_ClearValue(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue)
{
	pGPIO->CLR[portNum] = bitValue;
1a00036c:	4b19      	ldr	r3, [pc, #100]	; (1a0003d4 <ConfigurarPuertosLaboratorio+0x78>)
1a00036e:	2107      	movs	r1, #7
1a000370:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
		pGPIO->DIR[portNum] |= bitValue;
1a000374:	6959      	ldr	r1, [r3, #20]
1a000376:	f041 0107 	orr.w	r1, r1, #7
1a00037a:	6159      	str	r1, [r3, #20]
1a00037c:	21d0      	movs	r1, #208	; 0xd0
1a00037e:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
1a000382:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
1a000386:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
	pGPIO->CLR[portNum] = bitValue;
1a00038a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a00038e:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
1a000392:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
1a000396:	f8c3 1284 	str.w	r1, [r3, #644]	; 0x284
		pGPIO->DIR[portNum] |= bitValue;
1a00039a:	6819      	ldr	r1, [r3, #0]
1a00039c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
1a0003a0:	6019      	str	r1, [r3, #0]
1a0003a2:	6859      	ldr	r1, [r3, #4]
1a0003a4:	f441 51c0 	orr.w	r1, r1, #6144	; 0x1800
1a0003a8:	6059      	str	r1, [r3, #4]
1a0003aa:	2140      	movs	r1, #64	; 0x40
1a0003ac:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
1a0003b0:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
1a0003b4:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
1a0003b8:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
		pGPIO->DIR[portNum] &= ~bitValue;
1a0003bc:	681a      	ldr	r2, [r3, #0]
1a0003be:	f422 7244 	bic.w	r2, r2, #784	; 0x310
1a0003c2:	601a      	str	r2, [r3, #0]
1a0003c4:	685a      	ldr	r2, [r3, #4]
1a0003c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
1a0003ca:	605a      	str	r2, [r3, #4]
   Chip_SCU_PinMux(1, 1, SCU_MODE_ENT, SCU_MODE_FUNC0);
   Chip_SCU_PinMux(1, 2, SCU_MODE_ENT, SCU_MODE_FUNC0);
   Chip_SCU_PinMux(1, 6, SCU_MODE_ENT, SCU_MODE_FUNC0);
   Chip_GPIO_SetDir(LPC_GPIO_PORT, 0, (1 << 4) | (1 << 8) | (1 << 9), false);
   Chip_GPIO_SetDir(LPC_GPIO_PORT, 1, (1 << 9), false);
}
1a0003cc:	4770      	bx	lr
1a0003ce:	bf00      	nop
1a0003d0:	40086000 	.word	0x40086000
1a0003d4:	400f6000 	.word	0x400f6000

1a0003d8 <SysTick_Handler>:
void handleError(uint8_t error);

void handleData(uint8_t data, int8_t *contador);

void SysTick_Handler(void)
{
1a0003d8:	b508      	push	{r3, lr}
	static int contador = 0;

	contador++;
1a0003da:	4a13      	ldr	r2, [pc, #76]	; (1a000428 <SysTick_Handler+0x50>)
1a0003dc:	6813      	ldr	r3, [r2, #0]
1a0003de:	3301      	adds	r3, #1
1a0003e0:	6013      	str	r3, [r2, #0]
	if (contador % 500 == 0)
1a0003e2:	4912      	ldr	r1, [pc, #72]	; (1a00042c <SysTick_Handler+0x54>)
1a0003e4:	fb81 2103 	smull	r2, r1, r1, r3
1a0003e8:	17da      	asrs	r2, r3, #31
1a0003ea:	ebc2 1261 	rsb	r2, r2, r1, asr #5
1a0003ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a0003f2:	fb01 3212 	mls	r2, r1, r2, r3
1a0003f6:	b19a      	cbz	r2, 1a000420 <SysTick_Handler+0x48>
	{
		Led_Toggle(RED_LED);
	}
	if (contador % 1000 == 0)
1a0003f8:	4b0b      	ldr	r3, [pc, #44]	; (1a000428 <SysTick_Handler+0x50>)
1a0003fa:	681a      	ldr	r2, [r3, #0]
1a0003fc:	490b      	ldr	r1, [pc, #44]	; (1a00042c <SysTick_Handler+0x54>)
1a0003fe:	fb81 3102 	smull	r3, r1, r1, r2
1a000402:	17d3      	asrs	r3, r2, #31
1a000404:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
1a000408:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a00040c:	fb01 2313 	mls	r3, r1, r3, r2
1a000410:	b92b      	cbnz	r3, 1a00041e <SysTick_Handler+0x46>
	{
		contador = 0;
1a000412:	4b05      	ldr	r3, [pc, #20]	; (1a000428 <SysTick_Handler+0x50>)
1a000414:	2200      	movs	r2, #0
1a000416:	601a      	str	r2, [r3, #0]
		actualizar = 1;
1a000418:	4b05      	ldr	r3, [pc, #20]	; (1a000430 <SysTick_Handler+0x58>)
1a00041a:	2201      	movs	r2, #1
1a00041c:	701a      	strb	r2, [r3, #0]
	}
}
1a00041e:	bd08      	pop	{r3, pc}
		Led_Toggle(RED_LED);
1a000420:	2003      	movs	r0, #3
1a000422:	f000 f9c7 	bl	1a0007b4 <Led_Toggle>
1a000426:	e7e7      	b.n	1a0003f8 <SysTick_Handler+0x20>
1a000428:	100000a0 	.word	0x100000a0
1a00042c:	10624dd3 	.word	0x10624dd3
1a000430:	1000009c 	.word	0x1000009c

1a000434 <ConfigurarUART>:

void ConfigurarUART(LPC_USART_T *pUART)
{
1a000434:	b510      	push	{r4, lr}
1a000436:	4604      	mov	r4, r0
	Chip_UART_Init(pUART);
1a000438:	f000 ffe0 	bl	1a0013fc <Chip_UART_Init>

	//Habilito la escritura del registro DLM y DLL
	//Utilizo una mascara para escribir en el bit 7
	pUART->LCR = pUART->LCR | UART_LCR_DLAB_EN;
1a00043c:	68e3      	ldr	r3, [r4, #12]
1a00043e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000442:	60e3      	str	r3, [r4, #12]

	//El Para obtener 9600bps uso el valor 1328 = 0x530
	//Configuro DLM y DLL
	pUART->DLM = 0x05;
1a000444:	2305      	movs	r3, #5
1a000446:	6063      	str	r3, [r4, #4]
	pUART->DLL = 0x30;
1a000448:	2330      	movs	r3, #48	; 0x30
1a00044a:	6023      	str	r3, [r4, #0]

	//Borro todos los valores a configurar en bits 7 al 0
	pUART->LCR = pUART->LCR & 0xFFFFFF00;
1a00044c:	68e3      	ldr	r3, [r4, #12]
1a00044e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000452:	60e3      	str	r3, [r4, #12]

	//Configuro los valores
	pUART->LCR = pUART->LCR
1a000454:	68e3      	ldr	r3, [r4, #12]
		| UART_LCR_PARITY_EN	//habilito paridad
		| UART_LCR_PARITY_EVEN	//paridad par
		| UART_LCR_WLEN8		//8 bits de palabra
		| UART_LCR_SBS_1BIT;	//1 bit de stop
1a000456:	f043 031b 	orr.w	r3, r3, #27
	pUART->LCR = pUART->LCR
1a00045a:	60e3      	str	r3, [r4, #12]

	pUART->TER1 = pUART->TER1 | 0b1;
1a00045c:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a00045e:	f043 0301 	orr.w	r3, r3, #1
1a000462:	6323      	str	r3, [r4, #48]	; 0x30

}
1a000464:	bd10      	pop	{r4, pc}

1a000466 <UARTLeerByte>:
 * @param error Puntero donde guardamos el error
 * @return codigo
 **/
uint8_t UARTLeerByte(LPC_USART_T *pUART, uint8_t *data, uint8_t *error)
{
	uint8_t status = pUART->LSR;
1a000466:	6943      	ldr	r3, [r0, #20]
1a000468:	fa5f fc83 	uxtb.w	ip, r3

	//Primero verifico si existe algun error
	if( status & UART_LSR_RXFE)
1a00046c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000470:	d104      	bne.n	1a00047c <UARTLeerByte+0x16>

		//Devuelvo 2 indicando que hay error.
		return 2;
	}

	if(status & UART_LSR_RDR)
1a000472:	f013 0f01 	tst.w	r3, #1
1a000476:	d107      	bne.n	1a000488 <UARTLeerByte+0x22>
		//Devuelvo 1 indicando que hay datos
		return 1;
	}

	//Devuelvo 0 indicando nulo
	return 0;
1a000478:	2000      	movs	r0, #0
}
1a00047a:	4770      	bx	lr
		*error = status & (
1a00047c:	f00c 0c1e 	and.w	ip, ip, #30
1a000480:	f882 c000 	strb.w	ip, [r2]
		return 2;
1a000484:	2002      	movs	r0, #2
1a000486:	4770      	bx	lr
		*data = pUART->RBR;
1a000488:	6803      	ldr	r3, [r0, #0]
1a00048a:	700b      	strb	r3, [r1, #0]
		return 1;
1a00048c:	2001      	movs	r0, #1
1a00048e:	4770      	bx	lr

1a000490 <translateError>:
 * @return uint8_t
 **/
const char* translateError(uint8_t error)
{
	//Si es error de overrun
	if (error & UART_LSR_OE)
1a000490:	f010 0f02 	tst.w	r0, #2
1a000494:	d10a      	bne.n	1a0004ac <translateError+0x1c>
	{
		return OVERRUN;
	}

	//Si es error de paridad
	if (error & UART_LSR_PE)
1a000496:	f010 0f04 	tst.w	r0, #4
1a00049a:	d109      	bne.n	1a0004b0 <translateError+0x20>
	{
		return PARITY;
	}

	//Si es error de framing
	if (error & UART_LSR_FE)
1a00049c:	f010 0f08 	tst.w	r0, #8
1a0004a0:	d108      	bne.n	1a0004b4 <translateError+0x24>
	{
		return FRAMING;
	}

	//Si es error de breack
	if (error & UART_LSR_BI)
1a0004a2:	f010 0f10 	tst.w	r0, #16
1a0004a6:	d107      	bne.n	1a0004b8 <translateError+0x28>
	{
		return BREAK;
	}

	return UNKNOWN;
1a0004a8:	4804      	ldr	r0, [pc, #16]	; (1a0004bc <translateError+0x2c>)
1a0004aa:	4770      	bx	lr
		return OVERRUN;
1a0004ac:	4804      	ldr	r0, [pc, #16]	; (1a0004c0 <translateError+0x30>)
1a0004ae:	4770      	bx	lr
		return PARITY;
1a0004b0:	4804      	ldr	r0, [pc, #16]	; (1a0004c4 <translateError+0x34>)
1a0004b2:	4770      	bx	lr
		return FRAMING;
1a0004b4:	4804      	ldr	r0, [pc, #16]	; (1a0004c8 <translateError+0x38>)
1a0004b6:	4770      	bx	lr
		return BREAK;
1a0004b8:	4804      	ldr	r0, [pc, #16]	; (1a0004cc <translateError+0x3c>)
}
1a0004ba:	4770      	bx	lr
1a0004bc:	1a002708 	.word	0x1a002708
1a0004c0:	1a0026c8 	.word	0x1a0026c8
1a0004c4:	1a0026d8 	.word	0x1a0026d8
1a0004c8:	1a0026e8 	.word	0x1a0026e8
1a0004cc:	1a0026f8 	.word	0x1a0026f8

1a0004d0 <handleError>:
/**
 * Manejo de error
 * @param error - El codigo de error segun translateError
 **/
void handleError(uint8_t error)
{
1a0004d0:	b508      	push	{r3, lr}
	//Printeo el error ya que no se definio ninguna conducta.
	printf("%s", translateError(error));
1a0004d2:	f7ff ffdd 	bl	1a000490 <translateError>
1a0004d6:	4601      	mov	r1, r0
1a0004d8:	4801      	ldr	r0, [pc, #4]	; (1a0004e0 <handleError+0x10>)
1a0004da:	f001 f9c7 	bl	1a00186c <iprintf>
}
1a0004de:	bd08      	pop	{r3, pc}
1a0004e0:	1a002718 	.word	0x1a002718

1a0004e4 <handleData>:
 * @param data - El dato a ser procesado.
 **/
void handleData(uint8_t data, int8_t *contador)
{

	switch (data)
1a0004e4:	2871      	cmp	r0, #113	; 0x71
1a0004e6:	d00a      	beq.n	1a0004fe <handleData+0x1a>
1a0004e8:	2877      	cmp	r0, #119	; 0x77
1a0004ea:	d00a      	beq.n	1a000502 <handleData+0x1e>
1a0004ec:	2865      	cmp	r0, #101	; 0x65
1a0004ee:	d00a      	beq.n	1a000506 <handleData+0x22>
			*contador = 0;
			break;
	}

	//Verifico que el contador no se pase de 100 o 0.
	if( *contador > 99 )
1a0004f0:	f991 3000 	ldrsb.w	r3, [r1]
1a0004f4:	2b63      	cmp	r3, #99	; 0x63
1a0004f6:	dd09      	ble.n	1a00050c <handleData+0x28>
	{
		*contador = 0;
1a0004f8:	2300      	movs	r3, #0
1a0004fa:	700b      	strb	r3, [r1, #0]
1a0004fc:	4770      	bx	lr
			*contador++;
1a0004fe:	3101      	adds	r1, #1
			break;
1a000500:	e7f6      	b.n	1a0004f0 <handleData+0xc>
			*contador--;
1a000502:	3901      	subs	r1, #1
			break;
1a000504:	e7f4      	b.n	1a0004f0 <handleData+0xc>
			*contador = 0;
1a000506:	2300      	movs	r3, #0
1a000508:	700b      	strb	r3, [r1, #0]
			break;
1a00050a:	e7f1      	b.n	1a0004f0 <handleData+0xc>
	}
	else if( *contador < 0 )
1a00050c:	2b00      	cmp	r3, #0
1a00050e:	db00      	blt.n	1a000512 <handleData+0x2e>
	{
		*contador = 99;
	}
1a000510:	4770      	bx	lr
		*contador = 99;
1a000512:	2363      	movs	r3, #99	; 0x63
1a000514:	700b      	strb	r3, [r1, #0]
1a000516:	e7fb      	b.n	1a000510 <handleData+0x2c>

1a000518 <main>:
{
1a000518:	b500      	push	{lr}
1a00051a:	b083      	sub	sp, #12
	int8_t contador_display = 0;
1a00051c:	2300      	movs	r3, #0
1a00051e:	f88d 3005 	strb.w	r3, [sp, #5]
	ConfigurarPuertosLaboratorio();
1a000522:	f7ff ff1b 	bl	1a00035c <ConfigurarPuertosLaboratorio>
	ConfigurarInterrupcion();
1a000526:	f7ff fef3 	bl	1a000310 <ConfigurarInterrupcion>
	ConfigurarUART(USB_UART);
1a00052a:	4814      	ldr	r0, [pc, #80]	; (1a00057c <main+0x64>)
1a00052c:	f7ff ff82 	bl	1a000434 <ConfigurarUART>
1a000530:	e00f      	b.n	1a000552 <main+0x3a>
			actualizar = 0;
1a000532:	4b13      	ldr	r3, [pc, #76]	; (1a000580 <main+0x68>)
1a000534:	2200      	movs	r2, #0
1a000536:	701a      	strb	r2, [r3, #0]
			Led_On(GREEN_LED);
1a000538:	2005      	movs	r0, #5
1a00053a:	f000 f8cf 	bl	1a0006dc <Led_On>
			Led_Off(GREEN_LED);
1a00053e:	2005      	movs	r0, #5
1a000540:	f000 f902 	bl	1a000748 <Led_Off>
1a000544:	e009      	b.n	1a00055a <main+0x42>
				handleData(data, &contador_display);
1a000546:	f10d 0105 	add.w	r1, sp, #5
1a00054a:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a00054e:	f7ff ffc9 	bl	1a0004e4 <handleData>
		if (actualizar)
1a000552:	4b0b      	ldr	r3, [pc, #44]	; (1a000580 <main+0x68>)
1a000554:	781b      	ldrb	r3, [r3, #0]
1a000556:	2b00      	cmp	r3, #0
1a000558:	d1eb      	bne.n	1a000532 <main+0x1a>
		switch (UARTLeerByte(USB_UART, &data, &error))
1a00055a:	f10d 0206 	add.w	r2, sp, #6
1a00055e:	f10d 0107 	add.w	r1, sp, #7
1a000562:	4806      	ldr	r0, [pc, #24]	; (1a00057c <main+0x64>)
1a000564:	f7ff ff7f 	bl	1a000466 <UARTLeerByte>
1a000568:	2801      	cmp	r0, #1
1a00056a:	d0ec      	beq.n	1a000546 <main+0x2e>
1a00056c:	2802      	cmp	r0, #2
1a00056e:	d1f0      	bne.n	1a000552 <main+0x3a>
				handleError(error);
1a000570:	f89d 0006 	ldrb.w	r0, [sp, #6]
1a000574:	f7ff ffac 	bl	1a0004d0 <handleError>
				break;
1a000578:	e7eb      	b.n	1a000552 <main+0x3a>
1a00057a:	bf00      	nop
1a00057c:	400c1000 	.word	0x400c1000
1a000580:	1000009c 	.word	0x1000009c

1a000584 <initialise_monitor_handles>:
}
1a000584:	4770      	bx	lr
	...

1a000588 <Reset_Handler>:
void Reset_Handler(void) {
1a000588:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00058a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00058c:	4b19      	ldr	r3, [pc, #100]	; (1a0005f4 <Reset_Handler+0x6c>)
1a00058e:	4a1a      	ldr	r2, [pc, #104]	; (1a0005f8 <Reset_Handler+0x70>)
1a000590:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000594:	4a19      	ldr	r2, [pc, #100]	; (1a0005fc <Reset_Handler+0x74>)
1a000596:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00059a:	2300      	movs	r3, #0
1a00059c:	e005      	b.n	1a0005aa <Reset_Handler+0x22>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00059e:	4a18      	ldr	r2, [pc, #96]	; (1a000600 <Reset_Handler+0x78>)
1a0005a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0005a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0005a8:	3301      	adds	r3, #1
1a0005aa:	2b07      	cmp	r3, #7
1a0005ac:	d9f7      	bls.n	1a00059e <Reset_Handler+0x16>
    __asm__ volatile("cpsie i");
1a0005ae:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0005b0:	4b14      	ldr	r3, [pc, #80]	; (1a000604 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0005b2:	e007      	b.n	1a0005c4 <Reset_Handler+0x3c>
        SectionLen = *SectionTableAddr++;
1a0005b4:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0005b8:	689a      	ldr	r2, [r3, #8]
1a0005ba:	6859      	ldr	r1, [r3, #4]
1a0005bc:	6818      	ldr	r0, [r3, #0]
1a0005be:	f7ff fde4 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0005c2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0005c4:	4a10      	ldr	r2, [pc, #64]	; (1a000608 <Reset_Handler+0x80>)
1a0005c6:	4293      	cmp	r3, r2
1a0005c8:	d3f4      	bcc.n	1a0005b4 <Reset_Handler+0x2c>
1a0005ca:	e006      	b.n	1a0005da <Reset_Handler+0x52>
        ExeAddr = *SectionTableAddr++;
1a0005cc:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0005ce:	6859      	ldr	r1, [r3, #4]
1a0005d0:	f854 0b08 	ldr.w	r0, [r4], #8
1a0005d4:	f7ff fde8 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0005d8:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0005da:	4a0c      	ldr	r2, [pc, #48]	; (1a00060c <Reset_Handler+0x84>)
1a0005dc:	4293      	cmp	r3, r2
1a0005de:	d3f5      	bcc.n	1a0005cc <Reset_Handler+0x44>
    SystemInit();
1a0005e0:	f000 ffa4 	bl	1a00152c <SystemInit>
    __libc_init_array();
1a0005e4:	f001 f916 	bl	1a001814 <__libc_init_array>
    initialise_monitor_handles();
1a0005e8:	f7ff ffcc 	bl	1a000584 <initialise_monitor_handles>
    main();
1a0005ec:	f7ff ff94 	bl	1a000518 <main>
        __asm__ volatile("wfi");
1a0005f0:	bf30      	wfi
    while (1) {
1a0005f2:	e7fd      	b.n	1a0005f0 <Reset_Handler+0x68>
1a0005f4:	40053000 	.word	0x40053000
1a0005f8:	10df1000 	.word	0x10df1000
1a0005fc:	01dff7ff 	.word	0x01dff7ff
1a000600:	e000e280 	.word	0xe000e280
1a000604:	1a000114 	.word	0x1a000114
1a000608:	1a000150 	.word	0x1a000150
1a00060c:	1a000178 	.word	0x1a000178

1a000610 <_fini>:
void _fini(void) {}
1a000610:	4770      	bx	lr

1a000612 <_init>:
void _init(void) {}
1a000612:	4770      	bx	lr

1a000614 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000614:	2309      	movs	r3, #9
1a000616:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00061c:	4770      	bx	lr

1a00061e <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00061e:	2358      	movs	r3, #88	; 0x58
1a000620:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000626:	4770      	bx	lr

1a000628 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000628:	2902      	cmp	r1, #2
1a00062a:	d904      	bls.n	1a000636 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a00062c:	2309      	movs	r3, #9
1a00062e:	6003      	str	r3, [r0, #0]
       return -1;
1a000630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000634:	4770      	bx	lr
       return 1;
1a000636:	2001      	movs	r0, #1
   }
}
1a000638:	4770      	bx	lr

1a00063a <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00063a:	2358      	movs	r3, #88	; 0x58
1a00063c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00063e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000642:	4770      	bx	lr

1a000644 <_read_r>:
       SET_ERR(ENODEV);
       return -1;
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000648:	4606      	mov	r6, r0
  size_t i = 0;
  switch (fd) {
1a00064a:	2902      	cmp	r1, #2
1a00064c:	d81c      	bhi.n	1a000688 <_read_r+0x44>
1a00064e:	4617      	mov	r7, r2
1a000650:	461d      	mov	r5, r3
  size_t i = 0;
1a000652:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000654:	42ac      	cmp	r4, r5
1a000656:	d211      	bcs.n	1a00067c <_read_r+0x38>
         int c = __stdio_getchar();
1a000658:	f000 f9d5 	bl	1a000a06 <__stdio_getchar>
         if( c != -1 ){
1a00065c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000660:	d0f8      	beq.n	1a000654 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000662:	f104 0801 	add.w	r8, r4, #1
1a000666:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000668:	280d      	cmp	r0, #13
1a00066a:	d003      	beq.n	1a000674 <_read_r+0x30>
1a00066c:	280a      	cmp	r0, #10
1a00066e:	d001      	beq.n	1a000674 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000670:	4644      	mov	r4, r8
1a000672:	e7ef      	b.n	1a000654 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000674:	f000 f9c7 	bl	1a000a06 <__stdio_getchar>
               return i;
1a000678:	4640      	mov	r0, r8
1a00067a:	e003      	b.n	1a000684 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a00067c:	2313      	movs	r3, #19
1a00067e:	6033      	str	r3, [r6, #0]
      return -1;
1a000680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000688:	2313      	movs	r3, #19
1a00068a:	6003      	str	r3, [r0, #0]
      return -1;
1a00068c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000690:	e7f8      	b.n	1a000684 <_read_r+0x40>

1a000692 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000692:	2902      	cmp	r1, #2
1a000694:	d80c      	bhi.n	1a0006b0 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000696:	b570      	push	{r4, r5, r6, lr}
1a000698:	4616      	mov	r6, r2
1a00069a:	461d      	mov	r5, r3
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a00069c:	2400      	movs	r4, #0
1a00069e:	e003      	b.n	1a0006a8 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a0006a0:	5d30      	ldrb	r0, [r6, r4]
1a0006a2:	f000 f9ab 	bl	1a0009fc <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0006a6:	3401      	adds	r4, #1
1a0006a8:	42ac      	cmp	r4, r5
1a0006aa:	d3f9      	bcc.n	1a0006a0 <_write_r+0xe>
       return n;
1a0006ac:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0006ae:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0006b0:	2313      	movs	r3, #19
1a0006b2:	6003      	str	r3, [r0, #0]
       return -1;
1a0006b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0006b8:	4770      	bx	lr
	...

1a0006bc <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0006bc:	4b05      	ldr	r3, [pc, #20]	; (1a0006d4 <_sbrk_r+0x18>)
1a0006be:	681b      	ldr	r3, [r3, #0]
1a0006c0:	b123      	cbz	r3, 1a0006cc <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0006c2:	4b04      	ldr	r3, [pc, #16]	; (1a0006d4 <_sbrk_r+0x18>)
1a0006c4:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0006c6:	4401      	add	r1, r0
1a0006c8:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0006ca:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0006cc:	4b01      	ldr	r3, [pc, #4]	; (1a0006d4 <_sbrk_r+0x18>)
1a0006ce:	4a02      	ldr	r2, [pc, #8]	; (1a0006d8 <_sbrk_r+0x1c>)
1a0006d0:	601a      	str	r2, [r3, #0]
1a0006d2:	e7f6      	b.n	1a0006c2 <_sbrk_r+0x6>
1a0006d4:	100000a4 	.word	0x100000a4
1a0006d8:	100000c0 	.word	0x100000c0

1a0006dc <Led_On>:
	return TRUE;
}

/** \brief Function to turn on a specific led */
uint8_t Led_On(uint8_t led)
{
1a0006dc:	4603      	mov	r3, r0
	/** \details Function to turn on a specific led at the EDU-CIAA board.
	 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
	 * */
	uint8_t result = FALSE;

	if (led == RED_LED)
1a0006de:	2803      	cmp	r0, #3
1a0006e0:	d00e      	beq.n	1a000700 <Led_On+0x24>
	uint8_t result = FALSE;
1a0006e2:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == YELLOW_LED)
1a0006e4:	2b04      	cmp	r3, #4
1a0006e6:	d012      	beq.n	1a00070e <Led_On+0x32>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a0006e8:	2b05      	cmp	r3, #5
1a0006ea:	d017      	beq.n	1a00071c <Led_On+0x40>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
    if (led == RGB_R_LED)
1a0006ec:	b91b      	cbnz	r3, 1a0006f6 <Led_On+0x1a>
	pGPIO->SET[port] = (1 << pin);
1a0006ee:	2001      	movs	r0, #1
1a0006f0:	4a14      	ldr	r2, [pc, #80]	; (1a000744 <Led_On+0x68>)
1a0006f2:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a0006f6:	2b01      	cmp	r3, #1
1a0006f8:	d017      	beq.n	1a00072a <Led_On+0x4e>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a0006fa:	2b02      	cmp	r3, #2
1a0006fc:	d01b      	beq.n	1a000736 <Led_On+0x5a>
	{
		Chip_GPIO_SetPinOutHigh(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
}
1a0006fe:	4770      	bx	lr
1a000700:	4a10      	ldr	r2, [pc, #64]	; (1a000744 <Led_On+0x68>)
1a000702:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a000706:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		result = TRUE;
1a00070a:	2001      	movs	r0, #1
1a00070c:	e7ea      	b.n	1a0006e4 <Led_On+0x8>
1a00070e:	4a0d      	ldr	r2, [pc, #52]	; (1a000744 <Led_On+0x68>)
1a000710:	f44f 6100 	mov.w	r1, #2048	; 0x800
1a000714:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		result = TRUE;
1a000718:	2001      	movs	r0, #1
1a00071a:	e7e5      	b.n	1a0006e8 <Led_On+0xc>
1a00071c:	4a09      	ldr	r2, [pc, #36]	; (1a000744 <Led_On+0x68>)
1a00071e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
1a000722:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		result = TRUE;
1a000726:	2001      	movs	r0, #1
1a000728:	e7e0      	b.n	1a0006ec <Led_On+0x10>
1a00072a:	4a06      	ldr	r2, [pc, #24]	; (1a000744 <Led_On+0x68>)
1a00072c:	2102      	movs	r1, #2
1a00072e:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
		result = TRUE;
1a000732:	4618      	mov	r0, r3
1a000734:	e7e1      	b.n	1a0006fa <Led_On+0x1e>
1a000736:	4b03      	ldr	r3, [pc, #12]	; (1a000744 <Led_On+0x68>)
1a000738:	2204      	movs	r2, #4
1a00073a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		result = TRUE;
1a00073e:	2001      	movs	r0, #1
1a000740:	e7dd      	b.n	1a0006fe <Led_On+0x22>
1a000742:	bf00      	nop
1a000744:	400f6000 	.word	0x400f6000

1a000748 <Led_Off>:

/** \brief Function to turn off a specific led */
uint8_t Led_Off(uint8_t led)
{
1a000748:	4603      	mov	r3, r0
	/** \details Function to turn off a specific led at the EDU-CIAA board.
		 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
		 * */
	uint8_t result = FALSE;

	if (led == RED_LED)
1a00074a:	2803      	cmp	r0, #3
1a00074c:	d00e      	beq.n	1a00076c <Led_Off+0x24>
	uint8_t result = FALSE;
1a00074e:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == YELLOW_LED)
1a000750:	2b04      	cmp	r3, #4
1a000752:	d012      	beq.n	1a00077a <Led_Off+0x32>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a000754:	2b05      	cmp	r3, #5
1a000756:	d017      	beq.n	1a000788 <Led_Off+0x40>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_R_LED)
1a000758:	b91b      	cbnz	r3, 1a000762 <Led_Off+0x1a>
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a00075a:	2001      	movs	r0, #1
1a00075c:	4a14      	ldr	r2, [pc, #80]	; (1a0007b0 <Led_Off+0x68>)
1a00075e:	f8c2 0294 	str.w	r0, [r2, #660]	; 0x294
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a000762:	2b01      	cmp	r3, #1
1a000764:	d017      	beq.n	1a000796 <Led_Off+0x4e>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a000766:	2b02      	cmp	r3, #2
1a000768:	d01b      	beq.n	1a0007a2 <Led_Off+0x5a>
	{
		Chip_GPIO_SetPinOutLow(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
}
1a00076a:	4770      	bx	lr
1a00076c:	4a10      	ldr	r2, [pc, #64]	; (1a0007b0 <Led_Off+0x68>)
1a00076e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a000772:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
		result = TRUE;
1a000776:	2001      	movs	r0, #1
1a000778:	e7ea      	b.n	1a000750 <Led_Off+0x8>
1a00077a:	4a0d      	ldr	r2, [pc, #52]	; (1a0007b0 <Led_Off+0x68>)
1a00077c:	f44f 6100 	mov.w	r1, #2048	; 0x800
1a000780:	f8c2 1284 	str.w	r1, [r2, #644]	; 0x284
		result = TRUE;
1a000784:	2001      	movs	r0, #1
1a000786:	e7e5      	b.n	1a000754 <Led_Off+0xc>
1a000788:	4a09      	ldr	r2, [pc, #36]	; (1a0007b0 <Led_Off+0x68>)
1a00078a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
1a00078e:	f8c2 1284 	str.w	r1, [r2, #644]	; 0x284
		result = TRUE;
1a000792:	2001      	movs	r0, #1
1a000794:	e7e0      	b.n	1a000758 <Led_Off+0x10>
1a000796:	4a06      	ldr	r2, [pc, #24]	; (1a0007b0 <Led_Off+0x68>)
1a000798:	2102      	movs	r1, #2
1a00079a:	f8c2 1294 	str.w	r1, [r2, #660]	; 0x294
		result = TRUE;
1a00079e:	4618      	mov	r0, r3
1a0007a0:	e7e1      	b.n	1a000766 <Led_Off+0x1e>
1a0007a2:	4b03      	ldr	r3, [pc, #12]	; (1a0007b0 <Led_Off+0x68>)
1a0007a4:	2204      	movs	r2, #4
1a0007a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
		result = TRUE;
1a0007aa:	2001      	movs	r0, #1
1a0007ac:	e7dd      	b.n	1a00076a <Led_Off+0x22>
1a0007ae:	bf00      	nop
1a0007b0:	400f6000 	.word	0x400f6000

1a0007b4 <Led_Toggle>:

/** \brief Function to turn off a specific led */
uint8_t Led_Toggle(uint8_t led)
{
1a0007b4:	4603      	mov	r3, r0
	/** \details Function to toogle a specific led at the EDU-CIAA board.
	 * 	\params uint8_t led: this word represent a specific led based on the LED_COLOR enumeration.
	 * */
uint8_t result = FALSE;

	if (led == RED_LED)
1a0007b6:	2803      	cmp	r0, #3
1a0007b8:	d00e      	beq.n	1a0007d8 <Led_Toggle+0x24>
uint8_t result = FALSE;
1a0007ba:	2000      	movs	r0, #0
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED1_GPIO_PORT,LED1_GPIO_PIN);
		result = TRUE;
	}
	if (led == YELLOW_LED)
1a0007bc:	2b04      	cmp	r3, #4
1a0007be:	d012      	beq.n	1a0007e6 <Led_Toggle+0x32>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED2_GPIO_PORT,LED2_GPIO_PIN);
		result = TRUE;
	}
	if (led == GREEN_LED)
1a0007c0:	2b05      	cmp	r3, #5
1a0007c2:	d017      	beq.n	1a0007f4 <Led_Toggle+0x40>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED3_GPIO_PORT,LED3_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_R_LED)
1a0007c4:	b91b      	cbnz	r3, 1a0007ce <Led_Toggle+0x1a>
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinToggle(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->NOT[port] = (1 << pin);
1a0007c6:	2001      	movs	r0, #1
1a0007c8:	4a14      	ldr	r2, [pc, #80]	; (1a00081c <Led_Toggle+0x68>)
1a0007ca:	f8c2 0314 	str.w	r0, [r2, #788]	; 0x314
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_R_GPIO_PORT,LED_RGB_R_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_G_LED)
1a0007ce:	2b01      	cmp	r3, #1
1a0007d0:	d017      	beq.n	1a000802 <Led_Toggle+0x4e>
	{
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_G_GPIO_PORT,LED_RGB_G_GPIO_PIN);
		result = TRUE;
	}
	if (led == RGB_B_LED)
1a0007d2:	2b02      	cmp	r3, #2
1a0007d4:	d01b      	beq.n	1a00080e <Led_Toggle+0x5a>
		Chip_GPIO_SetPinToggle(LPC_GPIO_PORT,LED_RGB_B_GPIO_PORT,LED_RGB_B_GPIO_PIN);
		result = TRUE;
	}
	return result;
	
}
1a0007d6:	4770      	bx	lr
1a0007d8:	4a10      	ldr	r2, [pc, #64]	; (1a00081c <Led_Toggle+0x68>)
1a0007da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
1a0007de:	f8c2 1300 	str.w	r1, [r2, #768]	; 0x300
		result = TRUE;
1a0007e2:	2001      	movs	r0, #1
1a0007e4:	e7ea      	b.n	1a0007bc <Led_Toggle+0x8>
1a0007e6:	4a0d      	ldr	r2, [pc, #52]	; (1a00081c <Led_Toggle+0x68>)
1a0007e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
1a0007ec:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
		result = TRUE;
1a0007f0:	2001      	movs	r0, #1
1a0007f2:	e7e5      	b.n	1a0007c0 <Led_Toggle+0xc>
1a0007f4:	4a09      	ldr	r2, [pc, #36]	; (1a00081c <Led_Toggle+0x68>)
1a0007f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
1a0007fa:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
		result = TRUE;
1a0007fe:	2001      	movs	r0, #1
1a000800:	e7e0      	b.n	1a0007c4 <Led_Toggle+0x10>
1a000802:	4a06      	ldr	r2, [pc, #24]	; (1a00081c <Led_Toggle+0x68>)
1a000804:	2102      	movs	r1, #2
1a000806:	f8c2 1314 	str.w	r1, [r2, #788]	; 0x314
		result = TRUE;
1a00080a:	4618      	mov	r0, r3
1a00080c:	e7e1      	b.n	1a0007d2 <Led_Toggle+0x1e>
1a00080e:	4b03      	ldr	r3, [pc, #12]	; (1a00081c <Led_Toggle+0x68>)
1a000810:	2204      	movs	r2, #4
1a000812:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
		result = TRUE;
1a000816:	2001      	movs	r0, #1
1a000818:	e7dd      	b.n	1a0007d6 <Led_Toggle+0x22>
1a00081a:	bf00      	nop
1a00081c:	400f6000 	.word	0x400f6000

1a000820 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000820:	2200      	movs	r2, #0
1a000822:	2a05      	cmp	r2, #5
1a000824:	d81b      	bhi.n	1a00085e <Board_LED_Init+0x3e>
{
1a000826:	b510      	push	{r4, lr}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000828:	4b0d      	ldr	r3, [pc, #52]	; (1a000860 <Board_LED_Init+0x40>)
1a00082a:	f813 e012 	ldrb.w	lr, [r3, r2, lsl #1]
1a00082e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a000832:	f893 c001 	ldrb.w	ip, [r3, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a000836:	4b0b      	ldr	r3, [pc, #44]	; (1a000864 <Board_LED_Init+0x44>)
1a000838:	f50e 6400 	add.w	r4, lr, #2048	; 0x800
1a00083c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
1a000840:	2001      	movs	r0, #1
1a000842:	fa00 f00c 	lsl.w	r0, r0, ip
1a000846:	4301      	orrs	r1, r0
1a000848:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00084c:	eb03 134e 	add.w	r3, r3, lr, lsl #5
1a000850:	2100      	movs	r1, #0
1a000852:	f803 100c 	strb.w	r1, [r3, ip]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000856:	3201      	adds	r2, #1
1a000858:	2a05      	cmp	r2, #5
1a00085a:	d9e5      	bls.n	1a000828 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a00085c:	bd10      	pop	{r4, pc}
1a00085e:	4770      	bx	lr
1a000860:	1a002728 	.word	0x1a002728
1a000864:	400f4000 	.word	0x400f4000

1a000868 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000868:	2300      	movs	r3, #0
1a00086a:	2b03      	cmp	r3, #3
1a00086c:	d819      	bhi.n	1a0008a2 <Board_TEC_Init+0x3a>
{
1a00086e:	b410      	push	{r4}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000870:	490c      	ldr	r1, [pc, #48]	; (1a0008a4 <Board_TEC_Init+0x3c>)
1a000872:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000876:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00087a:	f891 c001 	ldrb.w	ip, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00087e:	4c0a      	ldr	r4, [pc, #40]	; (1a0008a8 <Board_TEC_Init+0x40>)
1a000880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000884:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000888:	2001      	movs	r0, #1
1a00088a:	fa00 f00c 	lsl.w	r0, r0, ip
1a00088e:	ea21 0100 	bic.w	r1, r1, r0
1a000892:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000896:	3301      	adds	r3, #1
1a000898:	2b03      	cmp	r3, #3
1a00089a:	d9e9      	bls.n	1a000870 <Board_TEC_Init+0x8>
    }
}
1a00089c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0008a0:	4770      	bx	lr
1a0008a2:	4770      	bx	lr
1a0008a4:	1a002720 	.word	0x1a002720
1a0008a8:	400f4000 	.word	0x400f4000

1a0008ac <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0008ac:	2300      	movs	r3, #0
1a0008ae:	2b08      	cmp	r3, #8
1a0008b0:	d819      	bhi.n	1a0008e6 <Board_GPIO_Init+0x3a>
{
1a0008b2:	b410      	push	{r4}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0008b4:	490c      	ldr	r1, [pc, #48]	; (1a0008e8 <Board_GPIO_Init+0x3c>)
1a0008b6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0008ba:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0008be:	f891 c001 	ldrb.w	ip, [r1, #1]
1a0008c2:	4c0a      	ldr	r4, [pc, #40]	; (1a0008ec <Board_GPIO_Init+0x40>)
1a0008c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0008c8:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0008cc:	2001      	movs	r0, #1
1a0008ce:	fa00 f00c 	lsl.w	r0, r0, ip
1a0008d2:	ea21 0100 	bic.w	r1, r1, r0
1a0008d6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0008da:	3301      	adds	r3, #1
1a0008dc:	2b08      	cmp	r3, #8
1a0008de:	d9e9      	bls.n	1a0008b4 <Board_GPIO_Init+0x8>
    }
}
1a0008e0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0008e4:	4770      	bx	lr
1a0008e6:	4770      	bx	lr
1a0008e8:	1a002734 	.word	0x1a002734
1a0008ec:	400f4000 	.word	0x400f4000

1a0008f0 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0008f0:	b510      	push	{r4, lr}
1a0008f2:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a0008f4:	4c08      	ldr	r4, [pc, #32]	; (1a000918 <Board_ADC_Init+0x28>)
1a0008f6:	4669      	mov	r1, sp
1a0008f8:	4620      	mov	r0, r4
1a0008fa:	f000 f903 	bl	1a000b04 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0008fe:	4a07      	ldr	r2, [pc, #28]	; (1a00091c <Board_ADC_Init+0x2c>)
1a000900:	4669      	mov	r1, sp
1a000902:	4620      	mov	r0, r4
1a000904:	f000 f91e 	bl	1a000b44 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000908:	2200      	movs	r2, #0
1a00090a:	4669      	mov	r1, sp
1a00090c:	4620      	mov	r0, r4
1a00090e:	f000 f932 	bl	1a000b76 <Chip_ADC_SetResolution>
}
1a000912:	b002      	add	sp, #8
1a000914:	bd10      	pop	{r4, pc}
1a000916:	bf00      	nop
1a000918:	400e3000 	.word	0x400e3000
1a00091c:	00061a80 	.word	0x00061a80

1a000920 <Board_SPI_Init>:
{
1a000920:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a000922:	4c0b      	ldr	r4, [pc, #44]	; (1a000950 <Board_SPI_Init+0x30>)
1a000924:	4620      	mov	r0, r4
1a000926:	f000 fc8b 	bl	1a001240 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00092a:	6863      	ldr	r3, [r4, #4]
1a00092c:	f023 0304 	bic.w	r3, r3, #4
1a000930:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000932:	6823      	ldr	r3, [r4, #0]
1a000934:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000938:	f043 0307 	orr.w	r3, r3, #7
1a00093c:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00093e:	4905      	ldr	r1, [pc, #20]	; (1a000954 <Board_SPI_Init+0x34>)
1a000940:	4620      	mov	r0, r4
1a000942:	f000 fc5c 	bl	1a0011fe <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000946:	6863      	ldr	r3, [r4, #4]
1a000948:	f043 0302 	orr.w	r3, r3, #2
1a00094c:	6063      	str	r3, [r4, #4]
}
1a00094e:	bd10      	pop	{r4, pc}
1a000950:	400c5000 	.word	0x400c5000
1a000954:	000186a0 	.word	0x000186a0

1a000958 <Board_I2C_Init>:
{
1a000958:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a00095a:	2000      	movs	r0, #0
1a00095c:	f000 fbfe 	bl	1a00115c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000960:	4b04      	ldr	r3, [pc, #16]	; (1a000974 <Board_I2C_Init+0x1c>)
1a000962:	f640 0208 	movw	r2, #2056	; 0x808
1a000966:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a00096a:	4903      	ldr	r1, [pc, #12]	; (1a000978 <Board_I2C_Init+0x20>)
1a00096c:	2000      	movs	r0, #0
1a00096e:	f000 fc09 	bl	1a001184 <Chip_I2C_SetClockRate>
}
1a000972:	bd08      	pop	{r3, pc}
1a000974:	40086000 	.word	0x40086000
1a000978:	000f4240 	.word	0x000f4240

1a00097c <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a00097c:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a00097e:	4c07      	ldr	r4, [pc, #28]	; (1a00099c <Board_Debug_Init+0x20>)
1a000980:	4620      	mov	r0, r4
1a000982:	f000 fd3b 	bl	1a0013fc <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000986:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00098a:	4620      	mov	r0, r4
1a00098c:	f000 fd60 	bl	1a001450 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000990:	2303      	movs	r3, #3
1a000992:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000994:	2301      	movs	r3, #1
1a000996:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a000998:	bd10      	pop	{r4, pc}
1a00099a:	bf00      	nop
1a00099c:	400c1000 	.word	0x400c1000

1a0009a0 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0009a0:	4b03      	ldr	r3, [pc, #12]	; (1a0009b0 <Board_UARTPutChar+0x10>)
1a0009a2:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0009a4:	f013 0f20 	tst.w	r3, #32
1a0009a8:	d0fa      	beq.n	1a0009a0 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0009aa:	4b01      	ldr	r3, [pc, #4]	; (1a0009b0 <Board_UARTPutChar+0x10>)
1a0009ac:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0009ae:	4770      	bx	lr
1a0009b0:	400c1000 	.word	0x400c1000

1a0009b4 <Board_UARTGetChar>:
	return pUART->LSR;
1a0009b4:	4b05      	ldr	r3, [pc, #20]	; (1a0009cc <Board_UARTGetChar+0x18>)
1a0009b6:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0009b8:	f013 0f01 	tst.w	r3, #1
1a0009bc:	d003      	beq.n	1a0009c6 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0009be:	4b03      	ldr	r3, [pc, #12]	; (1a0009cc <Board_UARTGetChar+0x18>)
1a0009c0:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0009c2:	b2c0      	uxtb	r0, r0
1a0009c4:	4770      	bx	lr
    }
    return EOF;
1a0009c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0009ca:	4770      	bx	lr
1a0009cc:	400c1000 	.word	0x400c1000

1a0009d0 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0009d0:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0009d2:	f7ff ffd3 	bl	1a00097c <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0009d6:	4808      	ldr	r0, [pc, #32]	; (1a0009f8 <Board_Init+0x28>)
1a0009d8:	f000 fbae 	bl	1a001138 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a0009dc:	f7ff ff66 	bl	1a0008ac <Board_GPIO_Init>
   Board_ADC_Init();
1a0009e0:	f7ff ff86 	bl	1a0008f0 <Board_ADC_Init>
   Board_SPI_Init();
1a0009e4:	f7ff ff9c 	bl	1a000920 <Board_SPI_Init>
   Board_I2C_Init();
1a0009e8:	f7ff ffb6 	bl	1a000958 <Board_I2C_Init>

   Board_LED_Init();
1a0009ec:	f7ff ff18 	bl	1a000820 <Board_LED_Init>
   Board_TEC_Init();
1a0009f0:	f7ff ff3a 	bl	1a000868 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a0009f4:	bd08      	pop	{r3, pc}
1a0009f6:	bf00      	nop
1a0009f8:	400f4000 	.word	0x400f4000

1a0009fc <__stdio_putchar>:
    Chip_ADC_EnableChannel(LPC_ADC0, curADCChannel, DISABLE);
    curADCChannel = 0xFF;
    return data;
}

void __stdio_putchar(int c) {
1a0009fc:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0009fe:	b2c0      	uxtb	r0, r0
1a000a00:	f7ff ffce 	bl	1a0009a0 <Board_UARTPutChar>
}
1a000a04:	bd08      	pop	{r3, pc}

1a000a06 <__stdio_getchar>:

int __stdio_getchar() {
1a000a06:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a000a08:	f7ff ffd4 	bl	1a0009b4 <Board_UARTGetChar>
}
1a000a0c:	bd08      	pop	{r3, pc}

1a000a0e <__stdio_init>:

void __stdio_init() {
1a000a0e:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000a10:	f7ff ffb4 	bl	1a00097c <Board_Debug_Init>
1a000a14:	bd08      	pop	{r3, pc}
	...

1a000a18 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000a18:	2300      	movs	r3, #0
1a000a1a:	e00c      	b.n	1a000a36 <Board_SetupMuxing+0x1e>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000a1c:	4a07      	ldr	r2, [pc, #28]	; (1a000a3c <Board_SetupMuxing+0x24>)
1a000a1e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000a22:	f812 c023 	ldrb.w	ip, [r2, r3, lsl #2]
1a000a26:	784a      	ldrb	r2, [r1, #1]
1a000a28:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000a2a:	eb02 124c 	add.w	r2, r2, ip, lsl #5
1a000a2e:	4904      	ldr	r1, [pc, #16]	; (1a000a40 <Board_SetupMuxing+0x28>)
1a000a30:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000a34:	3301      	adds	r3, #1
1a000a36:	2b1c      	cmp	r3, #28
1a000a38:	d9f0      	bls.n	1a000a1c <Board_SetupMuxing+0x4>


void Board_SetupMuxing(void)
{
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000a3a:	4770      	bx	lr
1a000a3c:	1a002750 	.word	0x1a002750
1a000a40:	40086000 	.word	0x40086000

1a000a44 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000a44:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000a46:	4a17      	ldr	r2, [pc, #92]	; (1a000aa4 <Board_SetupClocking+0x60>)
1a000a48:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000a4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000a50:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000a54:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000a58:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000a5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000a60:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000a64:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000a68:	2201      	movs	r2, #1
1a000a6a:	490f      	ldr	r1, [pc, #60]	; (1a000aa8 <Board_SetupClocking+0x64>)
1a000a6c:	2006      	movs	r0, #6
1a000a6e:	f000 fc03 	bl	1a001278 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000a72:	2400      	movs	r4, #0
1a000a74:	b14c      	cbz	r4, 1a000a8a <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000a76:	4b0b      	ldr	r3, [pc, #44]	; (1a000aa4 <Board_SetupClocking+0x60>)
1a000a78:	685a      	ldr	r2, [r3, #4]
1a000a7a:	f022 020c 	bic.w	r2, r2, #12
1a000a7e:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000a80:	685a      	ldr	r2, [r3, #4]
1a000a82:	f042 0203 	orr.w	r2, r2, #3
1a000a86:	605a      	str	r2, [r3, #4]
}
1a000a88:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000a8a:	4808      	ldr	r0, [pc, #32]	; (1a000aac <Board_SetupClocking+0x68>)
1a000a8c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000a90:	2301      	movs	r3, #1
1a000a92:	788a      	ldrb	r2, [r1, #2]
1a000a94:	7849      	ldrb	r1, [r1, #1]
1a000a96:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000a9a:	f000 faa7 	bl	1a000fec <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000a9e:	3401      	adds	r4, #1
1a000aa0:	e7e8      	b.n	1a000a74 <Board_SetupClocking+0x30>
1a000aa2:	bf00      	nop
1a000aa4:	40043000 	.word	0x40043000
1a000aa8:	0c28cb00 	.word	0x0c28cb00
1a000aac:	1a00274c 	.word	0x1a00274c

1a000ab0 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000ab0:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000ab2:	f7ff ffb1 	bl	1a000a18 <Board_SetupMuxing>
    Board_SetupClocking();
1a000ab6:	f7ff ffc5 	bl	1a000a44 <Board_SetupClocking>
}
1a000aba:	bd08      	pop	{r3, pc}

1a000abc <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000abc:	4b03      	ldr	r3, [pc, #12]	; (1a000acc <Chip_ADC_GetClockIndex+0x10>)
1a000abe:	4298      	cmp	r0, r3
1a000ac0:	d001      	beq.n	1a000ac6 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000ac2:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000ac4:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000ac6:	2004      	movs	r0, #4
1a000ac8:	4770      	bx	lr
1a000aca:	bf00      	nop
1a000acc:	400e4000 	.word	0x400e4000

1a000ad0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000ad0:	b570      	push	{r4, r5, r6, lr}
1a000ad2:	460d      	mov	r5, r1
1a000ad4:	4614      	mov	r4, r2
1a000ad6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000ad8:	f7ff fff0 	bl	1a000abc <Chip_ADC_GetClockIndex>
1a000adc:	f000 fb06 	bl	1a0010ec <Chip_Clock_GetRate>
	if (burstMode) {
1a000ae0:	b155      	cbz	r5, 1a000af8 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000ae2:	fb06 f404 	mul.w	r4, r6, r4
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000ae6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000aea:	0064      	lsls	r4, r4, #1
1a000aec:	fbb0 f0f4 	udiv	r0, r0, r4
1a000af0:	b2c0      	uxtb	r0, r0
1a000af2:	3801      	subs	r0, #1
	return div;
}
1a000af4:	b2c0      	uxtb	r0, r0
1a000af6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000af8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000afc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000b00:	e7f1      	b.n	1a000ae6 <getClkDiv+0x16>
	...

1a000b04 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000b04:	b538      	push	{r3, r4, r5, lr}
1a000b06:	4605      	mov	r5, r0
1a000b08:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000b0a:	f7ff ffd7 	bl	1a000abc <Chip_ADC_GetClockIndex>
1a000b0e:	2301      	movs	r3, #1
1a000b10:	461a      	mov	r2, r3
1a000b12:	4619      	mov	r1, r3
1a000b14:	f000 fab2 	bl	1a00107c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000b18:	2100      	movs	r1, #0
1a000b1a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000b1c:	4a08      	ldr	r2, [pc, #32]	; (1a000b40 <Chip_ADC_Init+0x3c>)
1a000b1e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000b20:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000b22:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000b24:	230b      	movs	r3, #11
1a000b26:	4628      	mov	r0, r5
1a000b28:	f7ff ffd2 	bl	1a000ad0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000b2c:	0200      	lsls	r0, r0, #8
1a000b2e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000b32:	7923      	ldrb	r3, [r4, #4]
1a000b34:	045b      	lsls	r3, r3, #17
1a000b36:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000b3a:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000b3c:	602b      	str	r3, [r5, #0]
}
1a000b3e:	bd38      	pop	{r3, r4, r5, pc}
1a000b40:	00061a80 	.word	0x00061a80

1a000b44 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000b44:	b570      	push	{r4, r5, r6, lr}
1a000b46:	4605      	mov	r5, r0
1a000b48:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000b4a:	6804      	ldr	r4, [r0, #0]
1a000b4c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000b50:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000b54:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000b56:	790b      	ldrb	r3, [r1, #4]
1a000b58:	f1c3 030b 	rsb	r3, r3, #11
1a000b5c:	b2db      	uxtb	r3, r3
1a000b5e:	7949      	ldrb	r1, [r1, #5]
1a000b60:	f7ff ffb6 	bl	1a000ad0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000b64:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000b68:	7933      	ldrb	r3, [r6, #4]
1a000b6a:	045b      	lsls	r3, r3, #17
1a000b6c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000b70:	4323      	orrs	r3, r4
	pADC->CR = cr;
1a000b72:	602b      	str	r3, [r5, #0]
}
1a000b74:	bd70      	pop	{r4, r5, r6, pc}

1a000b76 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000b76:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000b78:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000b7a:	680a      	ldr	r2, [r1, #0]
1a000b7c:	f7ff ffe2 	bl	1a000b44 <Chip_ADC_SetSampleRate>
}
1a000b80:	bd08      	pop	{r3, pc}
	...

1a000b84 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000b84:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000b86:	2069      	movs	r0, #105	; 0x69
1a000b88:	f000 fab0 	bl	1a0010ec <Chip_Clock_GetRate>
1a000b8c:	4b01      	ldr	r3, [pc, #4]	; (1a000b94 <SystemCoreClockUpdate+0x10>)
1a000b8e:	6018      	str	r0, [r3, #0]
}
1a000b90:	bd08      	pop	{r3, pc}
1a000b92:	bf00      	nop
1a000b94:	100000a8 	.word	0x100000a8

1a000b98 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000b98:	b570      	push	{r4, r5, r6, lr}
1a000b9a:	4686      	mov	lr, r0

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000b9c:	680b      	ldr	r3, [r1, #0]
1a000b9e:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000ba2:	d002      	beq.n	1a000baa <pll_calc_divs+0x12>
		ppll->ctrl &= ~(1 << 6);
1a000ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000ba8:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000baa:	4675      	mov	r5, lr
1a000bac:	2401      	movs	r4, #1
1a000bae:	e03c      	b.n	1a000c2a <pll_calc_divs+0x92>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000bb0:	694b      	ldr	r3, [r1, #20]
1a000bb2:	fb02 f303 	mul.w	r3, r2, r3
1a000bb6:	fbb3 f3f4 	udiv	r3, r3, r4
1a000bba:	e01e      	b.n	1a000bfa <pll_calc_divs+0x62>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000bbc:	4618      	mov	r0, r3
	if (val < 0)
1a000bbe:	ebbe 0600 	subs.w	r6, lr, r0
1a000bc2:	d428      	bmi.n	1a000c16 <pll_calc_divs+0x7e>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000bc4:	42b5      	cmp	r5, r6
1a000bc6:	d907      	bls.n	1a000bd8 <pll_calc_divs+0x40>
					ppll->nsel = n;
1a000bc8:	608c      	str	r4, [r1, #8]
					ppll->psel = p + 1;
1a000bca:	f10c 0501 	add.w	r5, ip, #1
1a000bce:	60cd      	str	r5, [r1, #12]
					ppll->msel = m;
1a000bd0:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000bd2:	6188      	str	r0, [r1, #24]
					ppll->fcco = fcco;
1a000bd4:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000bd6:	4635      	mov	r5, r6
			for (m = 1; m <= 256; m++) {
1a000bd8:	3201      	adds	r2, #1
1a000bda:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000bde:	dc1c      	bgt.n	1a000c1a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a000be0:	680e      	ldr	r6, [r1, #0]
1a000be2:	f016 0f40 	tst.w	r6, #64	; 0x40
1a000be6:	d0e3      	beq.n	1a000bb0 <pll_calc_divs+0x18>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000be8:	f10c 0301 	add.w	r3, ip, #1
1a000bec:	fa02 f303 	lsl.w	r3, r2, r3
1a000bf0:	6948      	ldr	r0, [r1, #20]
1a000bf2:	fb00 f303 	mul.w	r3, r0, r3
1a000bf6:	fbb3 f3f4 	udiv	r3, r3, r4
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000bfa:	480f      	ldr	r0, [pc, #60]	; (1a000c38 <pll_calc_divs+0xa0>)
1a000bfc:	4283      	cmp	r3, r0
1a000bfe:	d9eb      	bls.n	1a000bd8 <pll_calc_divs+0x40>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000c00:	480e      	ldr	r0, [pc, #56]	; (1a000c3c <pll_calc_divs+0xa4>)
1a000c02:	4283      	cmp	r3, r0
1a000c04:	d809      	bhi.n	1a000c1a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000c06:	f016 0f80 	tst.w	r6, #128	; 0x80
1a000c0a:	d1d7      	bne.n	1a000bbc <pll_calc_divs+0x24>
					fout = fcco >> (p + 1);
1a000c0c:	f10c 0001 	add.w	r0, ip, #1
1a000c10:	fa23 f000 	lsr.w	r0, r3, r0
1a000c14:	e7d3      	b.n	1a000bbe <pll_calc_divs+0x26>
		return -val;
1a000c16:	4276      	negs	r6, r6
1a000c18:	e7d4      	b.n	1a000bc4 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000c1a:	f10c 0c01 	add.w	ip, ip, #1
1a000c1e:	f1bc 0f03 	cmp.w	ip, #3
1a000c22:	dc01      	bgt.n	1a000c28 <pll_calc_divs+0x90>
			for (m = 1; m <= 256; m++) {
1a000c24:	2201      	movs	r2, #1
1a000c26:	e7d8      	b.n	1a000bda <pll_calc_divs+0x42>
	for (n = 1; n <= 4; n++) {
1a000c28:	3401      	adds	r4, #1
1a000c2a:	2c04      	cmp	r4, #4
1a000c2c:	dc02      	bgt.n	1a000c34 <pll_calc_divs+0x9c>
		for (p = 0; p < 4; p ++) {
1a000c2e:	f04f 0c00 	mov.w	ip, #0
1a000c32:	e7f4      	b.n	1a000c1e <pll_calc_divs+0x86>
				}
			}
		}
	}
}
1a000c34:	bd70      	pop	{r4, r5, r6, pc}
1a000c36:	bf00      	nop
1a000c38:	094c5eff 	.word	0x094c5eff
1a000c3c:	1312d000 	.word	0x1312d000

1a000c40 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000c40:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000c42:	b09d      	sub	sp, #116	; 0x74
1a000c44:	4605      	mov	r5, r0
1a000c46:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000c48:	2260      	movs	r2, #96	; 0x60
1a000c4a:	2100      	movs	r1, #0
1a000c4c:	a801      	add	r0, sp, #4
1a000c4e:	f000 fe05 	bl	1a00185c <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000c52:	2380      	movs	r3, #128	; 0x80
1a000c54:	9301      	str	r3, [sp, #4]
	pll[0].fin = ppll->fin;
1a000c56:	6963      	ldr	r3, [r4, #20]
1a000c58:	9306      	str	r3, [sp, #24]
	pll[0].srcin = ppll->srcin;
1a000c5a:	7923      	ldrb	r3, [r4, #4]
1a000c5c:	f88d 3008 	strb.w	r3, [sp, #8]
	pll_calc_divs(freq, &pll[0]);
1a000c60:	a901      	add	r1, sp, #4
1a000c62:	4628      	mov	r0, r5
1a000c64:	f7ff ff98 	bl	1a000b98 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000c68:	9b07      	ldr	r3, [sp, #28]
1a000c6a:	42ab      	cmp	r3, r5
1a000c6c:	d02a      	beq.n	1a000cc4 <pll_get_frac+0x84>
	if (val < 0)
1a000c6e:	1aeb      	subs	r3, r5, r3
1a000c70:	d431      	bmi.n	1a000cd6 <pll_get_frac+0x96>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000c72:	461e      	mov	r6, r3
1a000c74:	9319      	str	r3, [sp, #100]	; 0x64

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000c76:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000c7c:	9311      	str	r3, [sp, #68]	; 0x44
	pll[2].fin = ppll->fin;
1a000c7e:	6963      	ldr	r3, [r4, #20]
1a000c80:	9316      	str	r3, [sp, #88]	; 0x58
	pll[2].srcin = ppll->srcin;
1a000c82:	7923      	ldrb	r3, [r4, #4]
1a000c84:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	pll_calc_divs(freq, &pll[2]);
1a000c88:	a911      	add	r1, sp, #68	; 0x44
1a000c8a:	4628      	mov	r0, r5
1a000c8c:	f7ff ff84 	bl	1a000b98 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a000c92:	42ab      	cmp	r3, r5
1a000c94:	d021      	beq.n	1a000cda <pll_get_frac+0x9a>
	if (val < 0)
1a000c96:	1aeb      	subs	r3, r5, r3
1a000c98:	d427      	bmi.n	1a000cea <pll_get_frac+0xaa>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000c9a:	461f      	mov	r7, r3
1a000c9c:	931b      	str	r3, [sp, #108]	; 0x6c
	
	if (freq <= 110000000) {
1a000c9e:	4b2b      	ldr	r3, [pc, #172]	; (1a000d4c <pll_get_frac+0x10c>)
1a000ca0:	429d      	cmp	r5, r3
1a000ca2:	d924      	bls.n	1a000cee <pll_get_frac+0xae>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000ca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	if (val < 0)
1a000ca6:	1aed      	subs	r5, r5, r3
1a000ca8:	d434      	bmi.n	1a000d14 <pll_get_frac+0xd4>
	diff[1] = ABS(freq - pll[1].fout);
1a000caa:	951a      	str	r5, [sp, #104]	; 0x68

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000cac:	42ae      	cmp	r6, r5
1a000cae:	dc3b      	bgt.n	1a000d28 <pll_get_frac+0xe8>
		if (diff[0] <= diff[2]) {
1a000cb0:	42be      	cmp	r6, r7
1a000cb2:	dc31      	bgt.n	1a000d18 <pll_get_frac+0xd8>
			*ppll = pll[0];
1a000cb4:	ad01      	add	r5, sp, #4
1a000cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000cba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000cbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000cc2:	e006      	b.n	1a000cd2 <pll_get_frac+0x92>
		*ppll = pll[0];
1a000cc4:	ad01      	add	r5, sp, #4
1a000cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000cca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000cce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000cd2:	b01d      	add	sp, #116	; 0x74
1a000cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000cd6:	425b      	negs	r3, r3
1a000cd8:	e7cb      	b.n	1a000c72 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000cda:	ad11      	add	r5, sp, #68	; 0x44
1a000cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ce0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000ce8:	e7f3      	b.n	1a000cd2 <pll_get_frac+0x92>
		return -val;
1a000cea:	425b      	negs	r3, r3
1a000cec:	e7d5      	b.n	1a000c9a <pll_get_frac+0x5a>
		pll[1].ctrl = (1 << 6);
1a000cee:	2340      	movs	r3, #64	; 0x40
1a000cf0:	9309      	str	r3, [sp, #36]	; 0x24
		pll[1].fin = ppll->fin;
1a000cf2:	6963      	ldr	r3, [r4, #20]
1a000cf4:	930e      	str	r3, [sp, #56]	; 0x38
		pll_calc_divs(freq, &pll[1]);
1a000cf6:	a909      	add	r1, sp, #36	; 0x24
1a000cf8:	4628      	mov	r0, r5
1a000cfa:	f7ff ff4d 	bl	1a000b98 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000cfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a000d00:	42ab      	cmp	r3, r5
1a000d02:	d1cf      	bne.n	1a000ca4 <pll_get_frac+0x64>
			*ppll = pll[1];
1a000d04:	ad09      	add	r5, sp, #36	; 0x24
1a000d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000d12:	e7de      	b.n	1a000cd2 <pll_get_frac+0x92>
		return -val;
1a000d14:	426d      	negs	r5, r5
1a000d16:	e7c8      	b.n	1a000caa <pll_get_frac+0x6a>
			*ppll = pll[2];
1a000d18:	ad11      	add	r5, sp, #68	; 0x44
1a000d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000d26:	e7d4      	b.n	1a000cd2 <pll_get_frac+0x92>
		if (diff[1] <= diff[2]) {
1a000d28:	42af      	cmp	r7, r5
1a000d2a:	db07      	blt.n	1a000d3c <pll_get_frac+0xfc>
			*ppll = pll[1];
1a000d2c:	ad09      	add	r5, sp, #36	; 0x24
1a000d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000d3a:	e7ca      	b.n	1a000cd2 <pll_get_frac+0x92>
			*ppll = pll[2];
1a000d3c:	ad11      	add	r5, sp, #68	; 0x44
1a000d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000d4a:	e7c2      	b.n	1a000cd2 <pll_get_frac+0x92>
1a000d4c:	068e7780 	.word	0x068e7780

1a000d50 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000d50:	4684      	mov	ip, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000d52:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000d54:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000d56:	281c      	cmp	r0, #28
1a000d58:	d120      	bne.n	1a000d9c <Chip_Clock_FindBaseClock+0x4c>
{
1a000d5a:	b410      	push	{r4}
1a000d5c:	e002      	b.n	1a000d64 <Chip_Clock_FindBaseClock+0x14>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000d5e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000d60:	281c      	cmp	r0, #28
1a000d62:	d118      	bne.n	1a000d96 <Chip_Clock_FindBaseClock+0x46>
1a000d64:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000d68:	4a0d      	ldr	r2, [pc, #52]	; (1a000da0 <Chip_Clock_FindBaseClock+0x50>)
1a000d6a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
1a000d6e:	7911      	ldrb	r1, [r2, #4]
1a000d70:	4281      	cmp	r1, r0
1a000d72:	d010      	beq.n	1a000d96 <Chip_Clock_FindBaseClock+0x46>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000d74:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000d78:	4c09      	ldr	r4, [pc, #36]	; (1a000da0 <Chip_Clock_FindBaseClock+0x50>)
1a000d7a:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
1a000d7e:	4562      	cmp	r2, ip
1a000d80:	d8ed      	bhi.n	1a000d5e <Chip_Clock_FindBaseClock+0xe>
1a000d82:	eb03 0443 	add.w	r4, r3, r3, lsl #1
1a000d86:	4a06      	ldr	r2, [pc, #24]	; (1a000da0 <Chip_Clock_FindBaseClock+0x50>)
1a000d88:	eb02 0244 	add.w	r2, r2, r4, lsl #1
1a000d8c:	8852      	ldrh	r2, [r2, #2]
1a000d8e:	4562      	cmp	r2, ip
1a000d90:	d3e5      	bcc.n	1a000d5e <Chip_Clock_FindBaseClock+0xe>
			baseclk = periph_to_base[i].clkbase;
1a000d92:	4608      	mov	r0, r1
1a000d94:	e7e4      	b.n	1a000d60 <Chip_Clock_FindBaseClock+0x10>
		}
	}

	return baseclk;
}
1a000d96:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000d9a:	4770      	bx	lr
1a000d9c:	4770      	bx	lr
1a000d9e:	bf00      	nop
1a000da0:	1a0027cc 	.word	0x1a0027cc

1a000da4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000da4:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000daa:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000dac:	4a0d      	ldr	r2, [pc, #52]	; (1a000de4 <Chip_Clock_EnableCrystal+0x40>)
1a000dae:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000db0:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000db4:	6992      	ldr	r2, [r2, #24]
1a000db6:	428a      	cmp	r2, r1
1a000db8:	d001      	beq.n	1a000dbe <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000dba:	4a0a      	ldr	r2, [pc, #40]	; (1a000de4 <Chip_Clock_EnableCrystal+0x40>)
1a000dbc:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000dbe:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000dc2:	4a09      	ldr	r2, [pc, #36]	; (1a000de8 <Chip_Clock_EnableCrystal+0x44>)
1a000dc4:	6811      	ldr	r1, [r2, #0]
1a000dc6:	4a09      	ldr	r2, [pc, #36]	; (1a000dec <Chip_Clock_EnableCrystal+0x48>)
1a000dc8:	4291      	cmp	r1, r2
1a000dca:	d901      	bls.n	1a000dd0 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000dcc:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000dd0:	4a04      	ldr	r2, [pc, #16]	; (1a000de4 <Chip_Clock_EnableCrystal+0x40>)
1a000dd2:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000dd4:	9b01      	ldr	r3, [sp, #4]
1a000dd6:	1e5a      	subs	r2, r3, #1
1a000dd8:	9201      	str	r2, [sp, #4]
1a000dda:	2b00      	cmp	r3, #0
1a000ddc:	d1fa      	bne.n	1a000dd4 <Chip_Clock_EnableCrystal+0x30>
}
1a000dde:	b002      	add	sp, #8
1a000de0:	4770      	bx	lr
1a000de2:	bf00      	nop
1a000de4:	40050000 	.word	0x40050000
1a000de8:	1a002748 	.word	0x1a002748
1a000dec:	01312cff 	.word	0x01312cff

1a000df0 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000df0:	3012      	adds	r0, #18
1a000df2:	4b05      	ldr	r3, [pc, #20]	; (1a000e08 <Chip_Clock_GetDividerSource+0x18>)
1a000df4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000df8:	f010 0f01 	tst.w	r0, #1
1a000dfc:	d102      	bne.n	1a000e04 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000dfe:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000e02:	4770      	bx	lr
		return CLKINPUT_PD;
1a000e04:	2011      	movs	r0, #17
}
1a000e06:	4770      	bx	lr
1a000e08:	40050000 	.word	0x40050000

1a000e0c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000e0c:	f100 0212 	add.w	r2, r0, #18
1a000e10:	4b03      	ldr	r3, [pc, #12]	; (1a000e20 <Chip_Clock_GetDividerDivisor+0x14>)
1a000e12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000e16:	4b03      	ldr	r3, [pc, #12]	; (1a000e24 <Chip_Clock_GetDividerDivisor+0x18>)
1a000e18:	5c18      	ldrb	r0, [r3, r0]
}
1a000e1a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000e1e:	4770      	bx	lr
1a000e20:	40050000 	.word	0x40050000
1a000e24:	1a0027c4 	.word	0x1a0027c4

1a000e28 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000e28:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000e2a:	2810      	cmp	r0, #16
1a000e2c:	d80a      	bhi.n	1a000e44 <Chip_Clock_GetClockInputHz+0x1c>
1a000e2e:	e8df f000 	tbb	[pc, r0]
1a000e32:	0b44      	.short	0x0b44
1a000e34:	0921180d 	.word	0x0921180d
1a000e38:	2d2a2724 	.word	0x2d2a2724
1a000e3c:	34300909 	.word	0x34300909
1a000e40:	3c38      	.short	0x3c38
1a000e42:	40          	.byte	0x40
1a000e43:	00          	.byte	0x00
1a000e44:	2000      	movs	r0, #0
	default:
		break;
	}

	return rate;
}
1a000e46:	bd08      	pop	{r3, pc}
		rate = CGU_IRC_FREQ;
1a000e48:	481e      	ldr	r0, [pc, #120]	; (1a000ec4 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000e4a:	e7fc      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000e4c:	4b1e      	ldr	r3, [pc, #120]	; (1a000ec8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000e4e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000e52:	f003 0307 	and.w	r3, r3, #7
1a000e56:	2b04      	cmp	r3, #4
1a000e58:	d001      	beq.n	1a000e5e <Chip_Clock_GetClockInputHz+0x36>
			rate = 25000000;
1a000e5a:	481c      	ldr	r0, [pc, #112]	; (1a000ecc <Chip_Clock_GetClockInputHz+0xa4>)
1a000e5c:	e7f3      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
	uint32_t rate = 0;
1a000e5e:	2000      	movs	r0, #0
1a000e60:	e7f1      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000e62:	4b19      	ldr	r3, [pc, #100]	; (1a000ec8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000e64:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000e68:	f003 0307 	and.w	r3, r3, #7
1a000e6c:	2b04      	cmp	r3, #4
1a000e6e:	d027      	beq.n	1a000ec0 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000e70:	4816      	ldr	r0, [pc, #88]	; (1a000ecc <Chip_Clock_GetClockInputHz+0xa4>)
1a000e72:	e7e8      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
		rate = ExtRateIn;
1a000e74:	4b16      	ldr	r3, [pc, #88]	; (1a000ed0 <Chip_Clock_GetClockInputHz+0xa8>)
1a000e76:	6818      	ldr	r0, [r3, #0]
		break;
1a000e78:	e7e5      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
		rate = OscRateIn;
1a000e7a:	4b16      	ldr	r3, [pc, #88]	; (1a000ed4 <Chip_Clock_GetClockInputHz+0xac>)
1a000e7c:	6818      	ldr	r0, [r3, #0]
		break;
1a000e7e:	e7e2      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000e80:	4b15      	ldr	r3, [pc, #84]	; (1a000ed8 <Chip_Clock_GetClockInputHz+0xb0>)
1a000e82:	6818      	ldr	r0, [r3, #0]
		break;
1a000e84:	e7df      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000e86:	4b14      	ldr	r3, [pc, #80]	; (1a000ed8 <Chip_Clock_GetClockInputHz+0xb0>)
1a000e88:	6858      	ldr	r0, [r3, #4]
		break;
1a000e8a:	e7dc      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetMainPLLHz();
1a000e8c:	f000 f868 	bl	1a000f60 <Chip_Clock_GetMainPLLHz>
		break;
1a000e90:	e7d9      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000e92:	2100      	movs	r1, #0
1a000e94:	f000 f898 	bl	1a000fc8 <Chip_Clock_GetDivRate>
		break;
1a000e98:	e7d5      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000e9a:	2101      	movs	r1, #1
1a000e9c:	f000 f894 	bl	1a000fc8 <Chip_Clock_GetDivRate>
		break;
1a000ea0:	e7d1      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000ea2:	2102      	movs	r1, #2
1a000ea4:	f000 f890 	bl	1a000fc8 <Chip_Clock_GetDivRate>
		break;
1a000ea8:	e7cd      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000eaa:	2103      	movs	r1, #3
1a000eac:	f000 f88c 	bl	1a000fc8 <Chip_Clock_GetDivRate>
		break;
1a000eb0:	e7c9      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000eb2:	2104      	movs	r1, #4
1a000eb4:	f000 f888 	bl	1a000fc8 <Chip_Clock_GetDivRate>
		break;
1a000eb8:	e7c5      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
		rate = CRYSTAL_32K_FREQ_IN;
1a000eba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000ebe:	e7c2      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
			rate = 50000000; /* RMII uses 50 MHz */
1a000ec0:	4806      	ldr	r0, [pc, #24]	; (1a000edc <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000ec2:	e7c0      	b.n	1a000e46 <Chip_Clock_GetClockInputHz+0x1e>
1a000ec4:	00b71b00 	.word	0x00b71b00
1a000ec8:	40043000 	.word	0x40043000
1a000ecc:	017d7840 	.word	0x017d7840
1a000ed0:	1a00271c 	.word	0x1a00271c
1a000ed4:	1a002748 	.word	0x1a002748
1a000ed8:	100000ac 	.word	0x100000ac
1a000edc:	02faf080 	.word	0x02faf080

1a000ee0 <Chip_Clock_CalcMainPLLValue>:
{
1a000ee0:	b538      	push	{r3, r4, r5, lr}
1a000ee2:	4605      	mov	r5, r0
1a000ee4:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000ee6:	7908      	ldrb	r0, [r1, #4]
1a000ee8:	f7ff ff9e 	bl	1a000e28 <Chip_Clock_GetClockInputHz>
1a000eec:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000eee:	4b19      	ldr	r3, [pc, #100]	; (1a000f54 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000ef0:	442b      	add	r3, r5
1a000ef2:	4a19      	ldr	r2, [pc, #100]	; (1a000f58 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000ef4:	4293      	cmp	r3, r2
1a000ef6:	d821      	bhi.n	1a000f3c <Chip_Clock_CalcMainPLLValue+0x5c>
1a000ef8:	b318      	cbz	r0, 1a000f42 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000efa:	2380      	movs	r3, #128	; 0x80
1a000efc:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000efe:	2300      	movs	r3, #0
1a000f00:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000f02:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000f04:	fbb5 f3f0 	udiv	r3, r5, r0
1a000f08:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000f0a:	4a14      	ldr	r2, [pc, #80]	; (1a000f5c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000f0c:	4295      	cmp	r5, r2
1a000f0e:	d903      	bls.n	1a000f18 <Chip_Clock_CalcMainPLLValue+0x38>
1a000f10:	fb00 f303 	mul.w	r3, r0, r3
1a000f14:	42ab      	cmp	r3, r5
1a000f16:	d007      	beq.n	1a000f28 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000f18:	4621      	mov	r1, r4
1a000f1a:	4628      	mov	r0, r5
1a000f1c:	f7ff fe90 	bl	1a000c40 <pll_get_frac>
		if (!ppll->nsel) {
1a000f20:	68a3      	ldr	r3, [r4, #8]
1a000f22:	b18b      	cbz	r3, 1a000f48 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000f24:	3b01      	subs	r3, #1
1a000f26:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000f28:	6923      	ldr	r3, [r4, #16]
1a000f2a:	b183      	cbz	r3, 1a000f4e <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000f2c:	68e2      	ldr	r2, [r4, #12]
1a000f2e:	b10a      	cbz	r2, 1a000f34 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000f30:	3a01      	subs	r2, #1
1a000f32:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000f34:	3b01      	subs	r3, #1
1a000f36:	6123      	str	r3, [r4, #16]
	return 0;
1a000f38:	2000      	movs	r0, #0
}
1a000f3a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f40:	e7fb      	b.n	1a000f3a <Chip_Clock_CalcMainPLLValue+0x5a>
1a000f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f46:	e7f8      	b.n	1a000f3a <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f4c:	e7f5      	b.n	1a000f3a <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f52:	e7f2      	b.n	1a000f3a <Chip_Clock_CalcMainPLLValue+0x5a>
1a000f54:	ff6b3a10 	.word	0xff6b3a10
1a000f58:	0b940510 	.word	0x0b940510
1a000f5c:	094c5eff 	.word	0x094c5eff

1a000f60 <Chip_Clock_GetMainPLLHz>:
{
1a000f60:	b530      	push	{r4, r5, lr}
1a000f62:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000f64:	4d16      	ldr	r5, [pc, #88]	; (1a000fc0 <Chip_Clock_GetMainPLLHz+0x60>)
1a000f66:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000f68:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000f6c:	f7ff ff5c 	bl	1a000e28 <Chip_Clock_GetClockInputHz>
1a000f70:	4684      	mov	ip, r0
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000f72:	4b14      	ldr	r3, [pc, #80]	; (1a000fc4 <Chip_Clock_GetMainPLLHz+0x64>)
1a000f74:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000f76:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a000f78:	f010 0001 	ands.w	r0, r0, #1
1a000f7c:	d01d      	beq.n	1a000fba <Chip_Clock_GetMainPLLHz+0x5a>
	msel = (PLLReg >> 16) & 0xFF;
1a000f7e:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000f82:	f3c4 3301 	ubfx	r3, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000f86:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000f8a:	f3c4 1080 	ubfx	r0, r4, #6, #1
	m = msel + 1;
1a000f8e:	3201      	adds	r2, #1
	n = nsel + 1;
1a000f90:	3301      	adds	r3, #1
	p = ptab[psel];
1a000f92:	3108      	adds	r1, #8
1a000f94:	4469      	add	r1, sp
1a000f96:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000f9a:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000f9e:	d108      	bne.n	1a000fb2 <Chip_Clock_GetMainPLLHz+0x52>
1a000fa0:	b938      	cbnz	r0, 1a000fb2 <Chip_Clock_GetMainPLLHz+0x52>
	return (m / (2 * p)) * (freq / n);
1a000fa2:	0049      	lsls	r1, r1, #1
1a000fa4:	fbb2 f2f1 	udiv	r2, r2, r1
1a000fa8:	fbbc f0f3 	udiv	r0, ip, r3
1a000fac:	fb02 f000 	mul.w	r0, r2, r0
1a000fb0:	e003      	b.n	1a000fba <Chip_Clock_GetMainPLLHz+0x5a>
		return m * (freq / n);
1a000fb2:	fbbc f3f3 	udiv	r3, ip, r3
1a000fb6:	fb02 f003 	mul.w	r0, r2, r3
}
1a000fba:	b003      	add	sp, #12
1a000fbc:	bd30      	pop	{r4, r5, pc}
1a000fbe:	bf00      	nop
1a000fc0:	40050000 	.word	0x40050000
1a000fc4:	08040201 	.word	0x08040201

1a000fc8 <Chip_Clock_GetDivRate>:
{
1a000fc8:	b538      	push	{r3, r4, r5, lr}
1a000fca:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000fcc:	4608      	mov	r0, r1
1a000fce:	f7ff ff0f 	bl	1a000df0 <Chip_Clock_GetDividerSource>
1a000fd2:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000fd4:	4620      	mov	r0, r4
1a000fd6:	f7ff ff19 	bl	1a000e0c <Chip_Clock_GetDividerDivisor>
1a000fda:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000fdc:	4628      	mov	r0, r5
1a000fde:	f7ff ff23 	bl	1a000e28 <Chip_Clock_GetClockInputHz>
1a000fe2:	3401      	adds	r4, #1
}
1a000fe4:	fbb0 f0f4 	udiv	r0, r0, r4
1a000fe8:	bd38      	pop	{r3, r4, r5, pc}
	...

1a000fec <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000fec:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000fee:	f100 0c16 	add.w	ip, r0, #22
1a000ff2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
1a000ff6:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
1a000ffa:	f50c 2ca0 	add.w	ip, ip, #327680	; 0x50000
1a000ffe:	f8dc 4004 	ldr.w	r4, [ip, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001002:	281b      	cmp	r0, #27
1a001004:	d813      	bhi.n	1a00102e <Chip_Clock_SetBaseClock+0x42>
		if (Input != CLKINPUT_PD) {
1a001006:	2911      	cmp	r1, #17
1a001008:	d01a      	beq.n	1a001040 <Chip_Clock_SetBaseClock+0x54>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00100a:	4d0e      	ldr	r5, [pc, #56]	; (1a001044 <Chip_Clock_SetBaseClock+0x58>)
1a00100c:	4025      	ands	r5, r4

			if (autoblocken) {
1a00100e:	b10a      	cbz	r2, 1a001014 <Chip_Clock_SetBaseClock+0x28>
				reg |= (1 << 11);
1a001010:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001014:	b10b      	cbz	r3, 1a00101a <Chip_Clock_SetBaseClock+0x2e>
				reg |= (1 << 0);
1a001016:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00101a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00101e:	3016      	adds	r0, #22
1a001020:	0080      	lsls	r0, r0, #2
1a001022:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001026:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00102a:	6045      	str	r5, [r0, #4]
1a00102c:	e008      	b.n	1a001040 <Chip_Clock_SetBaseClock+0x54>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00102e:	f044 0401 	orr.w	r4, r4, #1
1a001032:	3016      	adds	r0, #22
1a001034:	0080      	lsls	r0, r0, #2
1a001036:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00103a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00103e:	6044      	str	r4, [r0, #4]
	}
}
1a001040:	bc30      	pop	{r4, r5}
1a001042:	4770      	bx	lr
1a001044:	e0fff7fe 	.word	0xe0fff7fe

1a001048 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001048:	281b      	cmp	r0, #27
1a00104a:	d80d      	bhi.n	1a001068 <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a00104c:	f100 0316 	add.w	r3, r0, #22
1a001050:	009b      	lsls	r3, r3, #2
1a001052:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a001056:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
1a00105a:	6858      	ldr	r0, [r3, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00105c:	f010 0f01 	tst.w	r0, #1
1a001060:	d104      	bne.n	1a00106c <Chip_Clock_GetBaseClock+0x24>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001062:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001066:	4770      	bx	lr
		return CLKINPUT_PD;
1a001068:	2011      	movs	r0, #17
1a00106a:	4770      	bx	lr
		return CLKINPUT_PD;
1a00106c:	2011      	movs	r0, #17
}
1a00106e:	4770      	bx	lr

1a001070 <Chip_Clock_GetBaseClocktHz>:
{
1a001070:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001072:	f7ff ffe9 	bl	1a001048 <Chip_Clock_GetBaseClock>
1a001076:	f7ff fed7 	bl	1a000e28 <Chip_Clock_GetClockInputHz>
}
1a00107a:	bd08      	pop	{r3, pc}

1a00107c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a00107c:	b971      	cbnz	r1, 1a00109c <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a00107e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001080:	b10a      	cbz	r2, 1a001086 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001082:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001086:	2b02      	cmp	r3, #2
1a001088:	d00a      	beq.n	1a0010a0 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00108a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00108e:	d30a      	bcc.n	1a0010a6 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001090:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001094:	4b06      	ldr	r3, [pc, #24]	; (1a0010b0 <Chip_Clock_EnableOpts+0x34>)
1a001096:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00109a:	4770      	bx	lr
		reg |= (1 << 1);
1a00109c:	2103      	movs	r1, #3
1a00109e:	e7ef      	b.n	1a001080 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0010a0:	f041 0120 	orr.w	r1, r1, #32
1a0010a4:	e7f1      	b.n	1a00108a <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0010a6:	3020      	adds	r0, #32
1a0010a8:	4b02      	ldr	r3, [pc, #8]	; (1a0010b4 <Chip_Clock_EnableOpts+0x38>)
1a0010aa:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0010ae:	4770      	bx	lr
1a0010b0:	40052000 	.word	0x40052000
1a0010b4:	40051000 	.word	0x40051000

1a0010b8 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0010b8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0010bc:	d309      	bcc.n	1a0010d2 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0010be:	4a09      	ldr	r2, [pc, #36]	; (1a0010e4 <Chip_Clock_Enable+0x2c>)
1a0010c0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0010c4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0010c8:	f043 0301 	orr.w	r3, r3, #1
1a0010cc:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0010d0:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0010d2:	4a05      	ldr	r2, [pc, #20]	; (1a0010e8 <Chip_Clock_Enable+0x30>)
1a0010d4:	3020      	adds	r0, #32
1a0010d6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0010da:	f043 0301 	orr.w	r3, r3, #1
1a0010de:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0010e2:	4770      	bx	lr
1a0010e4:	40052000 	.word	0x40052000
1a0010e8:	40051000 	.word	0x40051000

1a0010ec <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0010ec:	b510      	push	{r4, lr}
1a0010ee:	4603      	mov	r3, r0
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0010f0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0010f4:	d308      	bcc.n	1a001108 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0010f6:	f5a0 7291 	sub.w	r2, r0, #290	; 0x122
1a0010fa:	490d      	ldr	r1, [pc, #52]	; (1a001130 <Chip_Clock_GetRate+0x44>)
1a0010fc:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001100:	f014 0001 	ands.w	r0, r4, #1
1a001104:	d106      	bne.n	1a001114 <Chip_Clock_GetRate+0x28>
	else {
		rate = 0;
	}

	return rate;
}
1a001106:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001108:	f100 0220 	add.w	r2, r0, #32
1a00110c:	4909      	ldr	r1, [pc, #36]	; (1a001134 <Chip_Clock_GetRate+0x48>)
1a00110e:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
1a001112:	e7f5      	b.n	1a001100 <Chip_Clock_GetRate+0x14>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001114:	4618      	mov	r0, r3
1a001116:	f7ff fe1b 	bl	1a000d50 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00111a:	f7ff ffa9 	bl	1a001070 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00111e:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001122:	d103      	bne.n	1a00112c <Chip_Clock_GetRate+0x40>
			div = 1;
1a001124:	2301      	movs	r3, #1
		rate = rate / div;
1a001126:	fbb0 f0f3 	udiv	r0, r0, r3
	return rate;
1a00112a:	e7ec      	b.n	1a001106 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00112c:	2302      	movs	r3, #2
1a00112e:	e7fa      	b.n	1a001126 <Chip_Clock_GetRate+0x3a>
1a001130:	40052000 	.word	0x40052000
1a001134:	40051000 	.word	0x40051000

1a001138 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001138:	4770      	bx	lr
	...

1a00113c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a00113c:	2901      	cmp	r1, #1
1a00113e:	d109      	bne.n	1a001154 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001140:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001144:	4b04      	ldr	r3, [pc, #16]	; (1a001158 <Chip_I2C_EventHandler+0x1c>)
1a001146:	eb03 0380 	add.w	r3, r3, r0, lsl #2
1a00114a:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a00114c:	7d13      	ldrb	r3, [r2, #20]
1a00114e:	b2db      	uxtb	r3, r3
1a001150:	2b04      	cmp	r3, #4
1a001152:	d0fb      	beq.n	1a00114c <Chip_I2C_EventHandler+0x10>
}
1a001154:	4770      	bx	lr
1a001156:	bf00      	nop
1a001158:	10000000 	.word	0x10000000

1a00115c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a00115c:	b570      	push	{r4, r5, r6, lr}
1a00115e:	4604      	mov	r4, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001160:	4e07      	ldr	r6, [pc, #28]	; (1a001180 <Chip_I2C_Init+0x24>)
1a001162:	00c5      	lsls	r5, r0, #3
1a001164:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001168:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a00116c:	8898      	ldrh	r0, [r3, #4]
1a00116e:	f7ff ffa3 	bl	1a0010b8 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001172:	1b2d      	subs	r5, r5, r4
1a001174:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001178:	226c      	movs	r2, #108	; 0x6c
1a00117a:	619a      	str	r2, [r3, #24]
}
1a00117c:	bd70      	pop	{r4, r5, r6, pc}
1a00117e:	bf00      	nop
1a001180:	10000000 	.word	0x10000000

1a001184 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001188:	4604      	mov	r4, r0
1a00118a:	4688      	mov	r8, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00118c:	4d0b      	ldr	r5, [pc, #44]	; (1a0011bc <Chip_I2C_SetClockRate+0x38>)
1a00118e:	00c6      	lsls	r6, r0, #3
1a001190:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001194:	009f      	lsls	r7, r3, #2
1a001196:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1a00119a:	8898      	ldrh	r0, [r3, #4]
1a00119c:	f7ff ffa6 	bl	1a0010ec <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0011a0:	fbb0 f1f8 	udiv	r1, r0, r8
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0011a4:	59eb      	ldr	r3, [r5, r7]
1a0011a6:	084a      	lsrs	r2, r1, #1
1a0011a8:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0011aa:	1b36      	subs	r6, r6, r4
1a0011ac:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
1a0011b0:	691a      	ldr	r2, [r3, #16]
1a0011b2:	1a89      	subs	r1, r1, r2
1a0011b4:	6159      	str	r1, [r3, #20]
}
1a0011b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0011ba:	bf00      	nop
1a0011bc:	10000000 	.word	0x10000000

1a0011c0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0011c0:	4b03      	ldr	r3, [pc, #12]	; (1a0011d0 <Chip_SSP_GetClockIndex+0x10>)
1a0011c2:	4298      	cmp	r0, r3
1a0011c4:	d001      	beq.n	1a0011ca <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0011c6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0011c8:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0011ca:	20a5      	movs	r0, #165	; 0xa5
1a0011cc:	4770      	bx	lr
1a0011ce:	bf00      	nop
1a0011d0:	400c5000 	.word	0x400c5000

1a0011d4 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0011d4:	4b04      	ldr	r3, [pc, #16]	; (1a0011e8 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0011d6:	4298      	cmp	r0, r3
1a0011d8:	d002      	beq.n	1a0011e0 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0011da:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0011de:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0011e0:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0011e4:	4770      	bx	lr
1a0011e6:	bf00      	nop
1a0011e8:	400c5000 	.word	0x400c5000

1a0011ec <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0011ec:	6803      	ldr	r3, [r0, #0]
1a0011ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0011f2:	0209      	lsls	r1, r1, #8
1a0011f4:	b289      	uxth	r1, r1
1a0011f6:	4319      	orrs	r1, r3
1a0011f8:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0011fa:	6102      	str	r2, [r0, #16]
}
1a0011fc:	4770      	bx	lr

1a0011fe <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0011fe:	b538      	push	{r3, r4, r5, lr}
1a001200:	4605      	mov	r5, r0
1a001202:	460c      	mov	r4, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001204:	f7ff ffe6 	bl	1a0011d4 <Chip_SSP_GetPeriphClockIndex>
1a001208:	f7ff ff70 	bl	1a0010ec <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00120c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00120e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a001212:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001214:	e000      	b.n	1a001218 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001216:	4661      	mov	r1, ip
	while (cmp_clk > bitRate) {
1a001218:	42a3      	cmp	r3, r4
1a00121a:	d90d      	bls.n	1a001238 <Chip_SSP_SetBitRate+0x3a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00121c:	f101 0c01 	add.w	ip, r1, #1
1a001220:	fb01 2302 	mla	r3, r1, r2, r2
1a001224:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001228:	429c      	cmp	r4, r3
1a00122a:	d2f5      	bcs.n	1a001218 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00122c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
1a001230:	d9f1      	bls.n	1a001216 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a001232:	3202      	adds	r2, #2
				cr0_div = 0;
1a001234:	2100      	movs	r1, #0
1a001236:	e7ef      	b.n	1a001218 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001238:	4628      	mov	r0, r5
1a00123a:	f7ff ffd7 	bl	1a0011ec <Chip_SSP_SetClockRate>
}
1a00123e:	bd38      	pop	{r3, r4, r5, pc}

1a001240 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001240:	b510      	push	{r4, lr}
1a001242:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001244:	f7ff ffbc 	bl	1a0011c0 <Chip_SSP_GetClockIndex>
1a001248:	f7ff ff36 	bl	1a0010b8 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00124c:	4620      	mov	r0, r4
1a00124e:	f7ff ffc1 	bl	1a0011d4 <Chip_SSP_GetPeriphClockIndex>
1a001252:	f7ff ff31 	bl	1a0010b8 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001256:	6863      	ldr	r3, [r4, #4]
1a001258:	f023 0304 	bic.w	r3, r3, #4
1a00125c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00125e:	6823      	ldr	r3, [r4, #0]
1a001260:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001264:	f043 0307 	orr.w	r3, r3, #7
1a001268:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00126a:	4902      	ldr	r1, [pc, #8]	; (1a001274 <Chip_SSP_Init+0x34>)
1a00126c:	4620      	mov	r0, r4
1a00126e:	f7ff ffc6 	bl	1a0011fe <Chip_SSP_SetBitRate>
}
1a001272:	bd10      	pop	{r4, pc}
1a001274:	000186a0 	.word	0x000186a0

1a001278 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001278:	b570      	push	{r4, r5, r6, lr}
1a00127a:	b08a      	sub	sp, #40	; 0x28
1a00127c:	4605      	mov	r5, r0
1a00127e:	460e      	mov	r6, r1
1a001280:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001282:	f242 7310 	movw	r3, #10000	; 0x2710
1a001286:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001288:	2806      	cmp	r0, #6
1a00128a:	d018      	beq.n	1a0012be <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00128c:	2300      	movs	r3, #0
1a00128e:	2201      	movs	r2, #1
1a001290:	4629      	mov	r1, r5
1a001292:	2004      	movs	r0, #4
1a001294:	f7ff feaa 	bl	1a000fec <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001298:	4a4a      	ldr	r2, [pc, #296]	; (1a0013c4 <Chip_SetupCoreClock+0x14c>)
1a00129a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00129c:	f043 0301 	orr.w	r3, r3, #1
1a0012a0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0012a2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0012a6:	a901      	add	r1, sp, #4
1a0012a8:	4630      	mov	r0, r6
1a0012aa:	f7ff fe19 	bl	1a000ee0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0012ae:	4b46      	ldr	r3, [pc, #280]	; (1a0013c8 <Chip_SetupCoreClock+0x150>)
1a0012b0:	429e      	cmp	r6, r3
1a0012b2:	d916      	bls.n	1a0012e2 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0012b4:	9b01      	ldr	r3, [sp, #4]
1a0012b6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0012ba:	d003      	beq.n	1a0012c4 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0012bc:	e7fe      	b.n	1a0012bc <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0012be:	f7ff fd71 	bl	1a000da4 <Chip_Clock_EnableCrystal>
1a0012c2:	e7e3      	b.n	1a00128c <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a0012c4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0012c8:	d005      	beq.n	1a0012d6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0012ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0012ce:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0012d0:	2600      	movs	r6, #0
			direct = 1;
1a0012d2:	2501      	movs	r5, #1
1a0012d4:	e007      	b.n	1a0012e6 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0012d6:	9b04      	ldr	r3, [sp, #16]
1a0012d8:	3301      	adds	r3, #1
1a0012da:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0012dc:	2601      	movs	r6, #1
	uint32_t direct = 0, pdivide = 0;
1a0012de:	2500      	movs	r5, #0
1a0012e0:	e001      	b.n	1a0012e6 <Chip_SetupCoreClock+0x6e>
1a0012e2:	2600      	movs	r6, #0
1a0012e4:	4635      	mov	r5, r6
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0012e6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0012ea:	9b01      	ldr	r3, [sp, #4]
1a0012ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0012f0:	9a05      	ldr	r2, [sp, #20]
1a0012f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0012f6:	9a03      	ldr	r2, [sp, #12]
1a0012f8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0012fc:	9a04      	ldr	r2, [sp, #16]
1a0012fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001302:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001306:	4a2f      	ldr	r2, [pc, #188]	; (1a0013c4 <Chip_SetupCoreClock+0x14c>)
1a001308:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00130a:	4b2e      	ldr	r3, [pc, #184]	; (1a0013c4 <Chip_SetupCoreClock+0x14c>)
1a00130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00130e:	f013 0f01 	tst.w	r3, #1
1a001312:	d0fa      	beq.n	1a00130a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001314:	2300      	movs	r3, #0
1a001316:	2201      	movs	r2, #1
1a001318:	2109      	movs	r1, #9
1a00131a:	2004      	movs	r0, #4
1a00131c:	f7ff fe66 	bl	1a000fec <Chip_Clock_SetBaseClock>

	if (direct) {
1a001320:	b305      	cbz	r5, 1a001364 <Chip_SetupCoreClock+0xec>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001322:	f242 7310 	movw	r3, #10000	; 0x2710
1a001326:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001328:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00132a:	1e5a      	subs	r2, r3, #1
1a00132c:	9209      	str	r2, [sp, #36]	; 0x24
1a00132e:	2b00      	cmp	r3, #0
1a001330:	d1fa      	bne.n	1a001328 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001332:	9b01      	ldr	r3, [sp, #4]
1a001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001338:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00133a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00133e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001342:	9a05      	ldr	r2, [sp, #20]
1a001344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001348:	9a03      	ldr	r2, [sp, #12]
1a00134a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00134e:	9a04      	ldr	r2, [sp, #16]
1a001350:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001354:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001358:	4a1a      	ldr	r2, [pc, #104]	; (1a0013c4 <Chip_SetupCoreClock+0x14c>)
1a00135a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00135c:	2c00      	cmp	r4, #0
1a00135e:	d12e      	bne.n	1a0013be <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001360:	b00a      	add	sp, #40	; 0x28
1a001362:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001364:	2e00      	cmp	r6, #0
1a001366:	d0f9      	beq.n	1a00135c <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001368:	f242 7310 	movw	r3, #10000	; 0x2710
1a00136c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00136e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001370:	1e5a      	subs	r2, r3, #1
1a001372:	9209      	str	r2, [sp, #36]	; 0x24
1a001374:	2b00      	cmp	r3, #0
1a001376:	d1fa      	bne.n	1a00136e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001378:	9a04      	ldr	r2, [sp, #16]
1a00137a:	3a01      	subs	r2, #1
1a00137c:	9204      	str	r2, [sp, #16]
1a00137e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001382:	9b01      	ldr	r3, [sp, #4]
1a001384:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001388:	9905      	ldr	r1, [sp, #20]
1a00138a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00138e:	9903      	ldr	r1, [sp, #12]
1a001390:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001394:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001398:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00139c:	4a09      	ldr	r2, [pc, #36]	; (1a0013c4 <Chip_SetupCoreClock+0x14c>)
1a00139e:	6453      	str	r3, [r2, #68]	; 0x44
}
1a0013a0:	e7dc      	b.n	1a00135c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0013a2:	480a      	ldr	r0, [pc, #40]	; (1a0013cc <Chip_SetupCoreClock+0x154>)
1a0013a4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0013a8:	78cb      	ldrb	r3, [r1, #3]
1a0013aa:	788a      	ldrb	r2, [r1, #2]
1a0013ac:	7849      	ldrb	r1, [r1, #1]
1a0013ae:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0013b2:	f7ff fe1b 	bl	1a000fec <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0013b6:	3401      	adds	r4, #1
1a0013b8:	2c11      	cmp	r4, #17
1a0013ba:	d9f2      	bls.n	1a0013a2 <Chip_SetupCoreClock+0x12a>
1a0013bc:	e7d0      	b.n	1a001360 <Chip_SetupCoreClock+0xe8>
1a0013be:	2400      	movs	r4, #0
1a0013c0:	e7fa      	b.n	1a0013b8 <Chip_SetupCoreClock+0x140>
1a0013c2:	bf00      	nop
1a0013c4:	40050000 	.word	0x40050000
1a0013c8:	068e7780 	.word	0x068e7780
1a0013cc:	1a002838 	.word	0x1a002838

1a0013d0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0013d0:	4b09      	ldr	r3, [pc, #36]	; (1a0013f8 <Chip_UART_GetIndex+0x28>)
1a0013d2:	4298      	cmp	r0, r3
1a0013d4:	d00b      	beq.n	1a0013ee <Chip_UART_GetIndex+0x1e>
1a0013d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0013da:	4298      	cmp	r0, r3
1a0013dc:	d009      	beq.n	1a0013f2 <Chip_UART_GetIndex+0x22>
1a0013de:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0013e2:	4298      	cmp	r0, r3
1a0013e4:	d001      	beq.n	1a0013ea <Chip_UART_GetIndex+0x1a>
1a0013e6:	2000      	movs	r0, #0
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a0013e8:	4770      	bx	lr
			return 1;
1a0013ea:	2001      	movs	r0, #1
1a0013ec:	4770      	bx	lr
			return 2;
1a0013ee:	2002      	movs	r0, #2
1a0013f0:	4770      	bx	lr
			return 3;
1a0013f2:	2003      	movs	r0, #3
1a0013f4:	4770      	bx	lr
1a0013f6:	bf00      	nop
1a0013f8:	400c1000 	.word	0x400c1000

1a0013fc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0013fc:	b530      	push	{r4, r5, lr}
1a0013fe:	b083      	sub	sp, #12
1a001400:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001402:	f7ff ffe5 	bl	1a0013d0 <Chip_UART_GetIndex>
1a001406:	2301      	movs	r3, #1
1a001408:	461a      	mov	r2, r3
1a00140a:	4619      	mov	r1, r3
1a00140c:	4d0e      	ldr	r5, [pc, #56]	; (1a001448 <Chip_UART_Init+0x4c>)
1a00140e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a001412:	f7ff fe33 	bl	1a00107c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a001416:	2307      	movs	r3, #7
1a001418:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00141a:	2300      	movs	r3, #0
1a00141c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00141e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001420:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a001422:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001424:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001426:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001428:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00142a:	4b08      	ldr	r3, [pc, #32]	; (1a00144c <Chip_UART_Init+0x50>)
1a00142c:	429c      	cmp	r4, r3
1a00142e:	d006      	beq.n	1a00143e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001430:	2303      	movs	r3, #3
1a001432:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001434:	2310      	movs	r3, #16
1a001436:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001438:	9b01      	ldr	r3, [sp, #4]
}
1a00143a:	b003      	add	sp, #12
1a00143c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00143e:	2300      	movs	r3, #0
1a001440:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a001442:	69a3      	ldr	r3, [r4, #24]
1a001444:	9301      	str	r3, [sp, #4]
1a001446:	e7f3      	b.n	1a001430 <Chip_UART_Init+0x34>
1a001448:	1a002888 	.word	0x1a002888
1a00144c:	40082000 	.word	0x40082000

1a001450 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001454:	b083      	sub	sp, #12
1a001456:	9001      	str	r0, [sp, #4]
1a001458:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00145a:	f7ff ffb9 	bl	1a0013d0 <Chip_UART_GetIndex>
1a00145e:	4b32      	ldr	r3, [pc, #200]	; (1a001528 <Chip_UART_SetBaudFDR+0xd8>)
1a001460:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001464:	f7ff fe42 	bl	1a0010ec <Chip_Clock_GetRate>
1a001468:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00146a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00146e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001470:	f04f 0b00 	mov.w	fp, #0
1a001474:	46a2      	mov	sl, r4
1a001476:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a001478:	e02a      	b.n	1a0014d0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00147a:	4242      	negs	r2, r0
				div ++;
1a00147c:	1c4b      	adds	r3, r1, #1
1a00147e:	e017      	b.n	1a0014b0 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001480:	b30a      	cbz	r2, 1a0014c6 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a001482:	4617      	mov	r7, r2
			sd = d;
1a001484:	46ab      	mov	fp, r5
			sm = m;
1a001486:	46a2      	mov	sl, r4
			sdiv = div;
1a001488:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00148a:	3501      	adds	r5, #1
1a00148c:	42ac      	cmp	r4, r5
1a00148e:	d91e      	bls.n	1a0014ce <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001490:	0931      	lsrs	r1, r6, #4
1a001492:	0730      	lsls	r0, r6, #28
1a001494:	fba4 0c00 	umull	r0, ip, r4, r0
1a001498:	1962      	adds	r2, r4, r5
1a00149a:	fb08 f202 	mul.w	r2, r8, r2
1a00149e:	2300      	movs	r3, #0
1a0014a0:	fb04 c101 	mla	r1, r4, r1, ip
1a0014a4:	f000 f85e 	bl	1a001564 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0014a8:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0014aa:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0014ac:	2800      	cmp	r0, #0
1a0014ae:	dbe4      	blt.n	1a00147a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0014b0:	4297      	cmp	r7, r2
1a0014b2:	d3ea      	bcc.n	1a00148a <Chip_UART_SetBaudFDR+0x3a>
1a0014b4:	2b00      	cmp	r3, #0
1a0014b6:	d0e8      	beq.n	1a00148a <Chip_UART_SetBaudFDR+0x3a>
1a0014b8:	0c19      	lsrs	r1, r3, #16
1a0014ba:	d1e6      	bne.n	1a00148a <Chip_UART_SetBaudFDR+0x3a>
1a0014bc:	2b02      	cmp	r3, #2
1a0014be:	d8df      	bhi.n	1a001480 <Chip_UART_SetBaudFDR+0x30>
1a0014c0:	2d00      	cmp	r5, #0
1a0014c2:	d0dd      	beq.n	1a001480 <Chip_UART_SetBaudFDR+0x30>
1a0014c4:	e7e1      	b.n	1a00148a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0014c6:	4617      	mov	r7, r2
			sd = d;
1a0014c8:	46ab      	mov	fp, r5
			sm = m;
1a0014ca:	46a2      	mov	sl, r4
			sdiv = div;
1a0014cc:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0014ce:	3401      	adds	r4, #1
1a0014d0:	b11f      	cbz	r7, 1a0014da <Chip_UART_SetBaudFDR+0x8a>
1a0014d2:	2c0f      	cmp	r4, #15
1a0014d4:	d801      	bhi.n	1a0014da <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0014d6:	2500      	movs	r5, #0
1a0014d8:	e7d8      	b.n	1a00148c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0014da:	f1b9 0f00 	cmp.w	r9, #0
1a0014de:	d01e      	beq.n	1a00151e <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0014e0:	9901      	ldr	r1, [sp, #4]
1a0014e2:	68cb      	ldr	r3, [r1, #12]
1a0014e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0014e8:	60cb      	str	r3, [r1, #12]
	pUART->DLL = (uint32_t) dll;
1a0014ea:	fa5f f389 	uxtb.w	r3, r9
1a0014ee:	600b      	str	r3, [r1, #0]
	pUART->DLM = (uint32_t) dlm;
1a0014f0:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0014f4:	604b      	str	r3, [r1, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0014f6:	68cb      	ldr	r3, [r1, #12]
1a0014f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0014fc:	60cb      	str	r3, [r1, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0014fe:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001502:	b2db      	uxtb	r3, r3
1a001504:	f00b 020f 	and.w	r2, fp, #15
1a001508:	4313      	orrs	r3, r2
1a00150a:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00150c:	0933      	lsrs	r3, r6, #4
1a00150e:	fb0a f303 	mul.w	r3, sl, r3
1a001512:	eb0a 020b 	add.w	r2, sl, fp
1a001516:	fb09 f202 	mul.w	r2, r9, r2
1a00151a:	fbb3 f9f2 	udiv	r9, r3, r2
}
1a00151e:	4648      	mov	r0, r9
1a001520:	b003      	add	sp, #12
1a001522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001526:	bf00      	nop
1a001528:	1a002880 	.word	0x1a002880

1a00152c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00152c:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00152e:	4a0b      	ldr	r2, [pc, #44]	; (1a00155c <SystemInit+0x30>)
1a001530:	4b0b      	ldr	r3, [pc, #44]	; (1a001560 <SystemInit+0x34>)
1a001532:	609a      	str	r2, [r3, #8]
  mvfr0 = FPU->MVFR0;
1a001534:	f503 7300 	add.w	r3, r3, #512	; 0x200
1a001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00153a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00153e:	2b20      	cmp	r3, #32
1a001540:	d004      	beq.n	1a00154c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a001542:	f7ff fab5 	bl	1a000ab0 <Board_SystemInit>
   Board_Init();
1a001546:	f7ff fa43 	bl	1a0009d0 <Board_Init>
}
1a00154a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a00154c:	4a04      	ldr	r2, [pc, #16]	; (1a001560 <SystemInit+0x34>)
1a00154e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001552:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001556:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00155a:	e7f2      	b.n	1a001542 <SystemInit+0x16>
1a00155c:	1a000000 	.word	0x1a000000
1a001560:	e000ed00 	.word	0xe000ed00

1a001564 <__aeabi_uldivmod>:
1a001564:	b953      	cbnz	r3, 1a00157c <__aeabi_uldivmod+0x18>
1a001566:	b94a      	cbnz	r2, 1a00157c <__aeabi_uldivmod+0x18>
1a001568:	2900      	cmp	r1, #0
1a00156a:	bf08      	it	eq
1a00156c:	2800      	cmpeq	r0, #0
1a00156e:	bf1c      	itt	ne
1a001570:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001574:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001578:	f000 b94a 	b.w	1a001810 <__aeabi_idiv0>
1a00157c:	f1ad 0c08 	sub.w	ip, sp, #8
1a001580:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001584:	f000 f806 	bl	1a001594 <__udivmoddi4>
1a001588:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00158c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001590:	b004      	add	sp, #16
1a001592:	4770      	bx	lr

1a001594 <__udivmoddi4>:
1a001594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001598:	468c      	mov	ip, r1
1a00159a:	468e      	mov	lr, r1
1a00159c:	9e08      	ldr	r6, [sp, #32]
1a00159e:	4615      	mov	r5, r2
1a0015a0:	4604      	mov	r4, r0
1a0015a2:	4619      	mov	r1, r3
1a0015a4:	2b00      	cmp	r3, #0
1a0015a6:	f040 80af 	bne.w	1a001708 <__udivmoddi4+0x174>
1a0015aa:	4572      	cmp	r2, lr
1a0015ac:	fab2 f782 	clz	r7, r2
1a0015b0:	d943      	bls.n	1a00163a <__udivmoddi4+0xa6>
1a0015b2:	b14f      	cbz	r7, 1a0015c8 <__udivmoddi4+0x34>
1a0015b4:	f1c7 0320 	rsb	r3, r7, #32
1a0015b8:	fa0e fc07 	lsl.w	ip, lr, r7
1a0015bc:	fa20 f303 	lsr.w	r3, r0, r3
1a0015c0:	40bd      	lsls	r5, r7
1a0015c2:	ea43 0c0c 	orr.w	ip, r3, ip
1a0015c6:	40bc      	lsls	r4, r7
1a0015c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0015cc:	b2a8      	uxth	r0, r5
1a0015ce:	fbbc f8fe 	udiv	r8, ip, lr
1a0015d2:	0c23      	lsrs	r3, r4, #16
1a0015d4:	fb0e cc18 	mls	ip, lr, r8, ip
1a0015d8:	fb08 f900 	mul.w	r9, r8, r0
1a0015dc:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a0015e0:	4599      	cmp	r9, r3
1a0015e2:	d928      	bls.n	1a001636 <__udivmoddi4+0xa2>
1a0015e4:	18eb      	adds	r3, r5, r3
1a0015e6:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
1a0015ea:	d204      	bcs.n	1a0015f6 <__udivmoddi4+0x62>
1a0015ec:	4599      	cmp	r9, r3
1a0015ee:	d902      	bls.n	1a0015f6 <__udivmoddi4+0x62>
1a0015f0:	f1a8 0202 	sub.w	r2, r8, #2
1a0015f4:	442b      	add	r3, r5
1a0015f6:	eba3 0309 	sub.w	r3, r3, r9
1a0015fa:	fbb3 fcfe 	udiv	ip, r3, lr
1a0015fe:	b2a4      	uxth	r4, r4
1a001600:	fb0e 331c 	mls	r3, lr, ip, r3
1a001604:	fb0c f000 	mul.w	r0, ip, r0
1a001608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00160c:	42a0      	cmp	r0, r4
1a00160e:	d979      	bls.n	1a001704 <__udivmoddi4+0x170>
1a001610:	192c      	adds	r4, r5, r4
1a001612:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
1a001616:	d204      	bcs.n	1a001622 <__udivmoddi4+0x8e>
1a001618:	42a0      	cmp	r0, r4
1a00161a:	d902      	bls.n	1a001622 <__udivmoddi4+0x8e>
1a00161c:	f1ac 0302 	sub.w	r3, ip, #2
1a001620:	442c      	add	r4, r5
1a001622:	1a24      	subs	r4, r4, r0
1a001624:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
1a001628:	b11e      	cbz	r6, 1a001632 <__udivmoddi4+0x9e>
1a00162a:	40fc      	lsrs	r4, r7
1a00162c:	2300      	movs	r3, #0
1a00162e:	6034      	str	r4, [r6, #0]
1a001630:	6073      	str	r3, [r6, #4]
1a001632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001636:	4642      	mov	r2, r8
1a001638:	e7dd      	b.n	1a0015f6 <__udivmoddi4+0x62>
1a00163a:	b902      	cbnz	r2, 1a00163e <__udivmoddi4+0xaa>
1a00163c:	deff      	udf	#255	; 0xff
1a00163e:	b9e7      	cbnz	r7, 1a00167a <__udivmoddi4+0xe6>
1a001640:	ebae 0302 	sub.w	r3, lr, r2
1a001644:	2101      	movs	r1, #1
1a001646:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00164a:	b2a8      	uxth	r0, r5
1a00164c:	fbb3 fcfe 	udiv	ip, r3, lr
1a001650:	0c22      	lsrs	r2, r4, #16
1a001652:	fb0e 331c 	mls	r3, lr, ip, r3
1a001656:	fb0c f800 	mul.w	r8, ip, r0
1a00165a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
1a00165e:	4598      	cmp	r8, r3
1a001660:	d94e      	bls.n	1a001700 <__udivmoddi4+0x16c>
1a001662:	18eb      	adds	r3, r5, r3
1a001664:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
1a001668:	d204      	bcs.n	1a001674 <__udivmoddi4+0xe0>
1a00166a:	4598      	cmp	r8, r3
1a00166c:	d902      	bls.n	1a001674 <__udivmoddi4+0xe0>
1a00166e:	f1ac 0202 	sub.w	r2, ip, #2
1a001672:	442b      	add	r3, r5
1a001674:	eba3 0308 	sub.w	r3, r3, r8
1a001678:	e7bf      	b.n	1a0015fa <__udivmoddi4+0x66>
1a00167a:	f1c7 0120 	rsb	r1, r7, #32
1a00167e:	fa2e f301 	lsr.w	r3, lr, r1
1a001682:	40bd      	lsls	r5, r7
1a001684:	fa0e fe07 	lsl.w	lr, lr, r7
1a001688:	fa20 f101 	lsr.w	r1, r0, r1
1a00168c:	ea41 010e 	orr.w	r1, r1, lr
1a001690:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001694:	b2aa      	uxth	r2, r5
1a001696:	fbb3 fcfe 	udiv	ip, r3, lr
1a00169a:	fb0e 301c 	mls	r0, lr, ip, r3
1a00169e:	0c0b      	lsrs	r3, r1, #16
1a0016a0:	fb0c f802 	mul.w	r8, ip, r2
1a0016a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a0016a8:	4598      	cmp	r8, r3
1a0016aa:	fa04 f407 	lsl.w	r4, r4, r7
1a0016ae:	d923      	bls.n	1a0016f8 <__udivmoddi4+0x164>
1a0016b0:	18eb      	adds	r3, r5, r3
1a0016b2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0016b6:	d204      	bcs.n	1a0016c2 <__udivmoddi4+0x12e>
1a0016b8:	4598      	cmp	r8, r3
1a0016ba:	d902      	bls.n	1a0016c2 <__udivmoddi4+0x12e>
1a0016bc:	f1ac 0002 	sub.w	r0, ip, #2
1a0016c0:	442b      	add	r3, r5
1a0016c2:	eba3 0308 	sub.w	r3, r3, r8
1a0016c6:	fbb3 fcfe 	udiv	ip, r3, lr
1a0016ca:	fb0c f802 	mul.w	r8, ip, r2
1a0016ce:	fb0e 321c 	mls	r2, lr, ip, r3
1a0016d2:	b28b      	uxth	r3, r1
1a0016d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0016d8:	4598      	cmp	r8, r3
1a0016da:	d90f      	bls.n	1a0016fc <__udivmoddi4+0x168>
1a0016dc:	18eb      	adds	r3, r5, r3
1a0016de:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
1a0016e2:	d204      	bcs.n	1a0016ee <__udivmoddi4+0x15a>
1a0016e4:	4598      	cmp	r8, r3
1a0016e6:	d902      	bls.n	1a0016ee <__udivmoddi4+0x15a>
1a0016e8:	f1ac 0102 	sub.w	r1, ip, #2
1a0016ec:	442b      	add	r3, r5
1a0016ee:	eba3 0308 	sub.w	r3, r3, r8
1a0016f2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
1a0016f6:	e7a6      	b.n	1a001646 <__udivmoddi4+0xb2>
1a0016f8:	4660      	mov	r0, ip
1a0016fa:	e7e2      	b.n	1a0016c2 <__udivmoddi4+0x12e>
1a0016fc:	4661      	mov	r1, ip
1a0016fe:	e7f6      	b.n	1a0016ee <__udivmoddi4+0x15a>
1a001700:	4662      	mov	r2, ip
1a001702:	e7b7      	b.n	1a001674 <__udivmoddi4+0xe0>
1a001704:	4663      	mov	r3, ip
1a001706:	e78c      	b.n	1a001622 <__udivmoddi4+0x8e>
1a001708:	4573      	cmp	r3, lr
1a00170a:	d905      	bls.n	1a001718 <__udivmoddi4+0x184>
1a00170c:	b10e      	cbz	r6, 1a001712 <__udivmoddi4+0x17e>
1a00170e:	e9c6 0e00 	strd	r0, lr, [r6]
1a001712:	2100      	movs	r1, #0
1a001714:	4608      	mov	r0, r1
1a001716:	e78c      	b.n	1a001632 <__udivmoddi4+0x9e>
1a001718:	fab3 f783 	clz	r7, r3
1a00171c:	b987      	cbnz	r7, 1a001740 <__udivmoddi4+0x1ac>
1a00171e:	4573      	cmp	r3, lr
1a001720:	d301      	bcc.n	1a001726 <__udivmoddi4+0x192>
1a001722:	4282      	cmp	r2, r0
1a001724:	d80a      	bhi.n	1a00173c <__udivmoddi4+0x1a8>
1a001726:	1a84      	subs	r4, r0, r2
1a001728:	eb6e 0303 	sbc.w	r3, lr, r3
1a00172c:	2001      	movs	r0, #1
1a00172e:	469c      	mov	ip, r3
1a001730:	2e00      	cmp	r6, #0
1a001732:	d06a      	beq.n	1a00180a <__udivmoddi4+0x276>
1a001734:	e9c6 4c00 	strd	r4, ip, [r6]
1a001738:	2100      	movs	r1, #0
1a00173a:	e77a      	b.n	1a001632 <__udivmoddi4+0x9e>
1a00173c:	4638      	mov	r0, r7
1a00173e:	e7f7      	b.n	1a001730 <__udivmoddi4+0x19c>
1a001740:	f1c7 0c20 	rsb	ip, r7, #32
1a001744:	40bb      	lsls	r3, r7
1a001746:	fa22 f40c 	lsr.w	r4, r2, ip
1a00174a:	431c      	orrs	r4, r3
1a00174c:	fa20 f10c 	lsr.w	r1, r0, ip
1a001750:	fa2e f30c 	lsr.w	r3, lr, ip
1a001754:	fa0e fe07 	lsl.w	lr, lr, r7
1a001758:	ea41 010e 	orr.w	r1, r1, lr
1a00175c:	ea4f 4914 	mov.w	r9, r4, lsr #16
1a001760:	fa00 f507 	lsl.w	r5, r0, r7
1a001764:	fbb3 f8f9 	udiv	r8, r3, r9
1a001768:	fa1f fe84 	uxth.w	lr, r4
1a00176c:	fb09 3018 	mls	r0, r9, r8, r3
1a001770:	0c0b      	lsrs	r3, r1, #16
1a001772:	fb08 fa0e 	mul.w	sl, r8, lr
1a001776:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a00177a:	459a      	cmp	sl, r3
1a00177c:	fa02 f207 	lsl.w	r2, r2, r7
1a001780:	d93f      	bls.n	1a001802 <__udivmoddi4+0x26e>
1a001782:	18e3      	adds	r3, r4, r3
1a001784:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
1a001788:	d204      	bcs.n	1a001794 <__udivmoddi4+0x200>
1a00178a:	459a      	cmp	sl, r3
1a00178c:	d902      	bls.n	1a001794 <__udivmoddi4+0x200>
1a00178e:	f1a8 0002 	sub.w	r0, r8, #2
1a001792:	4423      	add	r3, r4
1a001794:	eba3 030a 	sub.w	r3, r3, sl
1a001798:	b289      	uxth	r1, r1
1a00179a:	fbb3 f8f9 	udiv	r8, r3, r9
1a00179e:	fb09 3318 	mls	r3, r9, r8, r3
1a0017a2:	fb08 fe0e 	mul.w	lr, r8, lr
1a0017a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0017aa:	458e      	cmp	lr, r1
1a0017ac:	d92b      	bls.n	1a001806 <__udivmoddi4+0x272>
1a0017ae:	1861      	adds	r1, r4, r1
1a0017b0:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a0017b4:	d204      	bcs.n	1a0017c0 <__udivmoddi4+0x22c>
1a0017b6:	458e      	cmp	lr, r1
1a0017b8:	d902      	bls.n	1a0017c0 <__udivmoddi4+0x22c>
1a0017ba:	f1a8 0302 	sub.w	r3, r8, #2
1a0017be:	4421      	add	r1, r4
1a0017c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0017c4:	fba0 9802 	umull	r9, r8, r0, r2
1a0017c8:	eba1 010e 	sub.w	r1, r1, lr
1a0017cc:	4541      	cmp	r1, r8
1a0017ce:	46ce      	mov	lr, r9
1a0017d0:	4643      	mov	r3, r8
1a0017d2:	d302      	bcc.n	1a0017da <__udivmoddi4+0x246>
1a0017d4:	d106      	bne.n	1a0017e4 <__udivmoddi4+0x250>
1a0017d6:	454d      	cmp	r5, r9
1a0017d8:	d204      	bcs.n	1a0017e4 <__udivmoddi4+0x250>
1a0017da:	ebb9 0e02 	subs.w	lr, r9, r2
1a0017de:	eb68 0304 	sbc.w	r3, r8, r4
1a0017e2:	3801      	subs	r0, #1
1a0017e4:	b18e      	cbz	r6, 1a00180a <__udivmoddi4+0x276>
1a0017e6:	ebb5 020e 	subs.w	r2, r5, lr
1a0017ea:	eb61 0103 	sbc.w	r1, r1, r3
1a0017ee:	fa01 fc0c 	lsl.w	ip, r1, ip
1a0017f2:	fa22 f307 	lsr.w	r3, r2, r7
1a0017f6:	ea4c 0303 	orr.w	r3, ip, r3
1a0017fa:	40f9      	lsrs	r1, r7
1a0017fc:	e9c6 3100 	strd	r3, r1, [r6]
1a001800:	e79a      	b.n	1a001738 <__udivmoddi4+0x1a4>
1a001802:	4640      	mov	r0, r8
1a001804:	e7c6      	b.n	1a001794 <__udivmoddi4+0x200>
1a001806:	4643      	mov	r3, r8
1a001808:	e7da      	b.n	1a0017c0 <__udivmoddi4+0x22c>
1a00180a:	4631      	mov	r1, r6
1a00180c:	e711      	b.n	1a001632 <__udivmoddi4+0x9e>
	...

1a001810 <__aeabi_idiv0>:
1a001810:	4770      	bx	lr
1a001812:	bf00      	nop

1a001814 <__libc_init_array>:
1a001814:	b570      	push	{r4, r5, r6, lr}
1a001816:	4d0d      	ldr	r5, [pc, #52]	; (1a00184c <__libc_init_array+0x38>)
1a001818:	4c0d      	ldr	r4, [pc, #52]	; (1a001850 <__libc_init_array+0x3c>)
1a00181a:	1b64      	subs	r4, r4, r5
1a00181c:	10a4      	asrs	r4, r4, #2
1a00181e:	2600      	movs	r6, #0
1a001820:	42a6      	cmp	r6, r4
1a001822:	d109      	bne.n	1a001838 <__libc_init_array+0x24>
1a001824:	4d0b      	ldr	r5, [pc, #44]	; (1a001854 <__libc_init_array+0x40>)
1a001826:	4c0c      	ldr	r4, [pc, #48]	; (1a001858 <__libc_init_array+0x44>)
1a001828:	f7fe fef3 	bl	1a000612 <_init>
1a00182c:	1b64      	subs	r4, r4, r5
1a00182e:	10a4      	asrs	r4, r4, #2
1a001830:	2600      	movs	r6, #0
1a001832:	42a6      	cmp	r6, r4
1a001834:	d105      	bne.n	1a001842 <__libc_init_array+0x2e>
1a001836:	bd70      	pop	{r4, r5, r6, pc}
1a001838:	f855 3b04 	ldr.w	r3, [r5], #4
1a00183c:	4798      	blx	r3
1a00183e:	3601      	adds	r6, #1
1a001840:	e7ee      	b.n	1a001820 <__libc_init_array+0xc>
1a001842:	f855 3b04 	ldr.w	r3, [r5], #4
1a001846:	4798      	blx	r3
1a001848:	3601      	adds	r6, #1
1a00184a:	e7f2      	b.n	1a001832 <__libc_init_array+0x1e>
1a00184c:	1a000300 	.word	0x1a000300
1a001850:	1a000300 	.word	0x1a000300
1a001854:	1a000300 	.word	0x1a000300
1a001858:	1a000304 	.word	0x1a000304

1a00185c <memset>:
1a00185c:	4402      	add	r2, r0
1a00185e:	4603      	mov	r3, r0
1a001860:	4293      	cmp	r3, r2
1a001862:	d100      	bne.n	1a001866 <memset+0xa>
1a001864:	4770      	bx	lr
1a001866:	f803 1b01 	strb.w	r1, [r3], #1
1a00186a:	e7f9      	b.n	1a001860 <memset+0x4>

1a00186c <iprintf>:
1a00186c:	b40f      	push	{r0, r1, r2, r3}
1a00186e:	4b0a      	ldr	r3, [pc, #40]	; (1a001898 <iprintf+0x2c>)
1a001870:	b513      	push	{r0, r1, r4, lr}
1a001872:	681c      	ldr	r4, [r3, #0]
1a001874:	b124      	cbz	r4, 1a001880 <iprintf+0x14>
1a001876:	69a3      	ldr	r3, [r4, #24]
1a001878:	b913      	cbnz	r3, 1a001880 <iprintf+0x14>
1a00187a:	4620      	mov	r0, r4
1a00187c:	f000 f866 	bl	1a00194c <__sinit>
1a001880:	ab05      	add	r3, sp, #20
1a001882:	9a04      	ldr	r2, [sp, #16]
1a001884:	68a1      	ldr	r1, [r4, #8]
1a001886:	9301      	str	r3, [sp, #4]
1a001888:	4620      	mov	r0, r4
1a00188a:	f000 f983 	bl	1a001b94 <_vfiprintf_r>
1a00188e:	b002      	add	sp, #8
1a001890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a001894:	b004      	add	sp, #16
1a001896:	4770      	bx	lr
1a001898:	10000038 	.word	0x10000038

1a00189c <std>:
1a00189c:	2300      	movs	r3, #0
1a00189e:	b510      	push	{r4, lr}
1a0018a0:	4604      	mov	r4, r0
1a0018a2:	e9c0 3300 	strd	r3, r3, [r0]
1a0018a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0018aa:	6083      	str	r3, [r0, #8]
1a0018ac:	8181      	strh	r1, [r0, #12]
1a0018ae:	6643      	str	r3, [r0, #100]	; 0x64
1a0018b0:	81c2      	strh	r2, [r0, #14]
1a0018b2:	6183      	str	r3, [r0, #24]
1a0018b4:	4619      	mov	r1, r3
1a0018b6:	2208      	movs	r2, #8
1a0018b8:	305c      	adds	r0, #92	; 0x5c
1a0018ba:	f7ff ffcf 	bl	1a00185c <memset>
1a0018be:	4b05      	ldr	r3, [pc, #20]	; (1a0018d4 <std+0x38>)
1a0018c0:	6263      	str	r3, [r4, #36]	; 0x24
1a0018c2:	4b05      	ldr	r3, [pc, #20]	; (1a0018d8 <std+0x3c>)
1a0018c4:	62a3      	str	r3, [r4, #40]	; 0x28
1a0018c6:	4b05      	ldr	r3, [pc, #20]	; (1a0018dc <std+0x40>)
1a0018c8:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0018ca:	4b05      	ldr	r3, [pc, #20]	; (1a0018e0 <std+0x44>)
1a0018cc:	6224      	str	r4, [r4, #32]
1a0018ce:	6323      	str	r3, [r4, #48]	; 0x30
1a0018d0:	bd10      	pop	{r4, pc}
1a0018d2:	bf00      	nop
1a0018d4:	1a001df5 	.word	0x1a001df5
1a0018d8:	1a001e17 	.word	0x1a001e17
1a0018dc:	1a001e4f 	.word	0x1a001e4f
1a0018e0:	1a001e73 	.word	0x1a001e73

1a0018e4 <_cleanup_r>:
1a0018e4:	4901      	ldr	r1, [pc, #4]	; (1a0018ec <_cleanup_r+0x8>)
1a0018e6:	f000 b8af 	b.w	1a001a48 <_fwalk_reent>
1a0018ea:	bf00      	nop
1a0018ec:	1a002109 	.word	0x1a002109

1a0018f0 <__sfmoreglue>:
1a0018f0:	b570      	push	{r4, r5, r6, lr}
1a0018f2:	2268      	movs	r2, #104	; 0x68
1a0018f4:	1e4d      	subs	r5, r1, #1
1a0018f6:	4355      	muls	r5, r2
1a0018f8:	460e      	mov	r6, r1
1a0018fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a0018fe:	f000 f8c5 	bl	1a001a8c <_malloc_r>
1a001902:	4604      	mov	r4, r0
1a001904:	b140      	cbz	r0, 1a001918 <__sfmoreglue+0x28>
1a001906:	2100      	movs	r1, #0
1a001908:	e9c0 1600 	strd	r1, r6, [r0]
1a00190c:	300c      	adds	r0, #12
1a00190e:	60a0      	str	r0, [r4, #8]
1a001910:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a001914:	f7ff ffa2 	bl	1a00185c <memset>
1a001918:	4620      	mov	r0, r4
1a00191a:	bd70      	pop	{r4, r5, r6, pc}

1a00191c <__sfp_lock_acquire>:
1a00191c:	4801      	ldr	r0, [pc, #4]	; (1a001924 <__sfp_lock_acquire+0x8>)
1a00191e:	f000 b8b3 	b.w	1a001a88 <__retarget_lock_acquire_recursive>
1a001922:	bf00      	nop
1a001924:	100000b5 	.word	0x100000b5

1a001928 <__sfp_lock_release>:
1a001928:	4801      	ldr	r0, [pc, #4]	; (1a001930 <__sfp_lock_release+0x8>)
1a00192a:	f000 b8ae 	b.w	1a001a8a <__retarget_lock_release_recursive>
1a00192e:	bf00      	nop
1a001930:	100000b5 	.word	0x100000b5

1a001934 <__sinit_lock_acquire>:
1a001934:	4801      	ldr	r0, [pc, #4]	; (1a00193c <__sinit_lock_acquire+0x8>)
1a001936:	f000 b8a7 	b.w	1a001a88 <__retarget_lock_acquire_recursive>
1a00193a:	bf00      	nop
1a00193c:	100000b6 	.word	0x100000b6

1a001940 <__sinit_lock_release>:
1a001940:	4801      	ldr	r0, [pc, #4]	; (1a001948 <__sinit_lock_release+0x8>)
1a001942:	f000 b8a2 	b.w	1a001a8a <__retarget_lock_release_recursive>
1a001946:	bf00      	nop
1a001948:	100000b6 	.word	0x100000b6

1a00194c <__sinit>:
1a00194c:	b510      	push	{r4, lr}
1a00194e:	4604      	mov	r4, r0
1a001950:	f7ff fff0 	bl	1a001934 <__sinit_lock_acquire>
1a001954:	69a3      	ldr	r3, [r4, #24]
1a001956:	b11b      	cbz	r3, 1a001960 <__sinit+0x14>
1a001958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a00195c:	f7ff bff0 	b.w	1a001940 <__sinit_lock_release>
1a001960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a001964:	6523      	str	r3, [r4, #80]	; 0x50
1a001966:	4b13      	ldr	r3, [pc, #76]	; (1a0019b4 <__sinit+0x68>)
1a001968:	4a13      	ldr	r2, [pc, #76]	; (1a0019b8 <__sinit+0x6c>)
1a00196a:	681b      	ldr	r3, [r3, #0]
1a00196c:	62a2      	str	r2, [r4, #40]	; 0x28
1a00196e:	42a3      	cmp	r3, r4
1a001970:	bf04      	itt	eq
1a001972:	2301      	moveq	r3, #1
1a001974:	61a3      	streq	r3, [r4, #24]
1a001976:	4620      	mov	r0, r4
1a001978:	f000 f820 	bl	1a0019bc <__sfp>
1a00197c:	6060      	str	r0, [r4, #4]
1a00197e:	4620      	mov	r0, r4
1a001980:	f000 f81c 	bl	1a0019bc <__sfp>
1a001984:	60a0      	str	r0, [r4, #8]
1a001986:	4620      	mov	r0, r4
1a001988:	f000 f818 	bl	1a0019bc <__sfp>
1a00198c:	2200      	movs	r2, #0
1a00198e:	60e0      	str	r0, [r4, #12]
1a001990:	2104      	movs	r1, #4
1a001992:	6860      	ldr	r0, [r4, #4]
1a001994:	f7ff ff82 	bl	1a00189c <std>
1a001998:	68a0      	ldr	r0, [r4, #8]
1a00199a:	2201      	movs	r2, #1
1a00199c:	2109      	movs	r1, #9
1a00199e:	f7ff ff7d 	bl	1a00189c <std>
1a0019a2:	68e0      	ldr	r0, [r4, #12]
1a0019a4:	2202      	movs	r2, #2
1a0019a6:	2112      	movs	r1, #18
1a0019a8:	f7ff ff78 	bl	1a00189c <std>
1a0019ac:	2301      	movs	r3, #1
1a0019ae:	61a3      	str	r3, [r4, #24]
1a0019b0:	e7d2      	b.n	1a001958 <__sinit+0xc>
1a0019b2:	bf00      	nop
1a0019b4:	1a0028f0 	.word	0x1a0028f0
1a0019b8:	1a0018e5 	.word	0x1a0018e5

1a0019bc <__sfp>:
1a0019bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0019be:	4607      	mov	r7, r0
1a0019c0:	f7ff ffac 	bl	1a00191c <__sfp_lock_acquire>
1a0019c4:	4b1e      	ldr	r3, [pc, #120]	; (1a001a40 <__sfp+0x84>)
1a0019c6:	681e      	ldr	r6, [r3, #0]
1a0019c8:	69b3      	ldr	r3, [r6, #24]
1a0019ca:	b913      	cbnz	r3, 1a0019d2 <__sfp+0x16>
1a0019cc:	4630      	mov	r0, r6
1a0019ce:	f7ff ffbd 	bl	1a00194c <__sinit>
1a0019d2:	3648      	adds	r6, #72	; 0x48
1a0019d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a0019d8:	3b01      	subs	r3, #1
1a0019da:	d503      	bpl.n	1a0019e4 <__sfp+0x28>
1a0019dc:	6833      	ldr	r3, [r6, #0]
1a0019de:	b30b      	cbz	r3, 1a001a24 <__sfp+0x68>
1a0019e0:	6836      	ldr	r6, [r6, #0]
1a0019e2:	e7f7      	b.n	1a0019d4 <__sfp+0x18>
1a0019e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0019e8:	b9d5      	cbnz	r5, 1a001a20 <__sfp+0x64>
1a0019ea:	4b16      	ldr	r3, [pc, #88]	; (1a001a44 <__sfp+0x88>)
1a0019ec:	60e3      	str	r3, [r4, #12]
1a0019ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0019f2:	6665      	str	r5, [r4, #100]	; 0x64
1a0019f4:	f000 f847 	bl	1a001a86 <__retarget_lock_init_recursive>
1a0019f8:	f7ff ff96 	bl	1a001928 <__sfp_lock_release>
1a0019fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a001a00:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a001a04:	6025      	str	r5, [r4, #0]
1a001a06:	61a5      	str	r5, [r4, #24]
1a001a08:	2208      	movs	r2, #8
1a001a0a:	4629      	mov	r1, r5
1a001a0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a001a10:	f7ff ff24 	bl	1a00185c <memset>
1a001a14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a001a18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a001a1c:	4620      	mov	r0, r4
1a001a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001a20:	3468      	adds	r4, #104	; 0x68
1a001a22:	e7d9      	b.n	1a0019d8 <__sfp+0x1c>
1a001a24:	2104      	movs	r1, #4
1a001a26:	4638      	mov	r0, r7
1a001a28:	f7ff ff62 	bl	1a0018f0 <__sfmoreglue>
1a001a2c:	4604      	mov	r4, r0
1a001a2e:	6030      	str	r0, [r6, #0]
1a001a30:	2800      	cmp	r0, #0
1a001a32:	d1d5      	bne.n	1a0019e0 <__sfp+0x24>
1a001a34:	f7ff ff78 	bl	1a001928 <__sfp_lock_release>
1a001a38:	230c      	movs	r3, #12
1a001a3a:	603b      	str	r3, [r7, #0]
1a001a3c:	e7ee      	b.n	1a001a1c <__sfp+0x60>
1a001a3e:	bf00      	nop
1a001a40:	1a0028f0 	.word	0x1a0028f0
1a001a44:	ffff0001 	.word	0xffff0001

1a001a48 <_fwalk_reent>:
1a001a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001a4c:	4606      	mov	r6, r0
1a001a4e:	4688      	mov	r8, r1
1a001a50:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a001a54:	2700      	movs	r7, #0
1a001a56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
1a001a5a:	f1b9 0901 	subs.w	r9, r9, #1
1a001a5e:	d505      	bpl.n	1a001a6c <_fwalk_reent+0x24>
1a001a60:	6824      	ldr	r4, [r4, #0]
1a001a62:	2c00      	cmp	r4, #0
1a001a64:	d1f7      	bne.n	1a001a56 <_fwalk_reent+0xe>
1a001a66:	4638      	mov	r0, r7
1a001a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001a6c:	89ab      	ldrh	r3, [r5, #12]
1a001a6e:	2b01      	cmp	r3, #1
1a001a70:	d907      	bls.n	1a001a82 <_fwalk_reent+0x3a>
1a001a72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a001a76:	3301      	adds	r3, #1
1a001a78:	d003      	beq.n	1a001a82 <_fwalk_reent+0x3a>
1a001a7a:	4629      	mov	r1, r5
1a001a7c:	4630      	mov	r0, r6
1a001a7e:	47c0      	blx	r8
1a001a80:	4307      	orrs	r7, r0
1a001a82:	3568      	adds	r5, #104	; 0x68
1a001a84:	e7e9      	b.n	1a001a5a <_fwalk_reent+0x12>

1a001a86 <__retarget_lock_init_recursive>:
1a001a86:	4770      	bx	lr

1a001a88 <__retarget_lock_acquire_recursive>:
1a001a88:	4770      	bx	lr

1a001a8a <__retarget_lock_release_recursive>:
1a001a8a:	4770      	bx	lr

1a001a8c <_malloc_r>:
1a001a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001a8e:	1ccd      	adds	r5, r1, #3
1a001a90:	f025 0503 	bic.w	r5, r5, #3
1a001a94:	3508      	adds	r5, #8
1a001a96:	2d0c      	cmp	r5, #12
1a001a98:	bf38      	it	cc
1a001a9a:	250c      	movcc	r5, #12
1a001a9c:	2d00      	cmp	r5, #0
1a001a9e:	4606      	mov	r6, r0
1a001aa0:	db01      	blt.n	1a001aa6 <_malloc_r+0x1a>
1a001aa2:	42a9      	cmp	r1, r5
1a001aa4:	d903      	bls.n	1a001aae <_malloc_r+0x22>
1a001aa6:	230c      	movs	r3, #12
1a001aa8:	6033      	str	r3, [r6, #0]
1a001aaa:	2000      	movs	r0, #0
1a001aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001aae:	f000 fc1f 	bl	1a0022f0 <__malloc_lock>
1a001ab2:	4921      	ldr	r1, [pc, #132]	; (1a001b38 <_malloc_r+0xac>)
1a001ab4:	680a      	ldr	r2, [r1, #0]
1a001ab6:	4614      	mov	r4, r2
1a001ab8:	b99c      	cbnz	r4, 1a001ae2 <_malloc_r+0x56>
1a001aba:	4f20      	ldr	r7, [pc, #128]	; (1a001b3c <_malloc_r+0xb0>)
1a001abc:	683b      	ldr	r3, [r7, #0]
1a001abe:	b923      	cbnz	r3, 1a001aca <_malloc_r+0x3e>
1a001ac0:	4621      	mov	r1, r4
1a001ac2:	4630      	mov	r0, r6
1a001ac4:	f7fe fdfa 	bl	1a0006bc <_sbrk_r>
1a001ac8:	6038      	str	r0, [r7, #0]
1a001aca:	4629      	mov	r1, r5
1a001acc:	4630      	mov	r0, r6
1a001ace:	f7fe fdf5 	bl	1a0006bc <_sbrk_r>
1a001ad2:	1c43      	adds	r3, r0, #1
1a001ad4:	d123      	bne.n	1a001b1e <_malloc_r+0x92>
1a001ad6:	230c      	movs	r3, #12
1a001ad8:	6033      	str	r3, [r6, #0]
1a001ada:	4630      	mov	r0, r6
1a001adc:	f000 fc0e 	bl	1a0022fc <__malloc_unlock>
1a001ae0:	e7e3      	b.n	1a001aaa <_malloc_r+0x1e>
1a001ae2:	6823      	ldr	r3, [r4, #0]
1a001ae4:	1b5b      	subs	r3, r3, r5
1a001ae6:	d417      	bmi.n	1a001b18 <_malloc_r+0x8c>
1a001ae8:	2b0b      	cmp	r3, #11
1a001aea:	d903      	bls.n	1a001af4 <_malloc_r+0x68>
1a001aec:	6023      	str	r3, [r4, #0]
1a001aee:	441c      	add	r4, r3
1a001af0:	6025      	str	r5, [r4, #0]
1a001af2:	e004      	b.n	1a001afe <_malloc_r+0x72>
1a001af4:	6863      	ldr	r3, [r4, #4]
1a001af6:	42a2      	cmp	r2, r4
1a001af8:	bf0c      	ite	eq
1a001afa:	600b      	streq	r3, [r1, #0]
1a001afc:	6053      	strne	r3, [r2, #4]
1a001afe:	4630      	mov	r0, r6
1a001b00:	f000 fbfc 	bl	1a0022fc <__malloc_unlock>
1a001b04:	f104 000b 	add.w	r0, r4, #11
1a001b08:	1d23      	adds	r3, r4, #4
1a001b0a:	f020 0007 	bic.w	r0, r0, #7
1a001b0e:	1ac2      	subs	r2, r0, r3
1a001b10:	d0cc      	beq.n	1a001aac <_malloc_r+0x20>
1a001b12:	1a1b      	subs	r3, r3, r0
1a001b14:	50a3      	str	r3, [r4, r2]
1a001b16:	e7c9      	b.n	1a001aac <_malloc_r+0x20>
1a001b18:	4622      	mov	r2, r4
1a001b1a:	6864      	ldr	r4, [r4, #4]
1a001b1c:	e7cc      	b.n	1a001ab8 <_malloc_r+0x2c>
1a001b1e:	1cc4      	adds	r4, r0, #3
1a001b20:	f024 0403 	bic.w	r4, r4, #3
1a001b24:	42a0      	cmp	r0, r4
1a001b26:	d0e3      	beq.n	1a001af0 <_malloc_r+0x64>
1a001b28:	1a21      	subs	r1, r4, r0
1a001b2a:	4630      	mov	r0, r6
1a001b2c:	f7fe fdc6 	bl	1a0006bc <_sbrk_r>
1a001b30:	3001      	adds	r0, #1
1a001b32:	d1dd      	bne.n	1a001af0 <_malloc_r+0x64>
1a001b34:	e7cf      	b.n	1a001ad6 <_malloc_r+0x4a>
1a001b36:	bf00      	nop
1a001b38:	100000b8 	.word	0x100000b8
1a001b3c:	100000bc 	.word	0x100000bc

1a001b40 <__sfputc_r>:
1a001b40:	6893      	ldr	r3, [r2, #8]
1a001b42:	3b01      	subs	r3, #1
1a001b44:	2b00      	cmp	r3, #0
1a001b46:	b410      	push	{r4}
1a001b48:	6093      	str	r3, [r2, #8]
1a001b4a:	da08      	bge.n	1a001b5e <__sfputc_r+0x1e>
1a001b4c:	6994      	ldr	r4, [r2, #24]
1a001b4e:	42a3      	cmp	r3, r4
1a001b50:	db01      	blt.n	1a001b56 <__sfputc_r+0x16>
1a001b52:	290a      	cmp	r1, #10
1a001b54:	d103      	bne.n	1a001b5e <__sfputc_r+0x1e>
1a001b56:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001b5a:	f000 b98f 	b.w	1a001e7c <__swbuf_r>
1a001b5e:	6813      	ldr	r3, [r2, #0]
1a001b60:	1c58      	adds	r0, r3, #1
1a001b62:	6010      	str	r0, [r2, #0]
1a001b64:	7019      	strb	r1, [r3, #0]
1a001b66:	4608      	mov	r0, r1
1a001b68:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001b6c:	4770      	bx	lr

1a001b6e <__sfputs_r>:
1a001b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001b70:	4606      	mov	r6, r0
1a001b72:	460f      	mov	r7, r1
1a001b74:	4614      	mov	r4, r2
1a001b76:	18d5      	adds	r5, r2, r3
1a001b78:	42ac      	cmp	r4, r5
1a001b7a:	d101      	bne.n	1a001b80 <__sfputs_r+0x12>
1a001b7c:	2000      	movs	r0, #0
1a001b7e:	e007      	b.n	1a001b90 <__sfputs_r+0x22>
1a001b80:	f814 1b01 	ldrb.w	r1, [r4], #1
1a001b84:	463a      	mov	r2, r7
1a001b86:	4630      	mov	r0, r6
1a001b88:	f7ff ffda 	bl	1a001b40 <__sfputc_r>
1a001b8c:	1c43      	adds	r3, r0, #1
1a001b8e:	d1f3      	bne.n	1a001b78 <__sfputs_r+0xa>
1a001b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1a001b94 <_vfiprintf_r>:
1a001b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001b98:	460d      	mov	r5, r1
1a001b9a:	b09d      	sub	sp, #116	; 0x74
1a001b9c:	4614      	mov	r4, r2
1a001b9e:	4698      	mov	r8, r3
1a001ba0:	4606      	mov	r6, r0
1a001ba2:	b118      	cbz	r0, 1a001bac <_vfiprintf_r+0x18>
1a001ba4:	6983      	ldr	r3, [r0, #24]
1a001ba6:	b90b      	cbnz	r3, 1a001bac <_vfiprintf_r+0x18>
1a001ba8:	f7ff fed0 	bl	1a00194c <__sinit>
1a001bac:	4b89      	ldr	r3, [pc, #548]	; (1a001dd4 <_vfiprintf_r+0x240>)
1a001bae:	429d      	cmp	r5, r3
1a001bb0:	d11b      	bne.n	1a001bea <_vfiprintf_r+0x56>
1a001bb2:	6875      	ldr	r5, [r6, #4]
1a001bb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a001bb6:	07d9      	lsls	r1, r3, #31
1a001bb8:	d405      	bmi.n	1a001bc6 <_vfiprintf_r+0x32>
1a001bba:	89ab      	ldrh	r3, [r5, #12]
1a001bbc:	059a      	lsls	r2, r3, #22
1a001bbe:	d402      	bmi.n	1a001bc6 <_vfiprintf_r+0x32>
1a001bc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a001bc2:	f7ff ff61 	bl	1a001a88 <__retarget_lock_acquire_recursive>
1a001bc6:	89ab      	ldrh	r3, [r5, #12]
1a001bc8:	071b      	lsls	r3, r3, #28
1a001bca:	d501      	bpl.n	1a001bd0 <_vfiprintf_r+0x3c>
1a001bcc:	692b      	ldr	r3, [r5, #16]
1a001bce:	b9eb      	cbnz	r3, 1a001c0c <_vfiprintf_r+0x78>
1a001bd0:	4629      	mov	r1, r5
1a001bd2:	4630      	mov	r0, r6
1a001bd4:	f000 f9a4 	bl	1a001f20 <__swsetup_r>
1a001bd8:	b1c0      	cbz	r0, 1a001c0c <_vfiprintf_r+0x78>
1a001bda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a001bdc:	07dc      	lsls	r4, r3, #31
1a001bde:	d50e      	bpl.n	1a001bfe <_vfiprintf_r+0x6a>
1a001be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001be4:	b01d      	add	sp, #116	; 0x74
1a001be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001bea:	4b7b      	ldr	r3, [pc, #492]	; (1a001dd8 <_vfiprintf_r+0x244>)
1a001bec:	429d      	cmp	r5, r3
1a001bee:	d101      	bne.n	1a001bf4 <_vfiprintf_r+0x60>
1a001bf0:	68b5      	ldr	r5, [r6, #8]
1a001bf2:	e7df      	b.n	1a001bb4 <_vfiprintf_r+0x20>
1a001bf4:	4b79      	ldr	r3, [pc, #484]	; (1a001ddc <_vfiprintf_r+0x248>)
1a001bf6:	429d      	cmp	r5, r3
1a001bf8:	bf08      	it	eq
1a001bfa:	68f5      	ldreq	r5, [r6, #12]
1a001bfc:	e7da      	b.n	1a001bb4 <_vfiprintf_r+0x20>
1a001bfe:	89ab      	ldrh	r3, [r5, #12]
1a001c00:	0598      	lsls	r0, r3, #22
1a001c02:	d4ed      	bmi.n	1a001be0 <_vfiprintf_r+0x4c>
1a001c04:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a001c06:	f7ff ff40 	bl	1a001a8a <__retarget_lock_release_recursive>
1a001c0a:	e7e9      	b.n	1a001be0 <_vfiprintf_r+0x4c>
1a001c0c:	2300      	movs	r3, #0
1a001c0e:	9309      	str	r3, [sp, #36]	; 0x24
1a001c10:	2320      	movs	r3, #32
1a001c12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a001c16:	f8cd 800c 	str.w	r8, [sp, #12]
1a001c1a:	2330      	movs	r3, #48	; 0x30
1a001c1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 1a001de0 <_vfiprintf_r+0x24c>
1a001c20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a001c24:	f04f 0901 	mov.w	r9, #1
1a001c28:	4623      	mov	r3, r4
1a001c2a:	469a      	mov	sl, r3
1a001c2c:	f813 2b01 	ldrb.w	r2, [r3], #1
1a001c30:	b10a      	cbz	r2, 1a001c36 <_vfiprintf_r+0xa2>
1a001c32:	2a25      	cmp	r2, #37	; 0x25
1a001c34:	d1f9      	bne.n	1a001c2a <_vfiprintf_r+0x96>
1a001c36:	ebba 0b04 	subs.w	fp, sl, r4
1a001c3a:	d00b      	beq.n	1a001c54 <_vfiprintf_r+0xc0>
1a001c3c:	465b      	mov	r3, fp
1a001c3e:	4622      	mov	r2, r4
1a001c40:	4629      	mov	r1, r5
1a001c42:	4630      	mov	r0, r6
1a001c44:	f7ff ff93 	bl	1a001b6e <__sfputs_r>
1a001c48:	3001      	adds	r0, #1
1a001c4a:	f000 80aa 	beq.w	1a001da2 <_vfiprintf_r+0x20e>
1a001c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a001c50:	445a      	add	r2, fp
1a001c52:	9209      	str	r2, [sp, #36]	; 0x24
1a001c54:	f89a 3000 	ldrb.w	r3, [sl]
1a001c58:	2b00      	cmp	r3, #0
1a001c5a:	f000 80a2 	beq.w	1a001da2 <_vfiprintf_r+0x20e>
1a001c5e:	2300      	movs	r3, #0
1a001c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a001c68:	f10a 0a01 	add.w	sl, sl, #1
1a001c6c:	9304      	str	r3, [sp, #16]
1a001c6e:	9307      	str	r3, [sp, #28]
1a001c70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a001c74:	931a      	str	r3, [sp, #104]	; 0x68
1a001c76:	4654      	mov	r4, sl
1a001c78:	2205      	movs	r2, #5
1a001c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
1a001c7e:	4858      	ldr	r0, [pc, #352]	; (1a001de0 <_vfiprintf_r+0x24c>)
1a001c80:	f000 fae6 	bl	1a002250 <memchr>
1a001c84:	9a04      	ldr	r2, [sp, #16]
1a001c86:	b9d8      	cbnz	r0, 1a001cc0 <_vfiprintf_r+0x12c>
1a001c88:	06d1      	lsls	r1, r2, #27
1a001c8a:	bf44      	itt	mi
1a001c8c:	2320      	movmi	r3, #32
1a001c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1a001c92:	0713      	lsls	r3, r2, #28
1a001c94:	bf44      	itt	mi
1a001c96:	232b      	movmi	r3, #43	; 0x2b
1a001c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1a001c9c:	f89a 3000 	ldrb.w	r3, [sl]
1a001ca0:	2b2a      	cmp	r3, #42	; 0x2a
1a001ca2:	d015      	beq.n	1a001cd0 <_vfiprintf_r+0x13c>
1a001ca4:	9a07      	ldr	r2, [sp, #28]
1a001ca6:	4654      	mov	r4, sl
1a001ca8:	2000      	movs	r0, #0
1a001caa:	f04f 0c0a 	mov.w	ip, #10
1a001cae:	4621      	mov	r1, r4
1a001cb0:	f811 3b01 	ldrb.w	r3, [r1], #1
1a001cb4:	3b30      	subs	r3, #48	; 0x30
1a001cb6:	2b09      	cmp	r3, #9
1a001cb8:	d94e      	bls.n	1a001d58 <_vfiprintf_r+0x1c4>
1a001cba:	b1b0      	cbz	r0, 1a001cea <_vfiprintf_r+0x156>
1a001cbc:	9207      	str	r2, [sp, #28]
1a001cbe:	e014      	b.n	1a001cea <_vfiprintf_r+0x156>
1a001cc0:	eba0 0308 	sub.w	r3, r0, r8
1a001cc4:	fa09 f303 	lsl.w	r3, r9, r3
1a001cc8:	4313      	orrs	r3, r2
1a001cca:	9304      	str	r3, [sp, #16]
1a001ccc:	46a2      	mov	sl, r4
1a001cce:	e7d2      	b.n	1a001c76 <_vfiprintf_r+0xe2>
1a001cd0:	9b03      	ldr	r3, [sp, #12]
1a001cd2:	1d19      	adds	r1, r3, #4
1a001cd4:	681b      	ldr	r3, [r3, #0]
1a001cd6:	9103      	str	r1, [sp, #12]
1a001cd8:	2b00      	cmp	r3, #0
1a001cda:	bfbb      	ittet	lt
1a001cdc:	425b      	neglt	r3, r3
1a001cde:	f042 0202 	orrlt.w	r2, r2, #2
1a001ce2:	9307      	strge	r3, [sp, #28]
1a001ce4:	9307      	strlt	r3, [sp, #28]
1a001ce6:	bfb8      	it	lt
1a001ce8:	9204      	strlt	r2, [sp, #16]
1a001cea:	7823      	ldrb	r3, [r4, #0]
1a001cec:	2b2e      	cmp	r3, #46	; 0x2e
1a001cee:	d10c      	bne.n	1a001d0a <_vfiprintf_r+0x176>
1a001cf0:	7863      	ldrb	r3, [r4, #1]
1a001cf2:	2b2a      	cmp	r3, #42	; 0x2a
1a001cf4:	d135      	bne.n	1a001d62 <_vfiprintf_r+0x1ce>
1a001cf6:	9b03      	ldr	r3, [sp, #12]
1a001cf8:	1d1a      	adds	r2, r3, #4
1a001cfa:	681b      	ldr	r3, [r3, #0]
1a001cfc:	9203      	str	r2, [sp, #12]
1a001cfe:	2b00      	cmp	r3, #0
1a001d00:	bfb8      	it	lt
1a001d02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a001d06:	3402      	adds	r4, #2
1a001d08:	9305      	str	r3, [sp, #20]
1a001d0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1a001df0 <_vfiprintf_r+0x25c>
1a001d0e:	7821      	ldrb	r1, [r4, #0]
1a001d10:	2203      	movs	r2, #3
1a001d12:	4650      	mov	r0, sl
1a001d14:	f000 fa9c 	bl	1a002250 <memchr>
1a001d18:	b140      	cbz	r0, 1a001d2c <_vfiprintf_r+0x198>
1a001d1a:	2340      	movs	r3, #64	; 0x40
1a001d1c:	eba0 000a 	sub.w	r0, r0, sl
1a001d20:	fa03 f000 	lsl.w	r0, r3, r0
1a001d24:	9b04      	ldr	r3, [sp, #16]
1a001d26:	4303      	orrs	r3, r0
1a001d28:	3401      	adds	r4, #1
1a001d2a:	9304      	str	r3, [sp, #16]
1a001d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
1a001d30:	482c      	ldr	r0, [pc, #176]	; (1a001de4 <_vfiprintf_r+0x250>)
1a001d32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a001d36:	2206      	movs	r2, #6
1a001d38:	f000 fa8a 	bl	1a002250 <memchr>
1a001d3c:	2800      	cmp	r0, #0
1a001d3e:	d03f      	beq.n	1a001dc0 <_vfiprintf_r+0x22c>
1a001d40:	4b29      	ldr	r3, [pc, #164]	; (1a001de8 <_vfiprintf_r+0x254>)
1a001d42:	bb1b      	cbnz	r3, 1a001d8c <_vfiprintf_r+0x1f8>
1a001d44:	9b03      	ldr	r3, [sp, #12]
1a001d46:	3307      	adds	r3, #7
1a001d48:	f023 0307 	bic.w	r3, r3, #7
1a001d4c:	3308      	adds	r3, #8
1a001d4e:	9303      	str	r3, [sp, #12]
1a001d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001d52:	443b      	add	r3, r7
1a001d54:	9309      	str	r3, [sp, #36]	; 0x24
1a001d56:	e767      	b.n	1a001c28 <_vfiprintf_r+0x94>
1a001d58:	fb0c 3202 	mla	r2, ip, r2, r3
1a001d5c:	460c      	mov	r4, r1
1a001d5e:	2001      	movs	r0, #1
1a001d60:	e7a5      	b.n	1a001cae <_vfiprintf_r+0x11a>
1a001d62:	2300      	movs	r3, #0
1a001d64:	3401      	adds	r4, #1
1a001d66:	9305      	str	r3, [sp, #20]
1a001d68:	4619      	mov	r1, r3
1a001d6a:	f04f 0c0a 	mov.w	ip, #10
1a001d6e:	4620      	mov	r0, r4
1a001d70:	f810 2b01 	ldrb.w	r2, [r0], #1
1a001d74:	3a30      	subs	r2, #48	; 0x30
1a001d76:	2a09      	cmp	r2, #9
1a001d78:	d903      	bls.n	1a001d82 <_vfiprintf_r+0x1ee>
1a001d7a:	2b00      	cmp	r3, #0
1a001d7c:	d0c5      	beq.n	1a001d0a <_vfiprintf_r+0x176>
1a001d7e:	9105      	str	r1, [sp, #20]
1a001d80:	e7c3      	b.n	1a001d0a <_vfiprintf_r+0x176>
1a001d82:	fb0c 2101 	mla	r1, ip, r1, r2
1a001d86:	4604      	mov	r4, r0
1a001d88:	2301      	movs	r3, #1
1a001d8a:	e7f0      	b.n	1a001d6e <_vfiprintf_r+0x1da>
1a001d8c:	ab03      	add	r3, sp, #12
1a001d8e:	9300      	str	r3, [sp, #0]
1a001d90:	462a      	mov	r2, r5
1a001d92:	4b16      	ldr	r3, [pc, #88]	; (1a001dec <_vfiprintf_r+0x258>)
1a001d94:	a904      	add	r1, sp, #16
1a001d96:	4630      	mov	r0, r6
1a001d98:	f3af 8000 	nop.w
1a001d9c:	4607      	mov	r7, r0
1a001d9e:	1c78      	adds	r0, r7, #1
1a001da0:	d1d6      	bne.n	1a001d50 <_vfiprintf_r+0x1bc>
1a001da2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a001da4:	07d9      	lsls	r1, r3, #31
1a001da6:	d405      	bmi.n	1a001db4 <_vfiprintf_r+0x220>
1a001da8:	89ab      	ldrh	r3, [r5, #12]
1a001daa:	059a      	lsls	r2, r3, #22
1a001dac:	d402      	bmi.n	1a001db4 <_vfiprintf_r+0x220>
1a001dae:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a001db0:	f7ff fe6b 	bl	1a001a8a <__retarget_lock_release_recursive>
1a001db4:	89ab      	ldrh	r3, [r5, #12]
1a001db6:	065b      	lsls	r3, r3, #25
1a001db8:	f53f af12 	bmi.w	1a001be0 <_vfiprintf_r+0x4c>
1a001dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
1a001dbe:	e711      	b.n	1a001be4 <_vfiprintf_r+0x50>
1a001dc0:	ab03      	add	r3, sp, #12
1a001dc2:	9300      	str	r3, [sp, #0]
1a001dc4:	462a      	mov	r2, r5
1a001dc6:	4b09      	ldr	r3, [pc, #36]	; (1a001dec <_vfiprintf_r+0x258>)
1a001dc8:	a904      	add	r1, sp, #16
1a001dca:	4630      	mov	r0, r6
1a001dcc:	f000 fb56 	bl	1a00247c <_printf_i>
1a001dd0:	e7e4      	b.n	1a001d9c <_vfiprintf_r+0x208>
1a001dd2:	bf00      	nop
1a001dd4:	1a0028b0 	.word	0x1a0028b0
1a001dd8:	1a0028d0 	.word	0x1a0028d0
1a001ddc:	1a002890 	.word	0x1a002890
1a001de0:	1a0028f4 	.word	0x1a0028f4
1a001de4:	1a0028fe 	.word	0x1a0028fe
1a001de8:	00000000 	.word	0x00000000
1a001dec:	1a001b6f 	.word	0x1a001b6f
1a001df0:	1a0028fa 	.word	0x1a0028fa

1a001df4 <__sread>:
1a001df4:	b510      	push	{r4, lr}
1a001df6:	460c      	mov	r4, r1
1a001df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a001dfc:	f7fe fc22 	bl	1a000644 <_read_r>
1a001e00:	2800      	cmp	r0, #0
1a001e02:	bfab      	itete	ge
1a001e04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a001e06:	89a3      	ldrhlt	r3, [r4, #12]
1a001e08:	181b      	addge	r3, r3, r0
1a001e0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a001e0e:	bfac      	ite	ge
1a001e10:	6563      	strge	r3, [r4, #84]	; 0x54
1a001e12:	81a3      	strhlt	r3, [r4, #12]
1a001e14:	bd10      	pop	{r4, pc}

1a001e16 <__swrite>:
1a001e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001e1a:	461f      	mov	r7, r3
1a001e1c:	898b      	ldrh	r3, [r1, #12]
1a001e1e:	05db      	lsls	r3, r3, #23
1a001e20:	4605      	mov	r5, r0
1a001e22:	460c      	mov	r4, r1
1a001e24:	4616      	mov	r6, r2
1a001e26:	d505      	bpl.n	1a001e34 <__swrite+0x1e>
1a001e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a001e2c:	2302      	movs	r3, #2
1a001e2e:	2200      	movs	r2, #0
1a001e30:	f7fe fc03 	bl	1a00063a <_lseek_r>
1a001e34:	89a3      	ldrh	r3, [r4, #12]
1a001e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a001e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a001e3e:	81a3      	strh	r3, [r4, #12]
1a001e40:	4632      	mov	r2, r6
1a001e42:	463b      	mov	r3, r7
1a001e44:	4628      	mov	r0, r5
1a001e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a001e4a:	f7fe bc22 	b.w	1a000692 <_write_r>

1a001e4e <__sseek>:
1a001e4e:	b510      	push	{r4, lr}
1a001e50:	460c      	mov	r4, r1
1a001e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a001e56:	f7fe fbf0 	bl	1a00063a <_lseek_r>
1a001e5a:	1c43      	adds	r3, r0, #1
1a001e5c:	89a3      	ldrh	r3, [r4, #12]
1a001e5e:	bf15      	itete	ne
1a001e60:	6560      	strne	r0, [r4, #84]	; 0x54
1a001e62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a001e66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a001e6a:	81a3      	strheq	r3, [r4, #12]
1a001e6c:	bf18      	it	ne
1a001e6e:	81a3      	strhne	r3, [r4, #12]
1a001e70:	bd10      	pop	{r4, pc}

1a001e72 <__sclose>:
1a001e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a001e76:	f7fe bbcd 	b.w	1a000614 <_close_r>
	...

1a001e7c <__swbuf_r>:
1a001e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001e7e:	460e      	mov	r6, r1
1a001e80:	4614      	mov	r4, r2
1a001e82:	4605      	mov	r5, r0
1a001e84:	b118      	cbz	r0, 1a001e8e <__swbuf_r+0x12>
1a001e86:	6983      	ldr	r3, [r0, #24]
1a001e88:	b90b      	cbnz	r3, 1a001e8e <__swbuf_r+0x12>
1a001e8a:	f7ff fd5f 	bl	1a00194c <__sinit>
1a001e8e:	4b21      	ldr	r3, [pc, #132]	; (1a001f14 <__swbuf_r+0x98>)
1a001e90:	429c      	cmp	r4, r3
1a001e92:	d12b      	bne.n	1a001eec <__swbuf_r+0x70>
1a001e94:	686c      	ldr	r4, [r5, #4]
1a001e96:	69a3      	ldr	r3, [r4, #24]
1a001e98:	60a3      	str	r3, [r4, #8]
1a001e9a:	89a3      	ldrh	r3, [r4, #12]
1a001e9c:	071a      	lsls	r2, r3, #28
1a001e9e:	d52f      	bpl.n	1a001f00 <__swbuf_r+0x84>
1a001ea0:	6923      	ldr	r3, [r4, #16]
1a001ea2:	b36b      	cbz	r3, 1a001f00 <__swbuf_r+0x84>
1a001ea4:	6923      	ldr	r3, [r4, #16]
1a001ea6:	6820      	ldr	r0, [r4, #0]
1a001ea8:	1ac0      	subs	r0, r0, r3
1a001eaa:	6963      	ldr	r3, [r4, #20]
1a001eac:	b2f6      	uxtb	r6, r6
1a001eae:	4283      	cmp	r3, r0
1a001eb0:	4637      	mov	r7, r6
1a001eb2:	dc04      	bgt.n	1a001ebe <__swbuf_r+0x42>
1a001eb4:	4621      	mov	r1, r4
1a001eb6:	4628      	mov	r0, r5
1a001eb8:	f000 f926 	bl	1a002108 <_fflush_r>
1a001ebc:	bb30      	cbnz	r0, 1a001f0c <__swbuf_r+0x90>
1a001ebe:	68a3      	ldr	r3, [r4, #8]
1a001ec0:	3b01      	subs	r3, #1
1a001ec2:	60a3      	str	r3, [r4, #8]
1a001ec4:	6823      	ldr	r3, [r4, #0]
1a001ec6:	1c5a      	adds	r2, r3, #1
1a001ec8:	6022      	str	r2, [r4, #0]
1a001eca:	701e      	strb	r6, [r3, #0]
1a001ecc:	6963      	ldr	r3, [r4, #20]
1a001ece:	3001      	adds	r0, #1
1a001ed0:	4283      	cmp	r3, r0
1a001ed2:	d004      	beq.n	1a001ede <__swbuf_r+0x62>
1a001ed4:	89a3      	ldrh	r3, [r4, #12]
1a001ed6:	07db      	lsls	r3, r3, #31
1a001ed8:	d506      	bpl.n	1a001ee8 <__swbuf_r+0x6c>
1a001eda:	2e0a      	cmp	r6, #10
1a001edc:	d104      	bne.n	1a001ee8 <__swbuf_r+0x6c>
1a001ede:	4621      	mov	r1, r4
1a001ee0:	4628      	mov	r0, r5
1a001ee2:	f000 f911 	bl	1a002108 <_fflush_r>
1a001ee6:	b988      	cbnz	r0, 1a001f0c <__swbuf_r+0x90>
1a001ee8:	4638      	mov	r0, r7
1a001eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001eec:	4b0a      	ldr	r3, [pc, #40]	; (1a001f18 <__swbuf_r+0x9c>)
1a001eee:	429c      	cmp	r4, r3
1a001ef0:	d101      	bne.n	1a001ef6 <__swbuf_r+0x7a>
1a001ef2:	68ac      	ldr	r4, [r5, #8]
1a001ef4:	e7cf      	b.n	1a001e96 <__swbuf_r+0x1a>
1a001ef6:	4b09      	ldr	r3, [pc, #36]	; (1a001f1c <__swbuf_r+0xa0>)
1a001ef8:	429c      	cmp	r4, r3
1a001efa:	bf08      	it	eq
1a001efc:	68ec      	ldreq	r4, [r5, #12]
1a001efe:	e7ca      	b.n	1a001e96 <__swbuf_r+0x1a>
1a001f00:	4621      	mov	r1, r4
1a001f02:	4628      	mov	r0, r5
1a001f04:	f000 f80c 	bl	1a001f20 <__swsetup_r>
1a001f08:	2800      	cmp	r0, #0
1a001f0a:	d0cb      	beq.n	1a001ea4 <__swbuf_r+0x28>
1a001f0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a001f10:	e7ea      	b.n	1a001ee8 <__swbuf_r+0x6c>
1a001f12:	bf00      	nop
1a001f14:	1a0028b0 	.word	0x1a0028b0
1a001f18:	1a0028d0 	.word	0x1a0028d0
1a001f1c:	1a002890 	.word	0x1a002890

1a001f20 <__swsetup_r>:
1a001f20:	4b32      	ldr	r3, [pc, #200]	; (1a001fec <__swsetup_r+0xcc>)
1a001f22:	b570      	push	{r4, r5, r6, lr}
1a001f24:	681d      	ldr	r5, [r3, #0]
1a001f26:	4606      	mov	r6, r0
1a001f28:	460c      	mov	r4, r1
1a001f2a:	b125      	cbz	r5, 1a001f36 <__swsetup_r+0x16>
1a001f2c:	69ab      	ldr	r3, [r5, #24]
1a001f2e:	b913      	cbnz	r3, 1a001f36 <__swsetup_r+0x16>
1a001f30:	4628      	mov	r0, r5
1a001f32:	f7ff fd0b 	bl	1a00194c <__sinit>
1a001f36:	4b2e      	ldr	r3, [pc, #184]	; (1a001ff0 <__swsetup_r+0xd0>)
1a001f38:	429c      	cmp	r4, r3
1a001f3a:	d10f      	bne.n	1a001f5c <__swsetup_r+0x3c>
1a001f3c:	686c      	ldr	r4, [r5, #4]
1a001f3e:	89a3      	ldrh	r3, [r4, #12]
1a001f40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a001f44:	0719      	lsls	r1, r3, #28
1a001f46:	d42c      	bmi.n	1a001fa2 <__swsetup_r+0x82>
1a001f48:	06dd      	lsls	r5, r3, #27
1a001f4a:	d411      	bmi.n	1a001f70 <__swsetup_r+0x50>
1a001f4c:	2309      	movs	r3, #9
1a001f4e:	6033      	str	r3, [r6, #0]
1a001f50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
1a001f54:	81a3      	strh	r3, [r4, #12]
1a001f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001f5a:	e03e      	b.n	1a001fda <__swsetup_r+0xba>
1a001f5c:	4b25      	ldr	r3, [pc, #148]	; (1a001ff4 <__swsetup_r+0xd4>)
1a001f5e:	429c      	cmp	r4, r3
1a001f60:	d101      	bne.n	1a001f66 <__swsetup_r+0x46>
1a001f62:	68ac      	ldr	r4, [r5, #8]
1a001f64:	e7eb      	b.n	1a001f3e <__swsetup_r+0x1e>
1a001f66:	4b24      	ldr	r3, [pc, #144]	; (1a001ff8 <__swsetup_r+0xd8>)
1a001f68:	429c      	cmp	r4, r3
1a001f6a:	bf08      	it	eq
1a001f6c:	68ec      	ldreq	r4, [r5, #12]
1a001f6e:	e7e6      	b.n	1a001f3e <__swsetup_r+0x1e>
1a001f70:	0758      	lsls	r0, r3, #29
1a001f72:	d512      	bpl.n	1a001f9a <__swsetup_r+0x7a>
1a001f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a001f76:	b141      	cbz	r1, 1a001f8a <__swsetup_r+0x6a>
1a001f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a001f7c:	4299      	cmp	r1, r3
1a001f7e:	d002      	beq.n	1a001f86 <__swsetup_r+0x66>
1a001f80:	4630      	mov	r0, r6
1a001f82:	f000 f9c1 	bl	1a002308 <_free_r>
1a001f86:	2300      	movs	r3, #0
1a001f88:	6363      	str	r3, [r4, #52]	; 0x34
1a001f8a:	89a3      	ldrh	r3, [r4, #12]
1a001f8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a001f90:	81a3      	strh	r3, [r4, #12]
1a001f92:	2300      	movs	r3, #0
1a001f94:	6063      	str	r3, [r4, #4]
1a001f96:	6923      	ldr	r3, [r4, #16]
1a001f98:	6023      	str	r3, [r4, #0]
1a001f9a:	89a3      	ldrh	r3, [r4, #12]
1a001f9c:	f043 0308 	orr.w	r3, r3, #8
1a001fa0:	81a3      	strh	r3, [r4, #12]
1a001fa2:	6923      	ldr	r3, [r4, #16]
1a001fa4:	b94b      	cbnz	r3, 1a001fba <__swsetup_r+0x9a>
1a001fa6:	89a3      	ldrh	r3, [r4, #12]
1a001fa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a001fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a001fb0:	d003      	beq.n	1a001fba <__swsetup_r+0x9a>
1a001fb2:	4621      	mov	r1, r4
1a001fb4:	4630      	mov	r0, r6
1a001fb6:	f000 f909 	bl	1a0021cc <__smakebuf_r>
1a001fba:	89a0      	ldrh	r0, [r4, #12]
1a001fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a001fc0:	f010 0301 	ands.w	r3, r0, #1
1a001fc4:	d00a      	beq.n	1a001fdc <__swsetup_r+0xbc>
1a001fc6:	2300      	movs	r3, #0
1a001fc8:	60a3      	str	r3, [r4, #8]
1a001fca:	6963      	ldr	r3, [r4, #20]
1a001fcc:	425b      	negs	r3, r3
1a001fce:	61a3      	str	r3, [r4, #24]
1a001fd0:	6923      	ldr	r3, [r4, #16]
1a001fd2:	b943      	cbnz	r3, 1a001fe6 <__swsetup_r+0xc6>
1a001fd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
1a001fd8:	d1ba      	bne.n	1a001f50 <__swsetup_r+0x30>
1a001fda:	bd70      	pop	{r4, r5, r6, pc}
1a001fdc:	0781      	lsls	r1, r0, #30
1a001fde:	bf58      	it	pl
1a001fe0:	6963      	ldrpl	r3, [r4, #20]
1a001fe2:	60a3      	str	r3, [r4, #8]
1a001fe4:	e7f4      	b.n	1a001fd0 <__swsetup_r+0xb0>
1a001fe6:	2000      	movs	r0, #0
1a001fe8:	e7f7      	b.n	1a001fda <__swsetup_r+0xba>
1a001fea:	bf00      	nop
1a001fec:	10000038 	.word	0x10000038
1a001ff0:	1a0028b0 	.word	0x1a0028b0
1a001ff4:	1a0028d0 	.word	0x1a0028d0
1a001ff8:	1a002890 	.word	0x1a002890

1a001ffc <__sflush_r>:
1a001ffc:	898a      	ldrh	r2, [r1, #12]
1a001ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002002:	4605      	mov	r5, r0
1a002004:	0710      	lsls	r0, r2, #28
1a002006:	460c      	mov	r4, r1
1a002008:	d458      	bmi.n	1a0020bc <__sflush_r+0xc0>
1a00200a:	684b      	ldr	r3, [r1, #4]
1a00200c:	2b00      	cmp	r3, #0
1a00200e:	dc05      	bgt.n	1a00201c <__sflush_r+0x20>
1a002010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a002012:	2b00      	cmp	r3, #0
1a002014:	dc02      	bgt.n	1a00201c <__sflush_r+0x20>
1a002016:	2000      	movs	r0, #0
1a002018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00201c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a00201e:	2e00      	cmp	r6, #0
1a002020:	d0f9      	beq.n	1a002016 <__sflush_r+0x1a>
1a002022:	2300      	movs	r3, #0
1a002024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a002028:	682f      	ldr	r7, [r5, #0]
1a00202a:	602b      	str	r3, [r5, #0]
1a00202c:	d032      	beq.n	1a002094 <__sflush_r+0x98>
1a00202e:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a002030:	89a3      	ldrh	r3, [r4, #12]
1a002032:	075a      	lsls	r2, r3, #29
1a002034:	d505      	bpl.n	1a002042 <__sflush_r+0x46>
1a002036:	6863      	ldr	r3, [r4, #4]
1a002038:	1ac0      	subs	r0, r0, r3
1a00203a:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a00203c:	b10b      	cbz	r3, 1a002042 <__sflush_r+0x46>
1a00203e:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a002040:	1ac0      	subs	r0, r0, r3
1a002042:	2300      	movs	r3, #0
1a002044:	4602      	mov	r2, r0
1a002046:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a002048:	6a21      	ldr	r1, [r4, #32]
1a00204a:	4628      	mov	r0, r5
1a00204c:	47b0      	blx	r6
1a00204e:	1c43      	adds	r3, r0, #1
1a002050:	89a3      	ldrh	r3, [r4, #12]
1a002052:	d106      	bne.n	1a002062 <__sflush_r+0x66>
1a002054:	6829      	ldr	r1, [r5, #0]
1a002056:	291d      	cmp	r1, #29
1a002058:	d82c      	bhi.n	1a0020b4 <__sflush_r+0xb8>
1a00205a:	4a2a      	ldr	r2, [pc, #168]	; (1a002104 <__sflush_r+0x108>)
1a00205c:	40ca      	lsrs	r2, r1
1a00205e:	07d6      	lsls	r6, r2, #31
1a002060:	d528      	bpl.n	1a0020b4 <__sflush_r+0xb8>
1a002062:	2200      	movs	r2, #0
1a002064:	6062      	str	r2, [r4, #4]
1a002066:	04d9      	lsls	r1, r3, #19
1a002068:	6922      	ldr	r2, [r4, #16]
1a00206a:	6022      	str	r2, [r4, #0]
1a00206c:	d504      	bpl.n	1a002078 <__sflush_r+0x7c>
1a00206e:	1c42      	adds	r2, r0, #1
1a002070:	d101      	bne.n	1a002076 <__sflush_r+0x7a>
1a002072:	682b      	ldr	r3, [r5, #0]
1a002074:	b903      	cbnz	r3, 1a002078 <__sflush_r+0x7c>
1a002076:	6560      	str	r0, [r4, #84]	; 0x54
1a002078:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a00207a:	602f      	str	r7, [r5, #0]
1a00207c:	2900      	cmp	r1, #0
1a00207e:	d0ca      	beq.n	1a002016 <__sflush_r+0x1a>
1a002080:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a002084:	4299      	cmp	r1, r3
1a002086:	d002      	beq.n	1a00208e <__sflush_r+0x92>
1a002088:	4628      	mov	r0, r5
1a00208a:	f000 f93d 	bl	1a002308 <_free_r>
1a00208e:	2000      	movs	r0, #0
1a002090:	6360      	str	r0, [r4, #52]	; 0x34
1a002092:	e7c1      	b.n	1a002018 <__sflush_r+0x1c>
1a002094:	6a21      	ldr	r1, [r4, #32]
1a002096:	2301      	movs	r3, #1
1a002098:	4628      	mov	r0, r5
1a00209a:	47b0      	blx	r6
1a00209c:	1c41      	adds	r1, r0, #1
1a00209e:	d1c7      	bne.n	1a002030 <__sflush_r+0x34>
1a0020a0:	682b      	ldr	r3, [r5, #0]
1a0020a2:	2b00      	cmp	r3, #0
1a0020a4:	d0c4      	beq.n	1a002030 <__sflush_r+0x34>
1a0020a6:	2b1d      	cmp	r3, #29
1a0020a8:	d001      	beq.n	1a0020ae <__sflush_r+0xb2>
1a0020aa:	2b16      	cmp	r3, #22
1a0020ac:	d101      	bne.n	1a0020b2 <__sflush_r+0xb6>
1a0020ae:	602f      	str	r7, [r5, #0]
1a0020b0:	e7b1      	b.n	1a002016 <__sflush_r+0x1a>
1a0020b2:	89a3      	ldrh	r3, [r4, #12]
1a0020b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0020b8:	81a3      	strh	r3, [r4, #12]
1a0020ba:	e7ad      	b.n	1a002018 <__sflush_r+0x1c>
1a0020bc:	690f      	ldr	r7, [r1, #16]
1a0020be:	2f00      	cmp	r7, #0
1a0020c0:	d0a9      	beq.n	1a002016 <__sflush_r+0x1a>
1a0020c2:	0793      	lsls	r3, r2, #30
1a0020c4:	680e      	ldr	r6, [r1, #0]
1a0020c6:	bf08      	it	eq
1a0020c8:	694b      	ldreq	r3, [r1, #20]
1a0020ca:	600f      	str	r7, [r1, #0]
1a0020cc:	bf18      	it	ne
1a0020ce:	2300      	movne	r3, #0
1a0020d0:	eba6 0807 	sub.w	r8, r6, r7
1a0020d4:	608b      	str	r3, [r1, #8]
1a0020d6:	f1b8 0f00 	cmp.w	r8, #0
1a0020da:	dd9c      	ble.n	1a002016 <__sflush_r+0x1a>
1a0020dc:	6a21      	ldr	r1, [r4, #32]
1a0020de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a0020e0:	4643      	mov	r3, r8
1a0020e2:	463a      	mov	r2, r7
1a0020e4:	4628      	mov	r0, r5
1a0020e6:	47b0      	blx	r6
1a0020e8:	2800      	cmp	r0, #0
1a0020ea:	dc06      	bgt.n	1a0020fa <__sflush_r+0xfe>
1a0020ec:	89a3      	ldrh	r3, [r4, #12]
1a0020ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0020f2:	81a3      	strh	r3, [r4, #12]
1a0020f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0020f8:	e78e      	b.n	1a002018 <__sflush_r+0x1c>
1a0020fa:	4407      	add	r7, r0
1a0020fc:	eba8 0800 	sub.w	r8, r8, r0
1a002100:	e7e9      	b.n	1a0020d6 <__sflush_r+0xda>
1a002102:	bf00      	nop
1a002104:	20400001 	.word	0x20400001

1a002108 <_fflush_r>:
1a002108:	b538      	push	{r3, r4, r5, lr}
1a00210a:	690b      	ldr	r3, [r1, #16]
1a00210c:	4605      	mov	r5, r0
1a00210e:	460c      	mov	r4, r1
1a002110:	b913      	cbnz	r3, 1a002118 <_fflush_r+0x10>
1a002112:	2500      	movs	r5, #0
1a002114:	4628      	mov	r0, r5
1a002116:	bd38      	pop	{r3, r4, r5, pc}
1a002118:	b118      	cbz	r0, 1a002122 <_fflush_r+0x1a>
1a00211a:	6983      	ldr	r3, [r0, #24]
1a00211c:	b90b      	cbnz	r3, 1a002122 <_fflush_r+0x1a>
1a00211e:	f7ff fc15 	bl	1a00194c <__sinit>
1a002122:	4b14      	ldr	r3, [pc, #80]	; (1a002174 <_fflush_r+0x6c>)
1a002124:	429c      	cmp	r4, r3
1a002126:	d11b      	bne.n	1a002160 <_fflush_r+0x58>
1a002128:	686c      	ldr	r4, [r5, #4]
1a00212a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00212e:	2b00      	cmp	r3, #0
1a002130:	d0ef      	beq.n	1a002112 <_fflush_r+0xa>
1a002132:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a002134:	07d0      	lsls	r0, r2, #31
1a002136:	d404      	bmi.n	1a002142 <_fflush_r+0x3a>
1a002138:	0599      	lsls	r1, r3, #22
1a00213a:	d402      	bmi.n	1a002142 <_fflush_r+0x3a>
1a00213c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00213e:	f7ff fca3 	bl	1a001a88 <__retarget_lock_acquire_recursive>
1a002142:	4628      	mov	r0, r5
1a002144:	4621      	mov	r1, r4
1a002146:	f7ff ff59 	bl	1a001ffc <__sflush_r>
1a00214a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00214c:	07da      	lsls	r2, r3, #31
1a00214e:	4605      	mov	r5, r0
1a002150:	d4e0      	bmi.n	1a002114 <_fflush_r+0xc>
1a002152:	89a3      	ldrh	r3, [r4, #12]
1a002154:	059b      	lsls	r3, r3, #22
1a002156:	d4dd      	bmi.n	1a002114 <_fflush_r+0xc>
1a002158:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00215a:	f7ff fc96 	bl	1a001a8a <__retarget_lock_release_recursive>
1a00215e:	e7d9      	b.n	1a002114 <_fflush_r+0xc>
1a002160:	4b05      	ldr	r3, [pc, #20]	; (1a002178 <_fflush_r+0x70>)
1a002162:	429c      	cmp	r4, r3
1a002164:	d101      	bne.n	1a00216a <_fflush_r+0x62>
1a002166:	68ac      	ldr	r4, [r5, #8]
1a002168:	e7df      	b.n	1a00212a <_fflush_r+0x22>
1a00216a:	4b04      	ldr	r3, [pc, #16]	; (1a00217c <_fflush_r+0x74>)
1a00216c:	429c      	cmp	r4, r3
1a00216e:	bf08      	it	eq
1a002170:	68ec      	ldreq	r4, [r5, #12]
1a002172:	e7da      	b.n	1a00212a <_fflush_r+0x22>
1a002174:	1a0028b0 	.word	0x1a0028b0
1a002178:	1a0028d0 	.word	0x1a0028d0
1a00217c:	1a002890 	.word	0x1a002890

1a002180 <__swhatbuf_r>:
1a002180:	b570      	push	{r4, r5, r6, lr}
1a002182:	460e      	mov	r6, r1
1a002184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002188:	2900      	cmp	r1, #0
1a00218a:	b096      	sub	sp, #88	; 0x58
1a00218c:	4614      	mov	r4, r2
1a00218e:	461d      	mov	r5, r3
1a002190:	da08      	bge.n	1a0021a4 <__swhatbuf_r+0x24>
1a002192:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
1a002196:	2200      	movs	r2, #0
1a002198:	602a      	str	r2, [r5, #0]
1a00219a:	061a      	lsls	r2, r3, #24
1a00219c:	d410      	bmi.n	1a0021c0 <__swhatbuf_r+0x40>
1a00219e:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0021a2:	e00e      	b.n	1a0021c2 <__swhatbuf_r+0x42>
1a0021a4:	466a      	mov	r2, sp
1a0021a6:	f7fe fa3a 	bl	1a00061e <_fstat_r>
1a0021aa:	2800      	cmp	r0, #0
1a0021ac:	dbf1      	blt.n	1a002192 <__swhatbuf_r+0x12>
1a0021ae:	9a01      	ldr	r2, [sp, #4]
1a0021b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0021b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0021b8:	425a      	negs	r2, r3
1a0021ba:	415a      	adcs	r2, r3
1a0021bc:	602a      	str	r2, [r5, #0]
1a0021be:	e7ee      	b.n	1a00219e <__swhatbuf_r+0x1e>
1a0021c0:	2340      	movs	r3, #64	; 0x40
1a0021c2:	2000      	movs	r0, #0
1a0021c4:	6023      	str	r3, [r4, #0]
1a0021c6:	b016      	add	sp, #88	; 0x58
1a0021c8:	bd70      	pop	{r4, r5, r6, pc}
	...

1a0021cc <__smakebuf_r>:
1a0021cc:	898b      	ldrh	r3, [r1, #12]
1a0021ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a0021d0:	079d      	lsls	r5, r3, #30
1a0021d2:	4606      	mov	r6, r0
1a0021d4:	460c      	mov	r4, r1
1a0021d6:	d507      	bpl.n	1a0021e8 <__smakebuf_r+0x1c>
1a0021d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a0021dc:	6023      	str	r3, [r4, #0]
1a0021de:	6123      	str	r3, [r4, #16]
1a0021e0:	2301      	movs	r3, #1
1a0021e2:	6163      	str	r3, [r4, #20]
1a0021e4:	b002      	add	sp, #8
1a0021e6:	bd70      	pop	{r4, r5, r6, pc}
1a0021e8:	ab01      	add	r3, sp, #4
1a0021ea:	466a      	mov	r2, sp
1a0021ec:	f7ff ffc8 	bl	1a002180 <__swhatbuf_r>
1a0021f0:	9900      	ldr	r1, [sp, #0]
1a0021f2:	4605      	mov	r5, r0
1a0021f4:	4630      	mov	r0, r6
1a0021f6:	f7ff fc49 	bl	1a001a8c <_malloc_r>
1a0021fa:	b948      	cbnz	r0, 1a002210 <__smakebuf_r+0x44>
1a0021fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002200:	059a      	lsls	r2, r3, #22
1a002202:	d4ef      	bmi.n	1a0021e4 <__smakebuf_r+0x18>
1a002204:	f023 0303 	bic.w	r3, r3, #3
1a002208:	f043 0302 	orr.w	r3, r3, #2
1a00220c:	81a3      	strh	r3, [r4, #12]
1a00220e:	e7e3      	b.n	1a0021d8 <__smakebuf_r+0xc>
1a002210:	4b0d      	ldr	r3, [pc, #52]	; (1a002248 <__smakebuf_r+0x7c>)
1a002212:	62b3      	str	r3, [r6, #40]	; 0x28
1a002214:	89a3      	ldrh	r3, [r4, #12]
1a002216:	6020      	str	r0, [r4, #0]
1a002218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00221c:	81a3      	strh	r3, [r4, #12]
1a00221e:	9b00      	ldr	r3, [sp, #0]
1a002220:	6163      	str	r3, [r4, #20]
1a002222:	9b01      	ldr	r3, [sp, #4]
1a002224:	6120      	str	r0, [r4, #16]
1a002226:	b15b      	cbz	r3, 1a002240 <__smakebuf_r+0x74>
1a002228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00222c:	4630      	mov	r0, r6
1a00222e:	f7fe f9fb 	bl	1a000628 <_isatty_r>
1a002232:	b128      	cbz	r0, 1a002240 <__smakebuf_r+0x74>
1a002234:	89a3      	ldrh	r3, [r4, #12]
1a002236:	f023 0303 	bic.w	r3, r3, #3
1a00223a:	f043 0301 	orr.w	r3, r3, #1
1a00223e:	81a3      	strh	r3, [r4, #12]
1a002240:	89a0      	ldrh	r0, [r4, #12]
1a002242:	4305      	orrs	r5, r0
1a002244:	81a5      	strh	r5, [r4, #12]
1a002246:	e7cd      	b.n	1a0021e4 <__smakebuf_r+0x18>
1a002248:	1a0018e5 	.word	0x1a0018e5
1a00224c:	00000000 	.word	0x00000000

1a002250 <memchr>:
1a002250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a002254:	2a10      	cmp	r2, #16
1a002256:	db2b      	blt.n	1a0022b0 <memchr+0x60>
1a002258:	f010 0f07 	tst.w	r0, #7
1a00225c:	d008      	beq.n	1a002270 <memchr+0x20>
1a00225e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a002262:	3a01      	subs	r2, #1
1a002264:	428b      	cmp	r3, r1
1a002266:	d02d      	beq.n	1a0022c4 <memchr+0x74>
1a002268:	f010 0f07 	tst.w	r0, #7
1a00226c:	b342      	cbz	r2, 1a0022c0 <memchr+0x70>
1a00226e:	d1f6      	bne.n	1a00225e <memchr+0xe>
1a002270:	b4f0      	push	{r4, r5, r6, r7}
1a002272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a002276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00227a:	f022 0407 	bic.w	r4, r2, #7
1a00227e:	f07f 0700 	mvns.w	r7, #0
1a002282:	2300      	movs	r3, #0
1a002284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a002288:	3c08      	subs	r4, #8
1a00228a:	ea85 0501 	eor.w	r5, r5, r1
1a00228e:	ea86 0601 	eor.w	r6, r6, r1
1a002292:	fa85 f547 	uadd8	r5, r5, r7
1a002296:	faa3 f587 	sel	r5, r3, r7
1a00229a:	fa86 f647 	uadd8	r6, r6, r7
1a00229e:	faa5 f687 	sel	r6, r5, r7
1a0022a2:	b98e      	cbnz	r6, 1a0022c8 <memchr+0x78>
1a0022a4:	d1ee      	bne.n	1a002284 <memchr+0x34>
1a0022a6:	bcf0      	pop	{r4, r5, r6, r7}
1a0022a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0022ac:	f002 0207 	and.w	r2, r2, #7
1a0022b0:	b132      	cbz	r2, 1a0022c0 <memchr+0x70>
1a0022b2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0022b6:	3a01      	subs	r2, #1
1a0022b8:	ea83 0301 	eor.w	r3, r3, r1
1a0022bc:	b113      	cbz	r3, 1a0022c4 <memchr+0x74>
1a0022be:	d1f8      	bne.n	1a0022b2 <memchr+0x62>
1a0022c0:	2000      	movs	r0, #0
1a0022c2:	4770      	bx	lr
1a0022c4:	3801      	subs	r0, #1
1a0022c6:	4770      	bx	lr
1a0022c8:	2d00      	cmp	r5, #0
1a0022ca:	bf06      	itte	eq
1a0022cc:	4635      	moveq	r5, r6
1a0022ce:	3803      	subeq	r0, #3
1a0022d0:	3807      	subne	r0, #7
1a0022d2:	f015 0f01 	tst.w	r5, #1
1a0022d6:	d107      	bne.n	1a0022e8 <memchr+0x98>
1a0022d8:	3001      	adds	r0, #1
1a0022da:	f415 7f80 	tst.w	r5, #256	; 0x100
1a0022de:	bf02      	ittt	eq
1a0022e0:	3001      	addeq	r0, #1
1a0022e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a0022e6:	3001      	addeq	r0, #1
1a0022e8:	bcf0      	pop	{r4, r5, r6, r7}
1a0022ea:	3801      	subs	r0, #1
1a0022ec:	4770      	bx	lr
1a0022ee:	bf00      	nop

1a0022f0 <__malloc_lock>:
1a0022f0:	4801      	ldr	r0, [pc, #4]	; (1a0022f8 <__malloc_lock+0x8>)
1a0022f2:	f7ff bbc9 	b.w	1a001a88 <__retarget_lock_acquire_recursive>
1a0022f6:	bf00      	nop
1a0022f8:	100000b4 	.word	0x100000b4

1a0022fc <__malloc_unlock>:
1a0022fc:	4801      	ldr	r0, [pc, #4]	; (1a002304 <__malloc_unlock+0x8>)
1a0022fe:	f7ff bbc4 	b.w	1a001a8a <__retarget_lock_release_recursive>
1a002302:	bf00      	nop
1a002304:	100000b4 	.word	0x100000b4

1a002308 <_free_r>:
1a002308:	b537      	push	{r0, r1, r2, r4, r5, lr}
1a00230a:	2900      	cmp	r1, #0
1a00230c:	d044      	beq.n	1a002398 <_free_r+0x90>
1a00230e:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a002312:	9001      	str	r0, [sp, #4]
1a002314:	2b00      	cmp	r3, #0
1a002316:	f1a1 0404 	sub.w	r4, r1, #4
1a00231a:	bfb8      	it	lt
1a00231c:	18e4      	addlt	r4, r4, r3
1a00231e:	f7ff ffe7 	bl	1a0022f0 <__malloc_lock>
1a002322:	4a1e      	ldr	r2, [pc, #120]	; (1a00239c <_free_r+0x94>)
1a002324:	9801      	ldr	r0, [sp, #4]
1a002326:	6813      	ldr	r3, [r2, #0]
1a002328:	b933      	cbnz	r3, 1a002338 <_free_r+0x30>
1a00232a:	6063      	str	r3, [r4, #4]
1a00232c:	6014      	str	r4, [r2, #0]
1a00232e:	b003      	add	sp, #12
1a002330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a002334:	f7ff bfe2 	b.w	1a0022fc <__malloc_unlock>
1a002338:	42a3      	cmp	r3, r4
1a00233a:	d908      	bls.n	1a00234e <_free_r+0x46>
1a00233c:	6825      	ldr	r5, [r4, #0]
1a00233e:	1961      	adds	r1, r4, r5
1a002340:	428b      	cmp	r3, r1
1a002342:	bf01      	itttt	eq
1a002344:	6819      	ldreq	r1, [r3, #0]
1a002346:	685b      	ldreq	r3, [r3, #4]
1a002348:	1949      	addeq	r1, r1, r5
1a00234a:	6021      	streq	r1, [r4, #0]
1a00234c:	e7ed      	b.n	1a00232a <_free_r+0x22>
1a00234e:	461a      	mov	r2, r3
1a002350:	685b      	ldr	r3, [r3, #4]
1a002352:	b10b      	cbz	r3, 1a002358 <_free_r+0x50>
1a002354:	42a3      	cmp	r3, r4
1a002356:	d9fa      	bls.n	1a00234e <_free_r+0x46>
1a002358:	6811      	ldr	r1, [r2, #0]
1a00235a:	1855      	adds	r5, r2, r1
1a00235c:	42a5      	cmp	r5, r4
1a00235e:	d10b      	bne.n	1a002378 <_free_r+0x70>
1a002360:	6824      	ldr	r4, [r4, #0]
1a002362:	4421      	add	r1, r4
1a002364:	1854      	adds	r4, r2, r1
1a002366:	42a3      	cmp	r3, r4
1a002368:	6011      	str	r1, [r2, #0]
1a00236a:	d1e0      	bne.n	1a00232e <_free_r+0x26>
1a00236c:	681c      	ldr	r4, [r3, #0]
1a00236e:	685b      	ldr	r3, [r3, #4]
1a002370:	6053      	str	r3, [r2, #4]
1a002372:	4421      	add	r1, r4
1a002374:	6011      	str	r1, [r2, #0]
1a002376:	e7da      	b.n	1a00232e <_free_r+0x26>
1a002378:	d902      	bls.n	1a002380 <_free_r+0x78>
1a00237a:	230c      	movs	r3, #12
1a00237c:	6003      	str	r3, [r0, #0]
1a00237e:	e7d6      	b.n	1a00232e <_free_r+0x26>
1a002380:	6825      	ldr	r5, [r4, #0]
1a002382:	1961      	adds	r1, r4, r5
1a002384:	428b      	cmp	r3, r1
1a002386:	bf04      	itt	eq
1a002388:	6819      	ldreq	r1, [r3, #0]
1a00238a:	685b      	ldreq	r3, [r3, #4]
1a00238c:	6063      	str	r3, [r4, #4]
1a00238e:	bf04      	itt	eq
1a002390:	1949      	addeq	r1, r1, r5
1a002392:	6021      	streq	r1, [r4, #0]
1a002394:	6054      	str	r4, [r2, #4]
1a002396:	e7ca      	b.n	1a00232e <_free_r+0x26>
1a002398:	b003      	add	sp, #12
1a00239a:	bd30      	pop	{r4, r5, pc}
1a00239c:	100000b8 	.word	0x100000b8

1a0023a0 <_printf_common>:
1a0023a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0023a4:	4616      	mov	r6, r2
1a0023a6:	4699      	mov	r9, r3
1a0023a8:	688a      	ldr	r2, [r1, #8]
1a0023aa:	690b      	ldr	r3, [r1, #16]
1a0023ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0023b0:	4293      	cmp	r3, r2
1a0023b2:	bfb8      	it	lt
1a0023b4:	4613      	movlt	r3, r2
1a0023b6:	6033      	str	r3, [r6, #0]
1a0023b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a0023bc:	4607      	mov	r7, r0
1a0023be:	460c      	mov	r4, r1
1a0023c0:	b10a      	cbz	r2, 1a0023c6 <_printf_common+0x26>
1a0023c2:	3301      	adds	r3, #1
1a0023c4:	6033      	str	r3, [r6, #0]
1a0023c6:	6823      	ldr	r3, [r4, #0]
1a0023c8:	0699      	lsls	r1, r3, #26
1a0023ca:	bf42      	ittt	mi
1a0023cc:	6833      	ldrmi	r3, [r6, #0]
1a0023ce:	3302      	addmi	r3, #2
1a0023d0:	6033      	strmi	r3, [r6, #0]
1a0023d2:	6825      	ldr	r5, [r4, #0]
1a0023d4:	f015 0506 	ands.w	r5, r5, #6
1a0023d8:	d106      	bne.n	1a0023e8 <_printf_common+0x48>
1a0023da:	f104 0a19 	add.w	sl, r4, #25
1a0023de:	68e3      	ldr	r3, [r4, #12]
1a0023e0:	6832      	ldr	r2, [r6, #0]
1a0023e2:	1a9b      	subs	r3, r3, r2
1a0023e4:	42ab      	cmp	r3, r5
1a0023e6:	dc26      	bgt.n	1a002436 <_printf_common+0x96>
1a0023e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
1a0023ec:	1e13      	subs	r3, r2, #0
1a0023ee:	6822      	ldr	r2, [r4, #0]
1a0023f0:	bf18      	it	ne
1a0023f2:	2301      	movne	r3, #1
1a0023f4:	0692      	lsls	r2, r2, #26
1a0023f6:	d42b      	bmi.n	1a002450 <_printf_common+0xb0>
1a0023f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0023fc:	4649      	mov	r1, r9
1a0023fe:	4638      	mov	r0, r7
1a002400:	47c0      	blx	r8
1a002402:	3001      	adds	r0, #1
1a002404:	d01e      	beq.n	1a002444 <_printf_common+0xa4>
1a002406:	6823      	ldr	r3, [r4, #0]
1a002408:	68e5      	ldr	r5, [r4, #12]
1a00240a:	6832      	ldr	r2, [r6, #0]
1a00240c:	f003 0306 	and.w	r3, r3, #6
1a002410:	2b04      	cmp	r3, #4
1a002412:	bf08      	it	eq
1a002414:	1aad      	subeq	r5, r5, r2
1a002416:	68a3      	ldr	r3, [r4, #8]
1a002418:	6922      	ldr	r2, [r4, #16]
1a00241a:	bf0c      	ite	eq
1a00241c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a002420:	2500      	movne	r5, #0
1a002422:	4293      	cmp	r3, r2
1a002424:	bfc4      	itt	gt
1a002426:	1a9b      	subgt	r3, r3, r2
1a002428:	18ed      	addgt	r5, r5, r3
1a00242a:	2600      	movs	r6, #0
1a00242c:	341a      	adds	r4, #26
1a00242e:	42b5      	cmp	r5, r6
1a002430:	d11a      	bne.n	1a002468 <_printf_common+0xc8>
1a002432:	2000      	movs	r0, #0
1a002434:	e008      	b.n	1a002448 <_printf_common+0xa8>
1a002436:	2301      	movs	r3, #1
1a002438:	4652      	mov	r2, sl
1a00243a:	4649      	mov	r1, r9
1a00243c:	4638      	mov	r0, r7
1a00243e:	47c0      	blx	r8
1a002440:	3001      	adds	r0, #1
1a002442:	d103      	bne.n	1a00244c <_printf_common+0xac>
1a002444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00244c:	3501      	adds	r5, #1
1a00244e:	e7c6      	b.n	1a0023de <_printf_common+0x3e>
1a002450:	18e1      	adds	r1, r4, r3
1a002452:	1c5a      	adds	r2, r3, #1
1a002454:	2030      	movs	r0, #48	; 0x30
1a002456:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a00245a:	4422      	add	r2, r4
1a00245c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a002460:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a002464:	3302      	adds	r3, #2
1a002466:	e7c7      	b.n	1a0023f8 <_printf_common+0x58>
1a002468:	2301      	movs	r3, #1
1a00246a:	4622      	mov	r2, r4
1a00246c:	4649      	mov	r1, r9
1a00246e:	4638      	mov	r0, r7
1a002470:	47c0      	blx	r8
1a002472:	3001      	adds	r0, #1
1a002474:	d0e6      	beq.n	1a002444 <_printf_common+0xa4>
1a002476:	3601      	adds	r6, #1
1a002478:	e7d9      	b.n	1a00242e <_printf_common+0x8e>
	...

1a00247c <_printf_i>:
1a00247c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1a002480:	7e0f      	ldrb	r7, [r1, #24]
1a002482:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1a002484:	2f78      	cmp	r7, #120	; 0x78
1a002486:	4691      	mov	r9, r2
1a002488:	4680      	mov	r8, r0
1a00248a:	460c      	mov	r4, r1
1a00248c:	469a      	mov	sl, r3
1a00248e:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a002492:	d807      	bhi.n	1a0024a4 <_printf_i+0x28>
1a002494:	2f62      	cmp	r7, #98	; 0x62
1a002496:	d80a      	bhi.n	1a0024ae <_printf_i+0x32>
1a002498:	2f00      	cmp	r7, #0
1a00249a:	f000 80d8 	beq.w	1a00264e <_printf_i+0x1d2>
1a00249e:	2f58      	cmp	r7, #88	; 0x58
1a0024a0:	f000 80a3 	beq.w	1a0025ea <_printf_i+0x16e>
1a0024a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0024a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
1a0024ac:	e03a      	b.n	1a002524 <_printf_i+0xa8>
1a0024ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
1a0024b2:	2b15      	cmp	r3, #21
1a0024b4:	d8f6      	bhi.n	1a0024a4 <_printf_i+0x28>
1a0024b6:	a101      	add	r1, pc, #4	; (adr r1, 1a0024bc <_printf_i+0x40>)
1a0024b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1a0024bc:	1a002515 	.word	0x1a002515
1a0024c0:	1a002529 	.word	0x1a002529
1a0024c4:	1a0024a5 	.word	0x1a0024a5
1a0024c8:	1a0024a5 	.word	0x1a0024a5
1a0024cc:	1a0024a5 	.word	0x1a0024a5
1a0024d0:	1a0024a5 	.word	0x1a0024a5
1a0024d4:	1a002529 	.word	0x1a002529
1a0024d8:	1a0024a5 	.word	0x1a0024a5
1a0024dc:	1a0024a5 	.word	0x1a0024a5
1a0024e0:	1a0024a5 	.word	0x1a0024a5
1a0024e4:	1a0024a5 	.word	0x1a0024a5
1a0024e8:	1a002635 	.word	0x1a002635
1a0024ec:	1a002559 	.word	0x1a002559
1a0024f0:	1a002617 	.word	0x1a002617
1a0024f4:	1a0024a5 	.word	0x1a0024a5
1a0024f8:	1a0024a5 	.word	0x1a0024a5
1a0024fc:	1a002657 	.word	0x1a002657
1a002500:	1a0024a5 	.word	0x1a0024a5
1a002504:	1a002559 	.word	0x1a002559
1a002508:	1a0024a5 	.word	0x1a0024a5
1a00250c:	1a0024a5 	.word	0x1a0024a5
1a002510:	1a00261f 	.word	0x1a00261f
1a002514:	682b      	ldr	r3, [r5, #0]
1a002516:	1d1a      	adds	r2, r3, #4
1a002518:	681b      	ldr	r3, [r3, #0]
1a00251a:	602a      	str	r2, [r5, #0]
1a00251c:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a002520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a002524:	2301      	movs	r3, #1
1a002526:	e0a3      	b.n	1a002670 <_printf_i+0x1f4>
1a002528:	6820      	ldr	r0, [r4, #0]
1a00252a:	6829      	ldr	r1, [r5, #0]
1a00252c:	0606      	lsls	r6, r0, #24
1a00252e:	f101 0304 	add.w	r3, r1, #4
1a002532:	d50a      	bpl.n	1a00254a <_printf_i+0xce>
1a002534:	680e      	ldr	r6, [r1, #0]
1a002536:	602b      	str	r3, [r5, #0]
1a002538:	2e00      	cmp	r6, #0
1a00253a:	da03      	bge.n	1a002544 <_printf_i+0xc8>
1a00253c:	232d      	movs	r3, #45	; 0x2d
1a00253e:	4276      	negs	r6, r6
1a002540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a002544:	485e      	ldr	r0, [pc, #376]	; (1a0026c0 <_printf_i+0x244>)
1a002546:	230a      	movs	r3, #10
1a002548:	e019      	b.n	1a00257e <_printf_i+0x102>
1a00254a:	680e      	ldr	r6, [r1, #0]
1a00254c:	602b      	str	r3, [r5, #0]
1a00254e:	f010 0f40 	tst.w	r0, #64	; 0x40
1a002552:	bf18      	it	ne
1a002554:	b236      	sxthne	r6, r6
1a002556:	e7ef      	b.n	1a002538 <_printf_i+0xbc>
1a002558:	682b      	ldr	r3, [r5, #0]
1a00255a:	6820      	ldr	r0, [r4, #0]
1a00255c:	1d19      	adds	r1, r3, #4
1a00255e:	6029      	str	r1, [r5, #0]
1a002560:	0601      	lsls	r1, r0, #24
1a002562:	d501      	bpl.n	1a002568 <_printf_i+0xec>
1a002564:	681e      	ldr	r6, [r3, #0]
1a002566:	e002      	b.n	1a00256e <_printf_i+0xf2>
1a002568:	0646      	lsls	r6, r0, #25
1a00256a:	d5fb      	bpl.n	1a002564 <_printf_i+0xe8>
1a00256c:	881e      	ldrh	r6, [r3, #0]
1a00256e:	4854      	ldr	r0, [pc, #336]	; (1a0026c0 <_printf_i+0x244>)
1a002570:	2f6f      	cmp	r7, #111	; 0x6f
1a002572:	bf0c      	ite	eq
1a002574:	2308      	moveq	r3, #8
1a002576:	230a      	movne	r3, #10
1a002578:	2100      	movs	r1, #0
1a00257a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a00257e:	6865      	ldr	r5, [r4, #4]
1a002580:	60a5      	str	r5, [r4, #8]
1a002582:	2d00      	cmp	r5, #0
1a002584:	bfa2      	ittt	ge
1a002586:	6821      	ldrge	r1, [r4, #0]
1a002588:	f021 0104 	bicge.w	r1, r1, #4
1a00258c:	6021      	strge	r1, [r4, #0]
1a00258e:	b90e      	cbnz	r6, 1a002594 <_printf_i+0x118>
1a002590:	2d00      	cmp	r5, #0
1a002592:	d04d      	beq.n	1a002630 <_printf_i+0x1b4>
1a002594:	4615      	mov	r5, r2
1a002596:	fbb6 f1f3 	udiv	r1, r6, r3
1a00259a:	fb03 6711 	mls	r7, r3, r1, r6
1a00259e:	5dc7      	ldrb	r7, [r0, r7]
1a0025a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
1a0025a4:	4637      	mov	r7, r6
1a0025a6:	42bb      	cmp	r3, r7
1a0025a8:	460e      	mov	r6, r1
1a0025aa:	d9f4      	bls.n	1a002596 <_printf_i+0x11a>
1a0025ac:	2b08      	cmp	r3, #8
1a0025ae:	d10b      	bne.n	1a0025c8 <_printf_i+0x14c>
1a0025b0:	6823      	ldr	r3, [r4, #0]
1a0025b2:	07de      	lsls	r6, r3, #31
1a0025b4:	d508      	bpl.n	1a0025c8 <_printf_i+0x14c>
1a0025b6:	6923      	ldr	r3, [r4, #16]
1a0025b8:	6861      	ldr	r1, [r4, #4]
1a0025ba:	4299      	cmp	r1, r3
1a0025bc:	bfde      	ittt	le
1a0025be:	2330      	movle	r3, #48	; 0x30
1a0025c0:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0025c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a0025c8:	1b52      	subs	r2, r2, r5
1a0025ca:	6122      	str	r2, [r4, #16]
1a0025cc:	f8cd a000 	str.w	sl, [sp]
1a0025d0:	464b      	mov	r3, r9
1a0025d2:	aa03      	add	r2, sp, #12
1a0025d4:	4621      	mov	r1, r4
1a0025d6:	4640      	mov	r0, r8
1a0025d8:	f7ff fee2 	bl	1a0023a0 <_printf_common>
1a0025dc:	3001      	adds	r0, #1
1a0025de:	d14c      	bne.n	1a00267a <_printf_i+0x1fe>
1a0025e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0025e4:	b004      	add	sp, #16
1a0025e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0025ea:	4835      	ldr	r0, [pc, #212]	; (1a0026c0 <_printf_i+0x244>)
1a0025ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
1a0025f0:	6829      	ldr	r1, [r5, #0]
1a0025f2:	6823      	ldr	r3, [r4, #0]
1a0025f4:	f851 6b04 	ldr.w	r6, [r1], #4
1a0025f8:	6029      	str	r1, [r5, #0]
1a0025fa:	061d      	lsls	r5, r3, #24
1a0025fc:	d514      	bpl.n	1a002628 <_printf_i+0x1ac>
1a0025fe:	07df      	lsls	r7, r3, #31
1a002600:	bf44      	itt	mi
1a002602:	f043 0320 	orrmi.w	r3, r3, #32
1a002606:	6023      	strmi	r3, [r4, #0]
1a002608:	b91e      	cbnz	r6, 1a002612 <_printf_i+0x196>
1a00260a:	6823      	ldr	r3, [r4, #0]
1a00260c:	f023 0320 	bic.w	r3, r3, #32
1a002610:	6023      	str	r3, [r4, #0]
1a002612:	2310      	movs	r3, #16
1a002614:	e7b0      	b.n	1a002578 <_printf_i+0xfc>
1a002616:	6823      	ldr	r3, [r4, #0]
1a002618:	f043 0320 	orr.w	r3, r3, #32
1a00261c:	6023      	str	r3, [r4, #0]
1a00261e:	2378      	movs	r3, #120	; 0x78
1a002620:	4828      	ldr	r0, [pc, #160]	; (1a0026c4 <_printf_i+0x248>)
1a002622:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a002626:	e7e3      	b.n	1a0025f0 <_printf_i+0x174>
1a002628:	0659      	lsls	r1, r3, #25
1a00262a:	bf48      	it	mi
1a00262c:	b2b6      	uxthmi	r6, r6
1a00262e:	e7e6      	b.n	1a0025fe <_printf_i+0x182>
1a002630:	4615      	mov	r5, r2
1a002632:	e7bb      	b.n	1a0025ac <_printf_i+0x130>
1a002634:	682b      	ldr	r3, [r5, #0]
1a002636:	6826      	ldr	r6, [r4, #0]
1a002638:	6961      	ldr	r1, [r4, #20]
1a00263a:	1d18      	adds	r0, r3, #4
1a00263c:	6028      	str	r0, [r5, #0]
1a00263e:	0635      	lsls	r5, r6, #24
1a002640:	681b      	ldr	r3, [r3, #0]
1a002642:	d501      	bpl.n	1a002648 <_printf_i+0x1cc>
1a002644:	6019      	str	r1, [r3, #0]
1a002646:	e002      	b.n	1a00264e <_printf_i+0x1d2>
1a002648:	0670      	lsls	r0, r6, #25
1a00264a:	d5fb      	bpl.n	1a002644 <_printf_i+0x1c8>
1a00264c:	8019      	strh	r1, [r3, #0]
1a00264e:	2300      	movs	r3, #0
1a002650:	6123      	str	r3, [r4, #16]
1a002652:	4615      	mov	r5, r2
1a002654:	e7ba      	b.n	1a0025cc <_printf_i+0x150>
1a002656:	682b      	ldr	r3, [r5, #0]
1a002658:	1d1a      	adds	r2, r3, #4
1a00265a:	602a      	str	r2, [r5, #0]
1a00265c:	681d      	ldr	r5, [r3, #0]
1a00265e:	6862      	ldr	r2, [r4, #4]
1a002660:	2100      	movs	r1, #0
1a002662:	4628      	mov	r0, r5
1a002664:	f7ff fdf4 	bl	1a002250 <memchr>
1a002668:	b108      	cbz	r0, 1a00266e <_printf_i+0x1f2>
1a00266a:	1b40      	subs	r0, r0, r5
1a00266c:	6060      	str	r0, [r4, #4]
1a00266e:	6863      	ldr	r3, [r4, #4]
1a002670:	6123      	str	r3, [r4, #16]
1a002672:	2300      	movs	r3, #0
1a002674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a002678:	e7a8      	b.n	1a0025cc <_printf_i+0x150>
1a00267a:	6923      	ldr	r3, [r4, #16]
1a00267c:	462a      	mov	r2, r5
1a00267e:	4649      	mov	r1, r9
1a002680:	4640      	mov	r0, r8
1a002682:	47d0      	blx	sl
1a002684:	3001      	adds	r0, #1
1a002686:	d0ab      	beq.n	1a0025e0 <_printf_i+0x164>
1a002688:	6823      	ldr	r3, [r4, #0]
1a00268a:	079b      	lsls	r3, r3, #30
1a00268c:	d413      	bmi.n	1a0026b6 <_printf_i+0x23a>
1a00268e:	68e0      	ldr	r0, [r4, #12]
1a002690:	9b03      	ldr	r3, [sp, #12]
1a002692:	4298      	cmp	r0, r3
1a002694:	bfb8      	it	lt
1a002696:	4618      	movlt	r0, r3
1a002698:	e7a4      	b.n	1a0025e4 <_printf_i+0x168>
1a00269a:	2301      	movs	r3, #1
1a00269c:	4632      	mov	r2, r6
1a00269e:	4649      	mov	r1, r9
1a0026a0:	4640      	mov	r0, r8
1a0026a2:	47d0      	blx	sl
1a0026a4:	3001      	adds	r0, #1
1a0026a6:	d09b      	beq.n	1a0025e0 <_printf_i+0x164>
1a0026a8:	3501      	adds	r5, #1
1a0026aa:	68e3      	ldr	r3, [r4, #12]
1a0026ac:	9903      	ldr	r1, [sp, #12]
1a0026ae:	1a5b      	subs	r3, r3, r1
1a0026b0:	42ab      	cmp	r3, r5
1a0026b2:	dcf2      	bgt.n	1a00269a <_printf_i+0x21e>
1a0026b4:	e7eb      	b.n	1a00268e <_printf_i+0x212>
1a0026b6:	2500      	movs	r5, #0
1a0026b8:	f104 0619 	add.w	r6, r4, #25
1a0026bc:	e7f5      	b.n	1a0026aa <_printf_i+0x22e>
1a0026be:	bf00      	nop
1a0026c0:	1a002905 	.word	0x1a002905
1a0026c4:	1a002916 	.word	0x1a002916
1a0026c8:	4f525245 	.word	0x4f525245
1a0026cc:	564f2052 	.word	0x564f2052
1a0026d0:	55525245 	.word	0x55525245
1a0026d4:	000a0d4e 	.word	0x000a0d4e
1a0026d8:	4f525245 	.word	0x4f525245
1a0026dc:	41502052 	.word	0x41502052
1a0026e0:	59544952 	.word	0x59544952
1a0026e4:	00000a0d 	.word	0x00000a0d
1a0026e8:	4f525245 	.word	0x4f525245
1a0026ec:	52462052 	.word	0x52462052
1a0026f0:	4e494d41 	.word	0x4e494d41
1a0026f4:	000a0d47 	.word	0x000a0d47
1a0026f8:	4f525245 	.word	0x4f525245
1a0026fc:	52422052 	.word	0x52422052
1a002700:	0d4b4145 	.word	0x0d4b4145
1a002704:	0000000a 	.word	0x0000000a
1a002708:	4f525245 	.word	0x4f525245
1a00270c:	4e552052 	.word	0x4e552052
1a002710:	574f4e4b 	.word	0x574f4e4b
1a002714:	000a0d4e 	.word	0x000a0d4e
1a002718:	00007325 	.word	0x00007325

1a00271c <ExtRateIn>:
1a00271c:	00000000                                ....

1a002720 <GpioButtons>:
1a002720:	08000400 09010900                       ........

1a002728 <GpioLeds>:
1a002728:	01050005 0e000205 0c010b01              ............

1a002734 <GpioPorts>:
1a002734:	03030003 0f050403 05031005 07030603     ................
1a002744:	00000802                                ....

1a002748 <OscRateIn>:
1a002748:	00b71b00                                ....

1a00274c <InitClkStates>:
1a00274c:	01010f01                                ....

1a002750 <pinmuxing>:
1a002750:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a002760:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a002770:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a002780:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a002790:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0027a0:	00d50301 00d50401 00160107 00560207     ..............V.
1a0027b0:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0027c0:	00570206 0f0f0f03 000000ff              ..W.........

1a0027cc <periph_to_base>:
1a0027cc:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0027dc:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0027ec:	000100e0 01000100 01200003 00060120     .......... . ...
1a0027fc:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00280c:	01820013 00120182 01a201a2 01c20011     ................
1a00281c:	001001c2 01e201e2 0202000f 000e0202     ................
1a00282c:	02220222 0223000d 001c0223              "."...#.#...

1a002838 <InitClkStates>:
1a002838:	00010100 00010909 0001090a 01010701     ................
1a002848:	00010902 00010906 0101090c 0001090d     ................
1a002858:	0001090e 0001090f 00010910 00010911     ................
1a002868:	00010912 00010913 00011114 00011119     ................
1a002878:	0001111a 0001111b                       ........

1a002880 <UART_BClock>:
1a002880:	01a201c2 01620182                       ......b.

1a002888 <UART_PClock>:
1a002888:	00820081 00a200a1                       ........

1a002890 <__sf_fake_stderr>:
	...

1a0028b0 <__sf_fake_stdin>:
	...

1a0028d0 <__sf_fake_stdout>:
	...

1a0028f0 <_global_impure_ptr>:
1a0028f0:	1000003c 2b302d23 6c680020 6665004c     <...#-0+ .hlL.ef
1a002900:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a002910:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a002920:	64636261 00006665                       abcdef..
